enum THitTest { htAbove, htBelow, htNowhere, htOnItem, htOnButton, htOnIcon, htOnIndent, htOnLabel, htOnRight, htOnStateIcon, htToLeft, htToRight };
typedef Set <THitTest, htAbove, htToRight> THitTests;
typedef int TImageIndex;

class TCustomTabControl : public TWinControl
{
    public:
    TCustomTabControl(TComponent* AOwner);
    ~TCustomTabControl();
    int IndexOfTabAt(int X, int Y);
    THitTests GetHitTestInfoAt(int X, int Y);
    TRect TabRect(int Index);
    int RowCount();
    void ScrollTabs(int Delta);
    __property TCanvas* Canvas = {read = FCanvas};
};

class TPageControl;

class TTabSheet : public TWinControl
{
    public:
    __property bool Highlighted = {read = FHighlighted, write = SetHighlighted};
    __property TImageIndex ImageIndex = {read = FImageIndex, write = SetImageIndex};
    __property int PageIndex = {read = GetPageIndex, write = SetPageIndex};
    __property bool TabVisible = {read = FTabVisible, write = SetTabVisible};

    TTabSheet(TComponent* AOwner);
    ~TTabSheet();
    __property TPageControl* PageControl = {read = FPageControl, write = SetPageControl};
    __property int TabIndex = {read = GetTabIndex};
};

class TPageControl : public TCustomTabControl
{
    public:
    __property TTabSheet* ActivePage = {read = FActivePage, write = SetActivePage};

    TPageControl(TComponent* AOwner)
    ~TPageControl();
    TTabSheet* FindNextPage(TTabSheet* CurPage, bool GoForward, bool CheckTabVisible);
    void SelectNextPage(bool GoForward, bool CheckTabVisible);
    __property int ActivePageIndex = {read = GetActivePageIndex, write = SetActivePageIndex};
    __property int PageCount = {read = GetPageCount};
    __property TTabSheet* Pages[int Index] = {read = GetPage};
};
