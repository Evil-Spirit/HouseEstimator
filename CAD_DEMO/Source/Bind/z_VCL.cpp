/*
** Lua binding: z_VCL
** Generated automatically by tolua++-1.0.3 on 03/10/05 17:17:48.
*/

#ifndef __cplusplus
#include "stdlib.h"
#endif
#include "string.h"

#include "tolua++.h"

/* Exported function */
TOLUA_API int  tolua_z_VCL_open (lua_State* tolua_S);

#include "Usefuls.h"
#include "MyTemplates.h"
#include "MTL.h"
#include "bind.h"
#include <vcl.h>
#include "MyDialogU.h"

/* function to release collected object via destructor */
#ifdef __cplusplus


/////////////////////////////////
static int tolua_collect_TLabel (lua_State* tolua_S)
{
 TLabel* self = (TLabel*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}
/////////////////////////////////


static int tolua_collect_TList (lua_State* tolua_S)
{
 TList* self = (TList*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TWMKey (lua_State* tolua_S)
{
 TWMKey* self = (TWMKey*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TRadioGroup (lua_State* tolua_S)
{
 TRadioGroup* self = (TRadioGroup*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TDragObject (lua_State* tolua_S)
{
 TDragObject* self = (TDragObject*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TInterfacedPersistent (lua_State* tolua_S)
{
 TInterfacedPersistent* self = (TInterfacedPersistent*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TStream (lua_State* tolua_S)
{
 TStream* self = (TStream*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TMonitor (lua_State* tolua_S)
{
 TMonitor* self = (TMonitor*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TBasicAction (lua_State* tolua_S)
{
 TBasicAction* self = (TBasicAction*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TWMMenuChar (lua_State* tolua_S)
{
 TWMMenuChar* self = (TWMMenuChar*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TPageControl (lua_State* tolua_S)
{
 TPageControl* self = (TPageControl*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TCustomListControl (lua_State* tolua_S)
{
 TCustomListControl* self = (TCustomListControl*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TSizeConstraints (lua_State* tolua_S)
{
 TSizeConstraints* self = (TSizeConstraints*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TGraphicsObject (lua_State* tolua_S)
{
 TGraphicsObject* self = (TGraphicsObject*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_RECT (lua_State* tolua_S)
{
 RECT* self = (RECT*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TChangeLink (lua_State* tolua_S)
{
 TChangeLink* self = (TChangeLink*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TImage (lua_State* tolua_S)
{
 TImage* self = (TImage*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TCustomMultiSelectListControl (lua_State* tolua_S)
{
 TCustomMultiSelectListControl* self = (TCustomMultiSelectListControl*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_Set_Forms__6_fsCreating_fsActivated_ (lua_State* tolua_S)
{
 Set<Forms__6,fsCreating,fsActivated>* self = (Set<Forms__6,fsCreating,fsActivated>*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_Set_Controls__01_csLButtonDown_csDocking_ (lua_State* tolua_S)
{
 Set<Controls__01,csLButtonDown,csDocking>* self = (Set<Controls__01,csLButtonDown,csDocking>*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_Set_TAnchorKind_akLeft_akBottom_ (lua_State* tolua_S)
{
 Set<TAnchorKind,akLeft,akBottom>* self = (Set<TAnchorKind,akLeft,akBottom>*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TTabSheet (lua_State* tolua_S)
{
 TTabSheet* self = (TTabSheet*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TGraphic (lua_State* tolua_S)
{
 TGraphic* self = (TGraphic*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TPopupMenu (lua_State* tolua_S)
{
 TPopupMenu* self = (TPopupMenu*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TBrush (lua_State* tolua_S)
{
 TBrush* self = (TBrush*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TDragDockObject (lua_State* tolua_S)
{
 TDragDockObject* self = (TDragDockObject*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TCustomImageList (lua_State* tolua_S)
{
 TCustomImageList* self = (TCustomImageList*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_Set_TMenuAnimations_maLeftToRight_maNone_ (lua_State* tolua_S)
{
 Set<TMenuAnimations,maLeftToRight,maNone>* self = (Set<TMenuAnimations,maLeftToRight,maNone>*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TPen (lua_State* tolua_S)
{
 TPen* self = (TPen*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TComboBox (lua_State* tolua_S)
{
 TComboBox* self = (TComboBox*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TMetaClass (lua_State* tolua_S)
{
 TMetaClass* self = (TMetaClass*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_SIZE (lua_State* tolua_S)
{
 SIZE* self = (SIZE*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TGraphicControl (lua_State* tolua_S)
{
 TGraphicControl* self = (TGraphicControl*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TCheckBox (lua_State* tolua_S)
{
 TCheckBox* self = (TCheckBox*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TMemo (lua_State* tolua_S)
{
 TMemo* self = (TMemo*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_Set_TBorderIcon_biSystemMenu_biHelp_ (lua_State* tolua_S)
{
 Set<TBorderIcon,biSystemMenu,biHelp>* self = (Set<TBorderIcon,biSystemMenu,biHelp>*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TButton (lua_State* tolua_S)
{
 TButton* self = (TButton*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TMenuItem (lua_State* tolua_S)
{
 TMenuItem* self = (TMenuItem*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TPicture (lua_State* tolua_S)
{
 TPicture* self = (TPicture*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TButtonControl (lua_State* tolua_S)
{
 TButtonControl* self = (TButtonControl*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TMetafile (lua_State* tolua_S)
{
 TMetafile* self = (TMetafile*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TObject (lua_State* tolua_S)
{
 TObject* self = (TObject*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TMyDialog (lua_State* tolua_S)
{
 TMyDialog* self = (TMyDialog*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TCustomTabControl (lua_State* tolua_S)
{
 TCustomTabControl* self = (TCustomTabControl*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TControlScrollBar (lua_State* tolua_S)
{
 TControlScrollBar* self = (TControlScrollBar*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TCanvas (lua_State* tolua_S)
{
 TCanvas* self = (TCanvas*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TPanel (lua_State* tolua_S)
{
 TPanel* self = (TPanel*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TBasicActionLink (lua_State* tolua_S)
{
 TBasicActionLink* self = (TBasicActionLink*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_Set__THitTest__htAbove__htToRight_ (lua_State* tolua_S)
{
 Set <THitTest, htAbove, htToRight>* self = (Set <THitTest, htAbove, htToRight>*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TForm (lua_State* tolua_S)
{
 TForm* self = (TForm*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TFont (lua_State* tolua_S)
{
 TFont* self = (TFont*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TGroupBox (lua_State* tolua_S)
{
 TGroupBox* self = (TGroupBox*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TScrollBar (lua_State* tolua_S)
{
 TScrollBar* self = (TScrollBar*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TListBox (lua_State* tolua_S)
{
 TListBox* self = (TListBox*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TRadioButton (lua_State* tolua_S)
{
 TRadioButton* self = (TRadioButton*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_Set_Classes__74_csLoading_csDesignInstance_ (lua_State* tolua_S)
{
 Set<Classes__74,csLoading,csDesignInstance>* self = (Set<Classes__74,csLoading,csDesignInstance>*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TPersistent (lua_State* tolua_S)
{
 TPersistent* self = (TPersistent*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TBaseDragControlObject (lua_State* tolua_S)
{
 TBaseDragControlObject* self = (TBaseDragControlObject*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TCustomControl (lua_State* tolua_S)
{
 TCustomControl* self = (TCustomControl*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_Set_Controls__11_csAcceptsControls_csMenuEvents_ (lua_State* tolua_S)
{
 Set<Controls__11,csAcceptsControls,csMenuEvents>* self = (Set<Controls__11,csAcceptsControls,csMenuEvents>*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_POINT (lua_State* tolua_S)
{
 POINT* self = (POINT*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TScrollingWinControl (lua_State* tolua_S)
{
 TScrollingWinControl* self = (TScrollingWinControl*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TEdit (lua_State* tolua_S)
{
 TEdit* self = (TEdit*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TMessage (lua_State* tolua_S)
{
 TMessage* self = (TMessage*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_Set_Classes__84_csInheritable_csTransient_ (lua_State* tolua_S)
{
 Set<Classes__84,csInheritable,csTransient>* self = (Set<Classes__84,csInheritable,csTransient>*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_Set_TBevelEdge_beLeft_beBottom_ (lua_State* tolua_S)
{
 Set<TBevelEdge,beLeft,beBottom>* self = (Set<TBevelEdge,beLeft,beBottom>*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TPoint (lua_State* tolua_S)
{
 TPoint* self = (TPoint*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TWinControl (lua_State* tolua_S)
{
 TWinControl* self = (TWinControl*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TControl (lua_State* tolua_S)
{
 TControl* self = (TControl*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_Set_TFontStyle_fsBold_fsStrikeOut_ (lua_State* tolua_S)
{
 Set<TFontStyle,fsBold,fsStrikeOut>* self = (Set<TFontStyle,fsBold,fsStrikeOut>*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TMainMenu (lua_State* tolua_S)
{
 TMainMenu* self = (TMainMenu*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TMenu (lua_State* tolua_S)
{
 TMenu* self = (TMenu*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TComponent (lua_State* tolua_S)
{
 TComponent* self = (TComponent*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TCustomCombo (lua_State* tolua_S)
{
 TCustomCombo* self = (TCustomCombo*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TStrings (lua_State* tolua_S)
{
 TStrings* self = (TStrings*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_tagSIZE (lua_State* tolua_S)
{
 tagSIZE* self = (tagSIZE*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_Graphics__TBitmap (lua_State* tolua_S)
{
 Graphics::TBitmap* self = (Graphics::TBitmap*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TIcon (lua_State* tolua_S)
{
 TIcon* self = (TIcon*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}

static int tolua_collect_TRect (lua_State* tolua_S)
{
 TRect* self = (TRect*) tolua_tousertype(tolua_S,1,0);
	delete self;
	return 0;
}
#endif


/* function to register type */
static void tolua_reg_types (lua_State* tolua_S)
{
 tolua_usertype(tolua_S,"TList");
 tolua_usertype(tolua_S,"TWMKey");
 tolua_usertype(tolua_S,"TRadioGroup");
 tolua_usertype(tolua_S,"TDragObject");
 tolua_usertype(tolua_S,"TInterfacedPersistent");
 tolua_usertype(tolua_S,"TPersistent");
 tolua_usertype(tolua_S,"TMonitor");
 tolua_usertype(tolua_S,"Set<TFontStyle, fsBold, fsStrikeOut>");
 tolua_usertype(tolua_S,"TBasicAction");
 tolua_usertype(tolua_S,"TWMMenuChar");
 tolua_usertype(tolua_S,"Set<Controls__11, csAcceptsControls, csMenuEvents>");
 tolua_usertype(tolua_S,"TCustomListControl");
 tolua_usertype(tolua_S,"TSizeConstraints");
 tolua_usertype(tolua_S,"TMainMenu");
 tolua_usertype(tolua_S,"RECT");
 tolua_usertype(tolua_S,"TChangeLink");
 tolua_usertype(tolua_S,"TListSortCompare");
 tolua_usertype(tolua_S,"TImage");
 tolua_usertype(tolua_S,"Set<TMenuAnimations, maLeftToRight, maNone>");
 tolua_usertype(tolua_S,"Set<Forms__6,fsCreating,fsActivated>");
 tolua_usertype(tolua_S,"Set<Controls__01,csLButtonDown,csDocking>");
 tolua_usertype(tolua_S,"Set<TAnchorKind,akLeft,akBottom>");
 tolua_usertype(tolua_S,"TTabSheet");
 tolua_usertype(tolua_S,"TGraphic");
 tolua_usertype(tolua_S,"TPopupMenu");
 tolua_usertype(tolua_S,"Set<TBevelEdge,beLeft,beBottom>");
 tolua_usertype(tolua_S,"TDragDockObject");
 tolua_usertype(tolua_S,"Shortint");
 tolua_usertype(tolua_S,"TCustomImageList");
 tolua_usertype(tolua_S,"Set<TMenuAnimations,maLeftToRight,maNone>");
 tolua_usertype(tolua_S,"TPen");
 tolua_usertype(tolua_S,"TMyObject");
 tolua_usertype(tolua_S,"Set<TBevelEdge, beLeft, beBottom>");
 tolua_usertype(tolua_S,"TMetaClass");
 tolua_usertype(tolua_S,"SIZE");
 tolua_usertype(tolua_S,"TGraphicControl");
 tolua_usertype(tolua_S,"TCheckBox");
 tolua_usertype(tolua_S,"TMemo");
 tolua_usertype(tolua_S,"Set<TBorderIcon,biSystemMenu,biHelp>");
 tolua_usertype(tolua_S,"Set<TBorderIcon, biSystemMenu, biHelp>");
 tolua_usertype(tolua_S,"TLoadResources");
 tolua_usertype(tolua_S,"TMenuItem");
 tolua_usertype(tolua_S,"TPicture");
 tolua_usertype(tolua_S,"Set<Controls__11,csAcceptsControls,csMenuEvents>");
 tolua_usertype(tolua_S,"TMetafile");
 tolua_usertype(tolua_S,"TPageControl");
 tolua_usertype(tolua_S,"TObject");
 tolua_usertype(tolua_S,"Set <THitTest, htAbove, htToRight>");
 tolua_usertype(tolua_S,"TGroupBox");
 tolua_usertype(tolua_S,"TButtonControl");
 tolua_usertype(tolua_S,"TForm");
 tolua_usertype(tolua_S,"TListBox");
 tolua_usertype(tolua_S,"Set<Classes__84,csInheritable,csTransient>");
 tolua_usertype(tolua_S,"TCustomTabControl");
 tolua_usertype(tolua_S,"TComboBox");
 tolua_usertype(tolua_S,"TControlScrollBar");
 tolua_usertype(tolua_S,"TCanvas");
 tolua_usertype(tolua_S,"TScrollBar");
 tolua_usertype(tolua_S,"TPanel");
 tolua_usertype(tolua_S,"TBasicActionLink");
 tolua_usertype(tolua_S,"TRadioButton");
 tolua_usertype(tolua_S,"TButton");
 tolua_usertype(tolua_S,"TEdit");
 tolua_usertype(tolua_S,"TCustomControl");
 tolua_usertype(tolua_S,"TFont");
 tolua_usertype(tolua_S,"Set<Forms__6, fsCreating, fsActivated>");
 tolua_usertype(tolua_S,"TScrollingWinControl");
 tolua_usertype(tolua_S,"TCustomMultiSelectListControl");
 tolua_usertype(tolua_S,"Set<Classes__84, csInheritable, csTransient>");
 tolua_usertype(tolua_S,"TCustomCombo");
 tolua_usertype(tolua_S,"TWinControl");
 tolua_usertype(tolua_S,"Set<Classes__74, csLoading, csDesignInstance>");
 tolua_usertype(tolua_S,"Set<Controls__01, csLButtonDown, csDocking>");
 tolua_usertype(tolua_S,"Set<Classes__74,csLoading,csDesignInstance>");
 tolua_usertype(tolua_S,"Set<TFontStyle,fsBold,fsStrikeOut>");
 tolua_usertype(tolua_S,"TStream");
 tolua_usertype(tolua_S,"PResStringRec");
 tolua_usertype(tolua_S,"TBaseDragControlObject");
 tolua_usertype(tolua_S,"TControl");
 tolua_usertype(tolua_S,"TMessage");
 tolua_usertype(tolua_S,"TMyDialog");
 tolua_usertype(tolua_S,"TPoint");
 tolua_usertype(tolua_S,"TGraphicsObject");
 tolua_usertype(tolua_S,"TMenu");
 tolua_usertype(tolua_S,"TComponent");
 tolua_usertype(tolua_S,"TBrush");
 tolua_usertype(tolua_S,"POINT");
 tolua_usertype(tolua_S,"Set<TAnchorKind, akLeft, akBottom>");
 tolua_usertype(tolua_S,"TStrings");
 tolua_usertype(tolua_S,"tagSIZE");
 tolua_usertype(tolua_S,"Graphics::TBitmap");
 tolua_usertype(tolua_S,"TIcon");
 tolua_usertype(tolua_S,"TRect");
 tolua_usertype(tolua_S,"TLabel");
}

/* method: new of class  TMyDialog */
static int tolua_z_VCL_TMyDialog_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TMyDialog",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TMyDialog* tolua_ret = (TMyDialog*)  new TMyDialog();

/* getting type */
  char* lua_type = "TMyDialog";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TMyDialog */
static int tolua_z_VCL_TMyDialog_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TMyDialog",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TMyDialog* tolua_ret = (TMyDialog*)  new TMyDialog();

/* getting type */
  char* lua_type = "TMyDialog";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TMyDialog */
static int tolua_z_VCL_TMyDialog_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMyDialog",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMyDialog* self = (TMyDialog*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: CreateForm of class  TMyDialog */
static int tolua_z_VCL_TMyDialog_CreateForm00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMyDialog",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMyDialog* self = (TMyDialog*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'CreateForm'",NULL);
#endif
  {
   TForm* tolua_ret = (TForm*)  self->CreateForm();

/* getting type */
  char* lua_type = "TForm";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CreateForm'.",&tolua_err);
 return 0;
#endif
}

/* get function: CurDialog */
static int tolua_get_VCLConst_CurDialog_ptr(lua_State* tolua_S)
{

/* getting type */
  char* lua_type = "TMyDialog";
   tolua_pushusertype(tolua_S,(void*)(CurDialog),lua_type);
 return 1;
}

/* set function: CurDialog */
static int tolua_set_VCLConst_CurDialog_ptr(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!tolua_isusertype(tolua_S,2,"TMyDialog",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  CurDialog = ((TMyDialog*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* method: new of class  Set<TMenuAnimations,maLeftToRight,maNone> */
static int tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone__new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<TMenuAnimations,maLeftToRight,maNone>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   Set<TMenuAnimations,maLeftToRight,maNone>* tolua_ret = (Set<TMenuAnimations,maLeftToRight,maNone>*)  new Set<TMenuAnimations,maLeftToRight,maNone>();

/* getting type */
  char* lua_type = "Set<TMenuAnimations,maLeftToRight,maNone>";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  Set<TMenuAnimations,maLeftToRight,maNone> */
static int tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone__new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<TMenuAnimations,maLeftToRight,maNone>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   Set<TMenuAnimations,maLeftToRight,maNone>* tolua_ret = (Set<TMenuAnimations,maLeftToRight,maNone>*)  new Set<TMenuAnimations,maLeftToRight,maNone>();

/* getting type */
  char* lua_type = "Set<TMenuAnimations,maLeftToRight,maNone>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  Set<TMenuAnimations,maLeftToRight,maNone> */
static int tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone__new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<TMenuAnimations,maLeftToRight,maNone>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TMenuAnimations,maLeftToRight,maNone>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  const Set<TMenuAnimations,maLeftToRight,maNone>* src = ((const Set<TMenuAnimations,maLeftToRight,maNone>*)  tolua_tousertype(tolua_S,2,0));
  {
   Set<TMenuAnimations,maLeftToRight,maNone>* tolua_ret = (Set<TMenuAnimations,maLeftToRight,maNone>*)  new Set<TMenuAnimations,maLeftToRight,maNone>(*src);

/* getting type */
  char* lua_type = "Set<TMenuAnimations,maLeftToRight,maNone>";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone__new00(tolua_S);
}

/* method: new_local of class  Set<TMenuAnimations,maLeftToRight,maNone> */
static int tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone__new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<TMenuAnimations,maLeftToRight,maNone>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TMenuAnimations,maLeftToRight,maNone>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  const Set<TMenuAnimations,maLeftToRight,maNone>* src = ((const Set<TMenuAnimations,maLeftToRight,maNone>*)  tolua_tousertype(tolua_S,2,0));
  {
   Set<TMenuAnimations,maLeftToRight,maNone>* tolua_ret = (Set<TMenuAnimations,maLeftToRight,maNone>*)  new Set<TMenuAnimations,maLeftToRight,maNone>(*src);

/* getting type */
  char* lua_type = "Set<TMenuAnimations,maLeftToRight,maNone>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone__new00_local(tolua_S);
}

/* method: delete of class  Set<TMenuAnimations,maLeftToRight,maNone> */
static int tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone__delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Set<TMenuAnimations,maLeftToRight,maNone>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Set<TMenuAnimations,maLeftToRight,maNone>* self = (Set<TMenuAnimations,maLeftToRight,maNone>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: operator+ of class  Set<TMenuAnimations,maLeftToRight,maNone> */
static int tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone___add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TMenuAnimations,maLeftToRight,maNone>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TMenuAnimations,maLeftToRight,maNone>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TMenuAnimations,maLeftToRight,maNone>* self = (const Set<TMenuAnimations,maLeftToRight,maNone>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<TMenuAnimations,maLeftToRight,maNone>* rhs = ((const Set<TMenuAnimations,maLeftToRight,maNone>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'",NULL);
#endif
  {
   Set<TMenuAnimations,maLeftToRight,maNone> tolua_ret = (Set<TMenuAnimations,maLeftToRight,maNone>)  self->operator+(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<TMenuAnimations,maLeftToRight,maNone>(tolua_ret);

/* getting type */
  char* lua_type = "Set<TMenuAnimations,maLeftToRight,maNone>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<TMenuAnimations,maLeftToRight,maNone>));

/* getting type */
  char* lua_type = "Set<TMenuAnimations,maLeftToRight,maNone>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}

/* method: operator- of class  Set<TMenuAnimations,maLeftToRight,maNone> */
static int tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone___sub00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TMenuAnimations,maLeftToRight,maNone>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TMenuAnimations,maLeftToRight,maNone>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TMenuAnimations,maLeftToRight,maNone>* self = (const Set<TMenuAnimations,maLeftToRight,maNone>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<TMenuAnimations,maLeftToRight,maNone>* rhs = ((const Set<TMenuAnimations,maLeftToRight,maNone>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'",NULL);
#endif
  {
   Set<TMenuAnimations,maLeftToRight,maNone> tolua_ret = (Set<TMenuAnimations,maLeftToRight,maNone>)  self->operator-(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<TMenuAnimations,maLeftToRight,maNone>(tolua_ret);

/* getting type */
  char* lua_type = "Set<TMenuAnimations,maLeftToRight,maNone>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<TMenuAnimations,maLeftToRight,maNone>));

/* getting type */
  char* lua_type = "Set<TMenuAnimations,maLeftToRight,maNone>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.sub'.",&tolua_err);
 return 0;
#endif
}

/* method: operator* of class  Set<TMenuAnimations,maLeftToRight,maNone> */
static int tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone___mul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TMenuAnimations,maLeftToRight,maNone>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TMenuAnimations,maLeftToRight,maNone>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TMenuAnimations,maLeftToRight,maNone>* self = (const Set<TMenuAnimations,maLeftToRight,maNone>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<TMenuAnimations,maLeftToRight,maNone>* rhs = ((const Set<TMenuAnimations,maLeftToRight,maNone>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'",NULL);
#endif
  {
   Set<TMenuAnimations,maLeftToRight,maNone> tolua_ret = (Set<TMenuAnimations,maLeftToRight,maNone>)  self->operator*(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<TMenuAnimations,maLeftToRight,maNone>(tolua_ret);

/* getting type */
  char* lua_type = "Set<TMenuAnimations,maLeftToRight,maNone>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<TMenuAnimations,maLeftToRight,maNone>));

/* getting type */
  char* lua_type = "Set<TMenuAnimations,maLeftToRight,maNone>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.mul'.",&tolua_err);
 return 0;
#endif
}

/* method: Contains of class  Set<TMenuAnimations,maLeftToRight,maNone> */
static int tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone__Contains00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TMenuAnimations,maLeftToRight,maNone>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TMenuAnimations,maLeftToRight,maNone>* self = (const Set<TMenuAnimations,maLeftToRight,maNone>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TMenuAnimations el = ((const TMenuAnimations)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Contains'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Contains(el);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Contains'.",&tolua_err);
 return 0;
#endif
}

/* method: Clear of class  Set<TMenuAnimations,maLeftToRight,maNone> */
static int tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone__Clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Set<TMenuAnimations,maLeftToRight,maNone>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Set<TMenuAnimations,maLeftToRight,maNone>* self = (Set<TMenuAnimations,maLeftToRight,maNone>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Clear'",NULL);
#endif
  {
   Set<TMenuAnimations,maLeftToRight,maNone>& tolua_ret = (Set<TMenuAnimations,maLeftToRight,maNone>&)  self->Clear();

/* getting type */
  char* lua_type = "Set<TMenuAnimations,maLeftToRight,maNone>";
   tolua_pushusertype(tolua_S,(void*)(&tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clear'.",&tolua_err);
 return 0;
#endif
}

/* method: Empty of class  Set<TMenuAnimations,maLeftToRight,maNone> */
static int tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone__Empty00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TMenuAnimations,maLeftToRight,maNone>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TMenuAnimations,maLeftToRight,maNone>* self = (const Set<TMenuAnimations,maLeftToRight,maNone>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Empty'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Empty();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Empty'.",&tolua_err);
 return 0;
#endif
}

/* method: operator== of class  Set<TMenuAnimations,maLeftToRight,maNone> */
static int tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone___eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TMenuAnimations,maLeftToRight,maNone>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TMenuAnimations,maLeftToRight,maNone>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TMenuAnimations,maLeftToRight,maNone>* self = (const Set<TMenuAnimations,maLeftToRight,maNone>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<TMenuAnimations,maLeftToRight,maNone>* rhs = ((const Set<TMenuAnimations,maLeftToRight,maNone>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*rhs);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  Set<TBorderIcon,biSystemMenu,biHelp> */
static int tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp__new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<TBorderIcon,biSystemMenu,biHelp>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   Set<TBorderIcon,biSystemMenu,biHelp>* tolua_ret = (Set<TBorderIcon,biSystemMenu,biHelp>*)  new Set<TBorderIcon,biSystemMenu,biHelp>();

/* getting type */
  char* lua_type = "Set<TBorderIcon,biSystemMenu,biHelp>";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  Set<TBorderIcon,biSystemMenu,biHelp> */
static int tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp__new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<TBorderIcon,biSystemMenu,biHelp>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   Set<TBorderIcon,biSystemMenu,biHelp>* tolua_ret = (Set<TBorderIcon,biSystemMenu,biHelp>*)  new Set<TBorderIcon,biSystemMenu,biHelp>();

/* getting type */
  char* lua_type = "Set<TBorderIcon,biSystemMenu,biHelp>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  Set<TBorderIcon,biSystemMenu,biHelp> */
static int tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp__new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<TBorderIcon,biSystemMenu,biHelp>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TBorderIcon,biSystemMenu,biHelp>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  const Set<TBorderIcon,biSystemMenu,biHelp>* src = ((const Set<TBorderIcon,biSystemMenu,biHelp>*)  tolua_tousertype(tolua_S,2,0));
  {
   Set<TBorderIcon,biSystemMenu,biHelp>* tolua_ret = (Set<TBorderIcon,biSystemMenu,biHelp>*)  new Set<TBorderIcon,biSystemMenu,biHelp>(*src);

/* getting type */
  char* lua_type = "Set<TBorderIcon,biSystemMenu,biHelp>";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp__new00(tolua_S);
}

/* method: new_local of class  Set<TBorderIcon,biSystemMenu,biHelp> */
static int tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp__new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<TBorderIcon,biSystemMenu,biHelp>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TBorderIcon,biSystemMenu,biHelp>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  const Set<TBorderIcon,biSystemMenu,biHelp>* src = ((const Set<TBorderIcon,biSystemMenu,biHelp>*)  tolua_tousertype(tolua_S,2,0));
  {
   Set<TBorderIcon,biSystemMenu,biHelp>* tolua_ret = (Set<TBorderIcon,biSystemMenu,biHelp>*)  new Set<TBorderIcon,biSystemMenu,biHelp>(*src);

/* getting type */
  char* lua_type = "Set<TBorderIcon,biSystemMenu,biHelp>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp__new00_local(tolua_S);
}

/* method: delete of class  Set<TBorderIcon,biSystemMenu,biHelp> */
static int tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp__delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Set<TBorderIcon,biSystemMenu,biHelp>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Set<TBorderIcon,biSystemMenu,biHelp>* self = (Set<TBorderIcon,biSystemMenu,biHelp>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: operator+ of class  Set<TBorderIcon,biSystemMenu,biHelp> */
static int tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp___add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TBorderIcon,biSystemMenu,biHelp>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TBorderIcon,biSystemMenu,biHelp>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TBorderIcon,biSystemMenu,biHelp>* self = (const Set<TBorderIcon,biSystemMenu,biHelp>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<TBorderIcon,biSystemMenu,biHelp>* rhs = ((const Set<TBorderIcon,biSystemMenu,biHelp>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'",NULL);
#endif
  {
   Set<TBorderIcon,biSystemMenu,biHelp> tolua_ret = (Set<TBorderIcon,biSystemMenu,biHelp>)  self->operator+(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<TBorderIcon,biSystemMenu,biHelp>(tolua_ret);

/* getting type */
  char* lua_type = "Set<TBorderIcon,biSystemMenu,biHelp>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<TBorderIcon,biSystemMenu,biHelp>));

/* getting type */
  char* lua_type = "Set<TBorderIcon,biSystemMenu,biHelp>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}

/* method: operator- of class  Set<TBorderIcon,biSystemMenu,biHelp> */
static int tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp___sub00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TBorderIcon,biSystemMenu,biHelp>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TBorderIcon,biSystemMenu,biHelp>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TBorderIcon,biSystemMenu,biHelp>* self = (const Set<TBorderIcon,biSystemMenu,biHelp>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<TBorderIcon,biSystemMenu,biHelp>* rhs = ((const Set<TBorderIcon,biSystemMenu,biHelp>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'",NULL);
#endif
  {
   Set<TBorderIcon,biSystemMenu,biHelp> tolua_ret = (Set<TBorderIcon,biSystemMenu,biHelp>)  self->operator-(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<TBorderIcon,biSystemMenu,biHelp>(tolua_ret);

/* getting type */
  char* lua_type = "Set<TBorderIcon,biSystemMenu,biHelp>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<TBorderIcon,biSystemMenu,biHelp>));

/* getting type */
  char* lua_type = "Set<TBorderIcon,biSystemMenu,biHelp>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.sub'.",&tolua_err);
 return 0;
#endif
}

/* method: operator* of class  Set<TBorderIcon,biSystemMenu,biHelp> */
static int tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp___mul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TBorderIcon,biSystemMenu,biHelp>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TBorderIcon,biSystemMenu,biHelp>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TBorderIcon,biSystemMenu,biHelp>* self = (const Set<TBorderIcon,biSystemMenu,biHelp>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<TBorderIcon,biSystemMenu,biHelp>* rhs = ((const Set<TBorderIcon,biSystemMenu,biHelp>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'",NULL);
#endif
  {
   Set<TBorderIcon,biSystemMenu,biHelp> tolua_ret = (Set<TBorderIcon,biSystemMenu,biHelp>)  self->operator*(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<TBorderIcon,biSystemMenu,biHelp>(tolua_ret);

/* getting type */
  char* lua_type = "Set<TBorderIcon,biSystemMenu,biHelp>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<TBorderIcon,biSystemMenu,biHelp>));

/* getting type */
  char* lua_type = "Set<TBorderIcon,biSystemMenu,biHelp>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.mul'.",&tolua_err);
 return 0;
#endif
}

/* method: Contains of class  Set<TBorderIcon,biSystemMenu,biHelp> */
static int tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp__Contains00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TBorderIcon,biSystemMenu,biHelp>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TBorderIcon,biSystemMenu,biHelp>* self = (const Set<TBorderIcon,biSystemMenu,biHelp>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TBorderIcon el = ((const TBorderIcon)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Contains'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Contains(el);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Contains'.",&tolua_err);
 return 0;
#endif
}

/* method: Clear of class  Set<TBorderIcon,biSystemMenu,biHelp> */
static int tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp__Clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Set<TBorderIcon,biSystemMenu,biHelp>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Set<TBorderIcon,biSystemMenu,biHelp>* self = (Set<TBorderIcon,biSystemMenu,biHelp>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Clear'",NULL);
#endif
  {
   Set<TBorderIcon,biSystemMenu,biHelp>& tolua_ret = (Set<TBorderIcon,biSystemMenu,biHelp>&)  self->Clear();

/* getting type */
  char* lua_type = "Set<TBorderIcon,biSystemMenu,biHelp>";
   tolua_pushusertype(tolua_S,(void*)(&tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clear'.",&tolua_err);
 return 0;
#endif
}

/* method: Empty of class  Set<TBorderIcon,biSystemMenu,biHelp> */
static int tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp__Empty00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TBorderIcon,biSystemMenu,biHelp>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TBorderIcon,biSystemMenu,biHelp>* self = (const Set<TBorderIcon,biSystemMenu,biHelp>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Empty'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Empty();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Empty'.",&tolua_err);
 return 0;
#endif
}

/* method: operator== of class  Set<TBorderIcon,biSystemMenu,biHelp> */
static int tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp___eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TBorderIcon,biSystemMenu,biHelp>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TBorderIcon,biSystemMenu,biHelp>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TBorderIcon,biSystemMenu,biHelp>* self = (const Set<TBorderIcon,biSystemMenu,biHelp>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<TBorderIcon,biSystemMenu,biHelp>* rhs = ((const Set<TBorderIcon,biSystemMenu,biHelp>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*rhs);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  Set<Classes__74,csLoading,csDesignInstance> */
static int tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance__new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<Classes__74,csLoading,csDesignInstance>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   Set<Classes__74,csLoading,csDesignInstance>* tolua_ret = (Set<Classes__74,csLoading,csDesignInstance>*)  new Set<Classes__74,csLoading,csDesignInstance>();

/* getting type */
  char* lua_type = "Set<Classes__74,csLoading,csDesignInstance>";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  Set<Classes__74,csLoading,csDesignInstance> */
static int tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance__new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<Classes__74,csLoading,csDesignInstance>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   Set<Classes__74,csLoading,csDesignInstance>* tolua_ret = (Set<Classes__74,csLoading,csDesignInstance>*)  new Set<Classes__74,csLoading,csDesignInstance>();

/* getting type */
  char* lua_type = "Set<Classes__74,csLoading,csDesignInstance>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  Set<Classes__74,csLoading,csDesignInstance> */
static int tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance__new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<Classes__74,csLoading,csDesignInstance>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Classes__74,csLoading,csDesignInstance>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  const Set<Classes__74,csLoading,csDesignInstance>* src = ((const Set<Classes__74,csLoading,csDesignInstance>*)  tolua_tousertype(tolua_S,2,0));
  {
   Set<Classes__74,csLoading,csDesignInstance>* tolua_ret = (Set<Classes__74,csLoading,csDesignInstance>*)  new Set<Classes__74,csLoading,csDesignInstance>(*src);

/* getting type */
  char* lua_type = "Set<Classes__74,csLoading,csDesignInstance>";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance__new00(tolua_S);
}

/* method: new_local of class  Set<Classes__74,csLoading,csDesignInstance> */
static int tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance__new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<Classes__74,csLoading,csDesignInstance>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Classes__74,csLoading,csDesignInstance>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  const Set<Classes__74,csLoading,csDesignInstance>* src = ((const Set<Classes__74,csLoading,csDesignInstance>*)  tolua_tousertype(tolua_S,2,0));
  {
   Set<Classes__74,csLoading,csDesignInstance>* tolua_ret = (Set<Classes__74,csLoading,csDesignInstance>*)  new Set<Classes__74,csLoading,csDesignInstance>(*src);

/* getting type */
  char* lua_type = "Set<Classes__74,csLoading,csDesignInstance>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance__new00_local(tolua_S);
}

/* method: delete of class  Set<Classes__74,csLoading,csDesignInstance> */
static int tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance__delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Set<Classes__74,csLoading,csDesignInstance>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Set<Classes__74,csLoading,csDesignInstance>* self = (Set<Classes__74,csLoading,csDesignInstance>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: operator+ of class  Set<Classes__74,csLoading,csDesignInstance> */
static int tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance___add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Classes__74,csLoading,csDesignInstance>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Classes__74,csLoading,csDesignInstance>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Classes__74,csLoading,csDesignInstance>* self = (const Set<Classes__74,csLoading,csDesignInstance>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<Classes__74,csLoading,csDesignInstance>* rhs = ((const Set<Classes__74,csLoading,csDesignInstance>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'",NULL);
#endif
  {
   Set<Classes__74,csLoading,csDesignInstance> tolua_ret = (Set<Classes__74,csLoading,csDesignInstance>)  self->operator+(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<Classes__74,csLoading,csDesignInstance>(tolua_ret);

/* getting type */
  char* lua_type = "Set<Classes__74,csLoading,csDesignInstance>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<Classes__74,csLoading,csDesignInstance>));

/* getting type */
  char* lua_type = "Set<Classes__74,csLoading,csDesignInstance>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}

/* method: operator- of class  Set<Classes__74,csLoading,csDesignInstance> */
static int tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance___sub00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Classes__74,csLoading,csDesignInstance>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Classes__74,csLoading,csDesignInstance>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Classes__74,csLoading,csDesignInstance>* self = (const Set<Classes__74,csLoading,csDesignInstance>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<Classes__74,csLoading,csDesignInstance>* rhs = ((const Set<Classes__74,csLoading,csDesignInstance>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'",NULL);
#endif
  {
   Set<Classes__74,csLoading,csDesignInstance> tolua_ret = (Set<Classes__74,csLoading,csDesignInstance>)  self->operator-(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<Classes__74,csLoading,csDesignInstance>(tolua_ret);

/* getting type */
  char* lua_type = "Set<Classes__74,csLoading,csDesignInstance>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<Classes__74,csLoading,csDesignInstance>));

/* getting type */
  char* lua_type = "Set<Classes__74,csLoading,csDesignInstance>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.sub'.",&tolua_err);
 return 0;
#endif
}

/* method: operator* of class  Set<Classes__74,csLoading,csDesignInstance> */
static int tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance___mul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Classes__74,csLoading,csDesignInstance>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Classes__74,csLoading,csDesignInstance>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Classes__74,csLoading,csDesignInstance>* self = (const Set<Classes__74,csLoading,csDesignInstance>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<Classes__74,csLoading,csDesignInstance>* rhs = ((const Set<Classes__74,csLoading,csDesignInstance>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'",NULL);
#endif
  {
   Set<Classes__74,csLoading,csDesignInstance> tolua_ret = (Set<Classes__74,csLoading,csDesignInstance>)  self->operator*(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<Classes__74,csLoading,csDesignInstance>(tolua_ret);

/* getting type */
  char* lua_type = "Set<Classes__74,csLoading,csDesignInstance>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<Classes__74,csLoading,csDesignInstance>));

/* getting type */
  char* lua_type = "Set<Classes__74,csLoading,csDesignInstance>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.mul'.",&tolua_err);
 return 0;
#endif
}

/* method: Contains of class  Set<Classes__74,csLoading,csDesignInstance> */
static int tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance__Contains00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Classes__74,csLoading,csDesignInstance>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Classes__74,csLoading,csDesignInstance>* self = (const Set<Classes__74,csLoading,csDesignInstance>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Classes__74 el = ((const Classes__74)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Contains'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Contains(el);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Contains'.",&tolua_err);
 return 0;
#endif
}

/* method: Clear of class  Set<Classes__74,csLoading,csDesignInstance> */
static int tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance__Clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Set<Classes__74,csLoading,csDesignInstance>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Set<Classes__74,csLoading,csDesignInstance>* self = (Set<Classes__74,csLoading,csDesignInstance>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Clear'",NULL);
#endif
  {
   Set<Classes__74,csLoading,csDesignInstance>& tolua_ret = (Set<Classes__74,csLoading,csDesignInstance>&)  self->Clear();

/* getting type */
  char* lua_type = "Set<Classes__74,csLoading,csDesignInstance>";
   tolua_pushusertype(tolua_S,(void*)(&tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clear'.",&tolua_err);
 return 0;
#endif
}

/* method: Empty of class  Set<Classes__74,csLoading,csDesignInstance> */
static int tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance__Empty00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Classes__74,csLoading,csDesignInstance>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Classes__74,csLoading,csDesignInstance>* self = (const Set<Classes__74,csLoading,csDesignInstance>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Empty'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Empty();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Empty'.",&tolua_err);
 return 0;
#endif
}

/* method: operator== of class  Set<Classes__74,csLoading,csDesignInstance> */
static int tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance___eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Classes__74,csLoading,csDesignInstance>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Classes__74,csLoading,csDesignInstance>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Classes__74,csLoading,csDesignInstance>* self = (const Set<Classes__74,csLoading,csDesignInstance>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<Classes__74,csLoading,csDesignInstance>* rhs = ((const Set<Classes__74,csLoading,csDesignInstance>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*rhs);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  Set<Classes__84,csInheritable,csTransient> */
static int tolua_z_VCL_Set_Classes__84_csInheritable_csTransient__new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<Classes__84,csInheritable,csTransient>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   Set<Classes__84,csInheritable,csTransient>* tolua_ret = (Set<Classes__84,csInheritable,csTransient>*)  new Set<Classes__84,csInheritable,csTransient>();

/* getting type */
  char* lua_type = "Set<Classes__84,csInheritable,csTransient>";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  Set<Classes__84,csInheritable,csTransient> */
static int tolua_z_VCL_Set_Classes__84_csInheritable_csTransient__new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<Classes__84,csInheritable,csTransient>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   Set<Classes__84,csInheritable,csTransient>* tolua_ret = (Set<Classes__84,csInheritable,csTransient>*)  new Set<Classes__84,csInheritable,csTransient>();

/* getting type */
  char* lua_type = "Set<Classes__84,csInheritable,csTransient>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  Set<Classes__84,csInheritable,csTransient> */
static int tolua_z_VCL_Set_Classes__84_csInheritable_csTransient__new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<Classes__84,csInheritable,csTransient>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Classes__84,csInheritable,csTransient>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  const Set<Classes__84,csInheritable,csTransient>* src = ((const Set<Classes__84,csInheritable,csTransient>*)  tolua_tousertype(tolua_S,2,0));
  {
   Set<Classes__84,csInheritable,csTransient>* tolua_ret = (Set<Classes__84,csInheritable,csTransient>*)  new Set<Classes__84,csInheritable,csTransient>(*src);

/* getting type */
  char* lua_type = "Set<Classes__84,csInheritable,csTransient>";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_Set_Classes__84_csInheritable_csTransient__new00(tolua_S);
}

/* method: new_local of class  Set<Classes__84,csInheritable,csTransient> */
static int tolua_z_VCL_Set_Classes__84_csInheritable_csTransient__new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<Classes__84,csInheritable,csTransient>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Classes__84,csInheritable,csTransient>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  const Set<Classes__84,csInheritable,csTransient>* src = ((const Set<Classes__84,csInheritable,csTransient>*)  tolua_tousertype(tolua_S,2,0));
  {
   Set<Classes__84,csInheritable,csTransient>* tolua_ret = (Set<Classes__84,csInheritable,csTransient>*)  new Set<Classes__84,csInheritable,csTransient>(*src);

/* getting type */
  char* lua_type = "Set<Classes__84,csInheritable,csTransient>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_Set_Classes__84_csInheritable_csTransient__new00_local(tolua_S);
}

/* method: delete of class  Set<Classes__84,csInheritable,csTransient> */
static int tolua_z_VCL_Set_Classes__84_csInheritable_csTransient__delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Set<Classes__84,csInheritable,csTransient>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Set<Classes__84,csInheritable,csTransient>* self = (Set<Classes__84,csInheritable,csTransient>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: operator+ of class  Set<Classes__84,csInheritable,csTransient> */
static int tolua_z_VCL_Set_Classes__84_csInheritable_csTransient___add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Classes__84,csInheritable,csTransient>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Classes__84,csInheritable,csTransient>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Classes__84,csInheritable,csTransient>* self = (const Set<Classes__84,csInheritable,csTransient>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<Classes__84,csInheritable,csTransient>* rhs = ((const Set<Classes__84,csInheritable,csTransient>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'",NULL);
#endif
  {
   Set<Classes__84,csInheritable,csTransient> tolua_ret = (Set<Classes__84,csInheritable,csTransient>)  self->operator+(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<Classes__84,csInheritable,csTransient>(tolua_ret);

/* getting type */
  char* lua_type = "Set<Classes__84,csInheritable,csTransient>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<Classes__84,csInheritable,csTransient>));

/* getting type */
  char* lua_type = "Set<Classes__84,csInheritable,csTransient>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}

/* method: operator- of class  Set<Classes__84,csInheritable,csTransient> */
static int tolua_z_VCL_Set_Classes__84_csInheritable_csTransient___sub00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Classes__84,csInheritable,csTransient>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Classes__84,csInheritable,csTransient>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Classes__84,csInheritable,csTransient>* self = (const Set<Classes__84,csInheritable,csTransient>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<Classes__84,csInheritable,csTransient>* rhs = ((const Set<Classes__84,csInheritable,csTransient>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'",NULL);
#endif
  {
   Set<Classes__84,csInheritable,csTransient> tolua_ret = (Set<Classes__84,csInheritable,csTransient>)  self->operator-(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<Classes__84,csInheritable,csTransient>(tolua_ret);

/* getting type */
  char* lua_type = "Set<Classes__84,csInheritable,csTransient>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<Classes__84,csInheritable,csTransient>));

/* getting type */
  char* lua_type = "Set<Classes__84,csInheritable,csTransient>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.sub'.",&tolua_err);
 return 0;
#endif
}

/* method: operator* of class  Set<Classes__84,csInheritable,csTransient> */
static int tolua_z_VCL_Set_Classes__84_csInheritable_csTransient___mul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Classes__84,csInheritable,csTransient>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Classes__84,csInheritable,csTransient>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Classes__84,csInheritable,csTransient>* self = (const Set<Classes__84,csInheritable,csTransient>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<Classes__84,csInheritable,csTransient>* rhs = ((const Set<Classes__84,csInheritable,csTransient>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'",NULL);
#endif
  {
   Set<Classes__84,csInheritable,csTransient> tolua_ret = (Set<Classes__84,csInheritable,csTransient>)  self->operator*(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<Classes__84,csInheritable,csTransient>(tolua_ret);

/* getting type */
  char* lua_type = "Set<Classes__84,csInheritable,csTransient>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<Classes__84,csInheritable,csTransient>));

/* getting type */
  char* lua_type = "Set<Classes__84,csInheritable,csTransient>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.mul'.",&tolua_err);
 return 0;
#endif
}

/* method: Contains of class  Set<Classes__84,csInheritable,csTransient> */
static int tolua_z_VCL_Set_Classes__84_csInheritable_csTransient__Contains00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Classes__84,csInheritable,csTransient>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Classes__84,csInheritable,csTransient>* self = (const Set<Classes__84,csInheritable,csTransient>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Classes__84 el = ((const Classes__84)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Contains'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Contains(el);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Contains'.",&tolua_err);
 return 0;
#endif
}

/* method: Clear of class  Set<Classes__84,csInheritable,csTransient> */
static int tolua_z_VCL_Set_Classes__84_csInheritable_csTransient__Clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Set<Classes__84,csInheritable,csTransient>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Set<Classes__84,csInheritable,csTransient>* self = (Set<Classes__84,csInheritable,csTransient>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Clear'",NULL);
#endif
  {
   Set<Classes__84,csInheritable,csTransient>& tolua_ret = (Set<Classes__84,csInheritable,csTransient>&)  self->Clear();

/* getting type */
  char* lua_type = "Set<Classes__84,csInheritable,csTransient>";
   tolua_pushusertype(tolua_S,(void*)(&tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clear'.",&tolua_err);
 return 0;
#endif
}

/* method: Empty of class  Set<Classes__84,csInheritable,csTransient> */
static int tolua_z_VCL_Set_Classes__84_csInheritable_csTransient__Empty00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Classes__84,csInheritable,csTransient>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Classes__84,csInheritable,csTransient>* self = (const Set<Classes__84,csInheritable,csTransient>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Empty'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Empty();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Empty'.",&tolua_err);
 return 0;
#endif
}

/* method: operator== of class  Set<Classes__84,csInheritable,csTransient> */
static int tolua_z_VCL_Set_Classes__84_csInheritable_csTransient___eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Classes__84,csInheritable,csTransient>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Classes__84,csInheritable,csTransient>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Classes__84,csInheritable,csTransient>* self = (const Set<Classes__84,csInheritable,csTransient>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<Classes__84,csInheritable,csTransient>* rhs = ((const Set<Classes__84,csInheritable,csTransient>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*rhs);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  Set<Forms__6,fsCreating,fsActivated> */
static int tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated__new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<Forms__6,fsCreating,fsActivated>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   Set<Forms__6,fsCreating,fsActivated>* tolua_ret = (Set<Forms__6,fsCreating,fsActivated>*)  new Set<Forms__6,fsCreating,fsActivated>();

/* getting type */
  char* lua_type = "Set<Forms__6,fsCreating,fsActivated>";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  Set<Forms__6,fsCreating,fsActivated> */
static int tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated__new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<Forms__6,fsCreating,fsActivated>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   Set<Forms__6,fsCreating,fsActivated>* tolua_ret = (Set<Forms__6,fsCreating,fsActivated>*)  new Set<Forms__6,fsCreating,fsActivated>();

/* getting type */
  char* lua_type = "Set<Forms__6,fsCreating,fsActivated>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  Set<Forms__6,fsCreating,fsActivated> */
static int tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated__new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<Forms__6,fsCreating,fsActivated>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Forms__6,fsCreating,fsActivated>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  const Set<Forms__6,fsCreating,fsActivated>* src = ((const Set<Forms__6,fsCreating,fsActivated>*)  tolua_tousertype(tolua_S,2,0));
  {
   Set<Forms__6,fsCreating,fsActivated>* tolua_ret = (Set<Forms__6,fsCreating,fsActivated>*)  new Set<Forms__6,fsCreating,fsActivated>(*src);

/* getting type */
  char* lua_type = "Set<Forms__6,fsCreating,fsActivated>";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated__new00(tolua_S);
}

/* method: new_local of class  Set<Forms__6,fsCreating,fsActivated> */
static int tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated__new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<Forms__6,fsCreating,fsActivated>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Forms__6,fsCreating,fsActivated>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  const Set<Forms__6,fsCreating,fsActivated>* src = ((const Set<Forms__6,fsCreating,fsActivated>*)  tolua_tousertype(tolua_S,2,0));
  {
   Set<Forms__6,fsCreating,fsActivated>* tolua_ret = (Set<Forms__6,fsCreating,fsActivated>*)  new Set<Forms__6,fsCreating,fsActivated>(*src);

/* getting type */
  char* lua_type = "Set<Forms__6,fsCreating,fsActivated>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated__new00_local(tolua_S);
}

/* method: delete of class  Set<Forms__6,fsCreating,fsActivated> */
static int tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated__delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Set<Forms__6,fsCreating,fsActivated>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Set<Forms__6,fsCreating,fsActivated>* self = (Set<Forms__6,fsCreating,fsActivated>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: operator+ of class  Set<Forms__6,fsCreating,fsActivated> */
static int tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated___add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Forms__6,fsCreating,fsActivated>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Forms__6,fsCreating,fsActivated>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Forms__6,fsCreating,fsActivated>* self = (const Set<Forms__6,fsCreating,fsActivated>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<Forms__6,fsCreating,fsActivated>* rhs = ((const Set<Forms__6,fsCreating,fsActivated>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'",NULL);
#endif
  {
   Set<Forms__6,fsCreating,fsActivated> tolua_ret = (Set<Forms__6,fsCreating,fsActivated>)  self->operator+(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<Forms__6,fsCreating,fsActivated>(tolua_ret);

/* getting type */
  char* lua_type = "Set<Forms__6,fsCreating,fsActivated>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<Forms__6,fsCreating,fsActivated>));

/* getting type */
  char* lua_type = "Set<Forms__6,fsCreating,fsActivated>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}

/* method: operator- of class  Set<Forms__6,fsCreating,fsActivated> */
static int tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated___sub00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Forms__6,fsCreating,fsActivated>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Forms__6,fsCreating,fsActivated>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Forms__6,fsCreating,fsActivated>* self = (const Set<Forms__6,fsCreating,fsActivated>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<Forms__6,fsCreating,fsActivated>* rhs = ((const Set<Forms__6,fsCreating,fsActivated>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'",NULL);
#endif
  {
   Set<Forms__6,fsCreating,fsActivated> tolua_ret = (Set<Forms__6,fsCreating,fsActivated>)  self->operator-(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<Forms__6,fsCreating,fsActivated>(tolua_ret);

/* getting type */
  char* lua_type = "Set<Forms__6,fsCreating,fsActivated>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<Forms__6,fsCreating,fsActivated>));

/* getting type */
  char* lua_type = "Set<Forms__6,fsCreating,fsActivated>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.sub'.",&tolua_err);
 return 0;
#endif
}

/* method: operator* of class  Set<Forms__6,fsCreating,fsActivated> */
static int tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated___mul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Forms__6,fsCreating,fsActivated>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Forms__6,fsCreating,fsActivated>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Forms__6,fsCreating,fsActivated>* self = (const Set<Forms__6,fsCreating,fsActivated>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<Forms__6,fsCreating,fsActivated>* rhs = ((const Set<Forms__6,fsCreating,fsActivated>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'",NULL);
#endif
  {
   Set<Forms__6,fsCreating,fsActivated> tolua_ret = (Set<Forms__6,fsCreating,fsActivated>)  self->operator*(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<Forms__6,fsCreating,fsActivated>(tolua_ret);

/* getting type */
  char* lua_type = "Set<Forms__6,fsCreating,fsActivated>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<Forms__6,fsCreating,fsActivated>));

/* getting type */
  char* lua_type = "Set<Forms__6,fsCreating,fsActivated>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.mul'.",&tolua_err);
 return 0;
#endif
}

/* method: Contains of class  Set<Forms__6,fsCreating,fsActivated> */
static int tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated__Contains00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Forms__6,fsCreating,fsActivated>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Forms__6,fsCreating,fsActivated>* self = (const Set<Forms__6,fsCreating,fsActivated>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Forms__6 el = ((const Forms__6)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Contains'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Contains(el);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Contains'.",&tolua_err);
 return 0;
#endif
}

/* method: Clear of class  Set<Forms__6,fsCreating,fsActivated> */
static int tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated__Clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Set<Forms__6,fsCreating,fsActivated>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Set<Forms__6,fsCreating,fsActivated>* self = (Set<Forms__6,fsCreating,fsActivated>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Clear'",NULL);
#endif
  {
   Set<Forms__6,fsCreating,fsActivated>& tolua_ret = (Set<Forms__6,fsCreating,fsActivated>&)  self->Clear();

/* getting type */
  char* lua_type = "Set<Forms__6,fsCreating,fsActivated>";
   tolua_pushusertype(tolua_S,(void*)(&tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clear'.",&tolua_err);
 return 0;
#endif
}

/* method: Empty of class  Set<Forms__6,fsCreating,fsActivated> */
static int tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated__Empty00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Forms__6,fsCreating,fsActivated>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Forms__6,fsCreating,fsActivated>* self = (const Set<Forms__6,fsCreating,fsActivated>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Empty'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Empty();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Empty'.",&tolua_err);
 return 0;
#endif
}

/* method: operator== of class  Set<Forms__6,fsCreating,fsActivated> */
static int tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated___eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Forms__6,fsCreating,fsActivated>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Forms__6,fsCreating,fsActivated>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Forms__6,fsCreating,fsActivated>* self = (const Set<Forms__6,fsCreating,fsActivated>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<Forms__6,fsCreating,fsActivated>* rhs = ((const Set<Forms__6,fsCreating,fsActivated>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*rhs);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  Set<TBevelEdge,beLeft,beBottom> */
static int tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom__new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<TBevelEdge,beLeft,beBottom>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   Set<TBevelEdge,beLeft,beBottom>* tolua_ret = (Set<TBevelEdge,beLeft,beBottom>*)  new Set<TBevelEdge,beLeft,beBottom>();

/* getting type */
  char* lua_type = "Set<TBevelEdge,beLeft,beBottom>";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  Set<TBevelEdge,beLeft,beBottom> */
static int tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom__new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<TBevelEdge,beLeft,beBottom>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   Set<TBevelEdge,beLeft,beBottom>* tolua_ret = (Set<TBevelEdge,beLeft,beBottom>*)  new Set<TBevelEdge,beLeft,beBottom>();

/* getting type */
  char* lua_type = "Set<TBevelEdge,beLeft,beBottom>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  Set<TBevelEdge,beLeft,beBottom> */
static int tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom__new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<TBevelEdge,beLeft,beBottom>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TBevelEdge,beLeft,beBottom>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  const Set<TBevelEdge,beLeft,beBottom>* src = ((const Set<TBevelEdge,beLeft,beBottom>*)  tolua_tousertype(tolua_S,2,0));
  {
   Set<TBevelEdge,beLeft,beBottom>* tolua_ret = (Set<TBevelEdge,beLeft,beBottom>*)  new Set<TBevelEdge,beLeft,beBottom>(*src);

/* getting type */
  char* lua_type = "Set<TBevelEdge,beLeft,beBottom>";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom__new00(tolua_S);
}

/* method: new_local of class  Set<TBevelEdge,beLeft,beBottom> */
static int tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom__new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<TBevelEdge,beLeft,beBottom>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TBevelEdge,beLeft,beBottom>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  const Set<TBevelEdge,beLeft,beBottom>* src = ((const Set<TBevelEdge,beLeft,beBottom>*)  tolua_tousertype(tolua_S,2,0));
  {
   Set<TBevelEdge,beLeft,beBottom>* tolua_ret = (Set<TBevelEdge,beLeft,beBottom>*)  new Set<TBevelEdge,beLeft,beBottom>(*src);

/* getting type */
  char* lua_type = "Set<TBevelEdge,beLeft,beBottom>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom__new00_local(tolua_S);
}

/* method: delete of class  Set<TBevelEdge,beLeft,beBottom> */
static int tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom__delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Set<TBevelEdge,beLeft,beBottom>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Set<TBevelEdge,beLeft,beBottom>* self = (Set<TBevelEdge,beLeft,beBottom>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: operator+ of class  Set<TBevelEdge,beLeft,beBottom> */
static int tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom___add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TBevelEdge,beLeft,beBottom>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TBevelEdge,beLeft,beBottom>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TBevelEdge,beLeft,beBottom>* self = (const Set<TBevelEdge,beLeft,beBottom>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<TBevelEdge,beLeft,beBottom>* rhs = ((const Set<TBevelEdge,beLeft,beBottom>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'",NULL);
#endif
  {
   Set<TBevelEdge,beLeft,beBottom> tolua_ret = (Set<TBevelEdge,beLeft,beBottom>)  self->operator+(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<TBevelEdge,beLeft,beBottom>(tolua_ret);

/* getting type */
  char* lua_type = "Set<TBevelEdge,beLeft,beBottom>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<TBevelEdge,beLeft,beBottom>));

/* getting type */
  char* lua_type = "Set<TBevelEdge,beLeft,beBottom>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}

/* method: operator- of class  Set<TBevelEdge,beLeft,beBottom> */
static int tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom___sub00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TBevelEdge,beLeft,beBottom>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TBevelEdge,beLeft,beBottom>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TBevelEdge,beLeft,beBottom>* self = (const Set<TBevelEdge,beLeft,beBottom>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<TBevelEdge,beLeft,beBottom>* rhs = ((const Set<TBevelEdge,beLeft,beBottom>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'",NULL);
#endif
  {
   Set<TBevelEdge,beLeft,beBottom> tolua_ret = (Set<TBevelEdge,beLeft,beBottom>)  self->operator-(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<TBevelEdge,beLeft,beBottom>(tolua_ret);

/* getting type */
  char* lua_type = "Set<TBevelEdge,beLeft,beBottom>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<TBevelEdge,beLeft,beBottom>));

/* getting type */
  char* lua_type = "Set<TBevelEdge,beLeft,beBottom>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.sub'.",&tolua_err);
 return 0;
#endif
}

/* method: operator* of class  Set<TBevelEdge,beLeft,beBottom> */
static int tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom___mul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TBevelEdge,beLeft,beBottom>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TBevelEdge,beLeft,beBottom>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TBevelEdge,beLeft,beBottom>* self = (const Set<TBevelEdge,beLeft,beBottom>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<TBevelEdge,beLeft,beBottom>* rhs = ((const Set<TBevelEdge,beLeft,beBottom>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'",NULL);
#endif
  {
   Set<TBevelEdge,beLeft,beBottom> tolua_ret = (Set<TBevelEdge,beLeft,beBottom>)  self->operator*(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<TBevelEdge,beLeft,beBottom>(tolua_ret);

/* getting type */
  char* lua_type = "Set<TBevelEdge,beLeft,beBottom>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<TBevelEdge,beLeft,beBottom>));

/* getting type */
  char* lua_type = "Set<TBevelEdge,beLeft,beBottom>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.mul'.",&tolua_err);
 return 0;
#endif
}

/* method: Contains of class  Set<TBevelEdge,beLeft,beBottom> */
static int tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom__Contains00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TBevelEdge,beLeft,beBottom>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TBevelEdge,beLeft,beBottom>* self = (const Set<TBevelEdge,beLeft,beBottom>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TBevelEdge el = ((const TBevelEdge)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Contains'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Contains(el);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Contains'.",&tolua_err);
 return 0;
#endif
}

/* method: Clear of class  Set<TBevelEdge,beLeft,beBottom> */
static int tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom__Clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Set<TBevelEdge,beLeft,beBottom>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Set<TBevelEdge,beLeft,beBottom>* self = (Set<TBevelEdge,beLeft,beBottom>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Clear'",NULL);
#endif
  {
   Set<TBevelEdge,beLeft,beBottom>& tolua_ret = (Set<TBevelEdge,beLeft,beBottom>&)  self->Clear();

/* getting type */
  char* lua_type = "Set<TBevelEdge,beLeft,beBottom>";
   tolua_pushusertype(tolua_S,(void*)(&tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clear'.",&tolua_err);
 return 0;
#endif
}

/* method: Empty of class  Set<TBevelEdge,beLeft,beBottom> */
static int tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom__Empty00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TBevelEdge,beLeft,beBottom>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TBevelEdge,beLeft,beBottom>* self = (const Set<TBevelEdge,beLeft,beBottom>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Empty'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Empty();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Empty'.",&tolua_err);
 return 0;
#endif
}

/* method: operator== of class  Set<TBevelEdge,beLeft,beBottom> */
static int tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom___eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TBevelEdge,beLeft,beBottom>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TBevelEdge,beLeft,beBottom>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TBevelEdge,beLeft,beBottom>* self = (const Set<TBevelEdge,beLeft,beBottom>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<TBevelEdge,beLeft,beBottom>* rhs = ((const Set<TBevelEdge,beLeft,beBottom>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*rhs);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  Set<Controls__01,csLButtonDown,csDocking> */
static int tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking__new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<Controls__01,csLButtonDown,csDocking>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   Set<Controls__01,csLButtonDown,csDocking>* tolua_ret = (Set<Controls__01,csLButtonDown,csDocking>*)  new Set<Controls__01,csLButtonDown,csDocking>();

/* getting type */
  char* lua_type = "Set<Controls__01,csLButtonDown,csDocking>";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  Set<Controls__01,csLButtonDown,csDocking> */
static int tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking__new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<Controls__01,csLButtonDown,csDocking>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   Set<Controls__01,csLButtonDown,csDocking>* tolua_ret = (Set<Controls__01,csLButtonDown,csDocking>*)  new Set<Controls__01,csLButtonDown,csDocking>();

/* getting type */
  char* lua_type = "Set<Controls__01,csLButtonDown,csDocking>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  Set<Controls__01,csLButtonDown,csDocking> */
static int tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking__new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<Controls__01,csLButtonDown,csDocking>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Controls__01,csLButtonDown,csDocking>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  const Set<Controls__01,csLButtonDown,csDocking>* src = ((const Set<Controls__01,csLButtonDown,csDocking>*)  tolua_tousertype(tolua_S,2,0));
  {
   Set<Controls__01,csLButtonDown,csDocking>* tolua_ret = (Set<Controls__01,csLButtonDown,csDocking>*)  new Set<Controls__01,csLButtonDown,csDocking>(*src);

/* getting type */
  char* lua_type = "Set<Controls__01,csLButtonDown,csDocking>";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking__new00(tolua_S);
}

/* method: new_local of class  Set<Controls__01,csLButtonDown,csDocking> */
static int tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking__new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<Controls__01,csLButtonDown,csDocking>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Controls__01,csLButtonDown,csDocking>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  const Set<Controls__01,csLButtonDown,csDocking>* src = ((const Set<Controls__01,csLButtonDown,csDocking>*)  tolua_tousertype(tolua_S,2,0));
  {
   Set<Controls__01,csLButtonDown,csDocking>* tolua_ret = (Set<Controls__01,csLButtonDown,csDocking>*)  new Set<Controls__01,csLButtonDown,csDocking>(*src);

/* getting type */
  char* lua_type = "Set<Controls__01,csLButtonDown,csDocking>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking__new00_local(tolua_S);
}

/* method: delete of class  Set<Controls__01,csLButtonDown,csDocking> */
static int tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking__delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Set<Controls__01,csLButtonDown,csDocking>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Set<Controls__01,csLButtonDown,csDocking>* self = (Set<Controls__01,csLButtonDown,csDocking>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: operator+ of class  Set<Controls__01,csLButtonDown,csDocking> */
static int tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking___add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Controls__01,csLButtonDown,csDocking>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Controls__01,csLButtonDown,csDocking>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Controls__01,csLButtonDown,csDocking>* self = (const Set<Controls__01,csLButtonDown,csDocking>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<Controls__01,csLButtonDown,csDocking>* rhs = ((const Set<Controls__01,csLButtonDown,csDocking>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'",NULL);
#endif
  {
   Set<Controls__01,csLButtonDown,csDocking> tolua_ret = (Set<Controls__01,csLButtonDown,csDocking>)  self->operator+(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<Controls__01,csLButtonDown,csDocking>(tolua_ret);

/* getting type */
  char* lua_type = "Set<Controls__01,csLButtonDown,csDocking>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<Controls__01,csLButtonDown,csDocking>));

/* getting type */
  char* lua_type = "Set<Controls__01,csLButtonDown,csDocking>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}

/* method: operator- of class  Set<Controls__01,csLButtonDown,csDocking> */
static int tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking___sub00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Controls__01,csLButtonDown,csDocking>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Controls__01,csLButtonDown,csDocking>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Controls__01,csLButtonDown,csDocking>* self = (const Set<Controls__01,csLButtonDown,csDocking>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<Controls__01,csLButtonDown,csDocking>* rhs = ((const Set<Controls__01,csLButtonDown,csDocking>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'",NULL);
#endif
  {
   Set<Controls__01,csLButtonDown,csDocking> tolua_ret = (Set<Controls__01,csLButtonDown,csDocking>)  self->operator-(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<Controls__01,csLButtonDown,csDocking>(tolua_ret);

/* getting type */
  char* lua_type = "Set<Controls__01,csLButtonDown,csDocking>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<Controls__01,csLButtonDown,csDocking>));

/* getting type */
  char* lua_type = "Set<Controls__01,csLButtonDown,csDocking>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.sub'.",&tolua_err);
 return 0;
#endif
}

/* method: operator* of class  Set<Controls__01,csLButtonDown,csDocking> */
static int tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking___mul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Controls__01,csLButtonDown,csDocking>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Controls__01,csLButtonDown,csDocking>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Controls__01,csLButtonDown,csDocking>* self = (const Set<Controls__01,csLButtonDown,csDocking>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<Controls__01,csLButtonDown,csDocking>* rhs = ((const Set<Controls__01,csLButtonDown,csDocking>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'",NULL);
#endif
  {
   Set<Controls__01,csLButtonDown,csDocking> tolua_ret = (Set<Controls__01,csLButtonDown,csDocking>)  self->operator*(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<Controls__01,csLButtonDown,csDocking>(tolua_ret);

/* getting type */
  char* lua_type = "Set<Controls__01,csLButtonDown,csDocking>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<Controls__01,csLButtonDown,csDocking>));

/* getting type */
  char* lua_type = "Set<Controls__01,csLButtonDown,csDocking>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.mul'.",&tolua_err);
 return 0;
#endif
}

/* method: Contains of class  Set<Controls__01,csLButtonDown,csDocking> */
static int tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking__Contains00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Controls__01,csLButtonDown,csDocking>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Controls__01,csLButtonDown,csDocking>* self = (const Set<Controls__01,csLButtonDown,csDocking>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Controls__01 el = ((const Controls__01)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Contains'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Contains(el);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Contains'.",&tolua_err);
 return 0;
#endif
}

/* method: Clear of class  Set<Controls__01,csLButtonDown,csDocking> */
static int tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking__Clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Set<Controls__01,csLButtonDown,csDocking>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Set<Controls__01,csLButtonDown,csDocking>* self = (Set<Controls__01,csLButtonDown,csDocking>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Clear'",NULL);
#endif
  {
   Set<Controls__01,csLButtonDown,csDocking>& tolua_ret = (Set<Controls__01,csLButtonDown,csDocking>&)  self->Clear();

/* getting type */
  char* lua_type = "Set<Controls__01,csLButtonDown,csDocking>";
   tolua_pushusertype(tolua_S,(void*)(&tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clear'.",&tolua_err);
 return 0;
#endif
}

/* method: Empty of class  Set<Controls__01,csLButtonDown,csDocking> */
static int tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking__Empty00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Controls__01,csLButtonDown,csDocking>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Controls__01,csLButtonDown,csDocking>* self = (const Set<Controls__01,csLButtonDown,csDocking>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Empty'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Empty();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Empty'.",&tolua_err);
 return 0;
#endif
}

/* method: operator== of class  Set<Controls__01,csLButtonDown,csDocking> */
static int tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking___eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Controls__01,csLButtonDown,csDocking>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Controls__01,csLButtonDown,csDocking>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Controls__01,csLButtonDown,csDocking>* self = (const Set<Controls__01,csLButtonDown,csDocking>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<Controls__01,csLButtonDown,csDocking>* rhs = ((const Set<Controls__01,csLButtonDown,csDocking>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*rhs);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  Set<Controls__11,csAcceptsControls,csMenuEvents> */
static int tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents__new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<Controls__11,csAcceptsControls,csMenuEvents>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   Set<Controls__11,csAcceptsControls,csMenuEvents>* tolua_ret = (Set<Controls__11,csAcceptsControls,csMenuEvents>*)  new Set<Controls__11,csAcceptsControls,csMenuEvents>();

/* getting type */
  char* lua_type = "Set<Controls__11,csAcceptsControls,csMenuEvents>";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  Set<Controls__11,csAcceptsControls,csMenuEvents> */
static int tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents__new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<Controls__11,csAcceptsControls,csMenuEvents>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   Set<Controls__11,csAcceptsControls,csMenuEvents>* tolua_ret = (Set<Controls__11,csAcceptsControls,csMenuEvents>*)  new Set<Controls__11,csAcceptsControls,csMenuEvents>();

/* getting type */
  char* lua_type = "Set<Controls__11,csAcceptsControls,csMenuEvents>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  Set<Controls__11,csAcceptsControls,csMenuEvents> */
static int tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents__new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<Controls__11,csAcceptsControls,csMenuEvents>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Controls__11,csAcceptsControls,csMenuEvents>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  const Set<Controls__11,csAcceptsControls,csMenuEvents>* src = ((const Set<Controls__11,csAcceptsControls,csMenuEvents>*)  tolua_tousertype(tolua_S,2,0));
  {
   Set<Controls__11,csAcceptsControls,csMenuEvents>* tolua_ret = (Set<Controls__11,csAcceptsControls,csMenuEvents>*)  new Set<Controls__11,csAcceptsControls,csMenuEvents>(*src);

/* getting type */
  char* lua_type = "Set<Controls__11,csAcceptsControls,csMenuEvents>";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents__new00(tolua_S);
}

/* method: new_local of class  Set<Controls__11,csAcceptsControls,csMenuEvents> */
static int tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents__new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<Controls__11,csAcceptsControls,csMenuEvents>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Controls__11,csAcceptsControls,csMenuEvents>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  const Set<Controls__11,csAcceptsControls,csMenuEvents>* src = ((const Set<Controls__11,csAcceptsControls,csMenuEvents>*)  tolua_tousertype(tolua_S,2,0));
  {
   Set<Controls__11,csAcceptsControls,csMenuEvents>* tolua_ret = (Set<Controls__11,csAcceptsControls,csMenuEvents>*)  new Set<Controls__11,csAcceptsControls,csMenuEvents>(*src);

/* getting type */
  char* lua_type = "Set<Controls__11,csAcceptsControls,csMenuEvents>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents__new00_local(tolua_S);
}

/* method: delete of class  Set<Controls__11,csAcceptsControls,csMenuEvents> */
static int tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents__delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Set<Controls__11,csAcceptsControls,csMenuEvents>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Set<Controls__11,csAcceptsControls,csMenuEvents>* self = (Set<Controls__11,csAcceptsControls,csMenuEvents>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: operator+ of class  Set<Controls__11,csAcceptsControls,csMenuEvents> */
static int tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents___add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Controls__11,csAcceptsControls,csMenuEvents>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Controls__11,csAcceptsControls,csMenuEvents>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Controls__11,csAcceptsControls,csMenuEvents>* self = (const Set<Controls__11,csAcceptsControls,csMenuEvents>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<Controls__11,csAcceptsControls,csMenuEvents>* rhs = ((const Set<Controls__11,csAcceptsControls,csMenuEvents>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'",NULL);
#endif
  {
   Set<Controls__11,csAcceptsControls,csMenuEvents> tolua_ret = (Set<Controls__11,csAcceptsControls,csMenuEvents>)  self->operator+(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<Controls__11,csAcceptsControls,csMenuEvents>(tolua_ret);

/* getting type */
  char* lua_type = "Set<Controls__11,csAcceptsControls,csMenuEvents>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<Controls__11,csAcceptsControls,csMenuEvents>));

/* getting type */
  char* lua_type = "Set<Controls__11,csAcceptsControls,csMenuEvents>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}

/* method: operator- of class  Set<Controls__11,csAcceptsControls,csMenuEvents> */
static int tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents___sub00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Controls__11,csAcceptsControls,csMenuEvents>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Controls__11,csAcceptsControls,csMenuEvents>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Controls__11,csAcceptsControls,csMenuEvents>* self = (const Set<Controls__11,csAcceptsControls,csMenuEvents>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<Controls__11,csAcceptsControls,csMenuEvents>* rhs = ((const Set<Controls__11,csAcceptsControls,csMenuEvents>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'",NULL);
#endif
  {
   Set<Controls__11,csAcceptsControls,csMenuEvents> tolua_ret = (Set<Controls__11,csAcceptsControls,csMenuEvents>)  self->operator-(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<Controls__11,csAcceptsControls,csMenuEvents>(tolua_ret);

/* getting type */
  char* lua_type = "Set<Controls__11,csAcceptsControls,csMenuEvents>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<Controls__11,csAcceptsControls,csMenuEvents>));

/* getting type */
  char* lua_type = "Set<Controls__11,csAcceptsControls,csMenuEvents>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.sub'.",&tolua_err);
 return 0;
#endif
}

/* method: operator* of class  Set<Controls__11,csAcceptsControls,csMenuEvents> */
static int tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents___mul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Controls__11,csAcceptsControls,csMenuEvents>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Controls__11,csAcceptsControls,csMenuEvents>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Controls__11,csAcceptsControls,csMenuEvents>* self = (const Set<Controls__11,csAcceptsControls,csMenuEvents>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<Controls__11,csAcceptsControls,csMenuEvents>* rhs = ((const Set<Controls__11,csAcceptsControls,csMenuEvents>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'",NULL);
#endif
  {
   Set<Controls__11,csAcceptsControls,csMenuEvents> tolua_ret = (Set<Controls__11,csAcceptsControls,csMenuEvents>)  self->operator*(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<Controls__11,csAcceptsControls,csMenuEvents>(tolua_ret);

/* getting type */
  char* lua_type = "Set<Controls__11,csAcceptsControls,csMenuEvents>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<Controls__11,csAcceptsControls,csMenuEvents>));

/* getting type */
  char* lua_type = "Set<Controls__11,csAcceptsControls,csMenuEvents>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.mul'.",&tolua_err);
 return 0;
#endif
}

/* method: Contains of class  Set<Controls__11,csAcceptsControls,csMenuEvents> */
static int tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents__Contains00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Controls__11,csAcceptsControls,csMenuEvents>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Controls__11,csAcceptsControls,csMenuEvents>* self = (const Set<Controls__11,csAcceptsControls,csMenuEvents>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Controls__11 el = ((const Controls__11)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Contains'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Contains(el);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Contains'.",&tolua_err);
 return 0;
#endif
}

/* method: Clear of class  Set<Controls__11,csAcceptsControls,csMenuEvents> */
static int tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents__Clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Set<Controls__11,csAcceptsControls,csMenuEvents>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Set<Controls__11,csAcceptsControls,csMenuEvents>* self = (Set<Controls__11,csAcceptsControls,csMenuEvents>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Clear'",NULL);
#endif
  {
   Set<Controls__11,csAcceptsControls,csMenuEvents>& tolua_ret = (Set<Controls__11,csAcceptsControls,csMenuEvents>&)  self->Clear();

/* getting type */
  char* lua_type = "Set<Controls__11,csAcceptsControls,csMenuEvents>";
   tolua_pushusertype(tolua_S,(void*)(&tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clear'.",&tolua_err);
 return 0;
#endif
}

/* method: Empty of class  Set<Controls__11,csAcceptsControls,csMenuEvents> */
static int tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents__Empty00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Controls__11,csAcceptsControls,csMenuEvents>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Controls__11,csAcceptsControls,csMenuEvents>* self = (const Set<Controls__11,csAcceptsControls,csMenuEvents>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Empty'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Empty();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Empty'.",&tolua_err);
 return 0;
#endif
}

/* method: operator== of class  Set<Controls__11,csAcceptsControls,csMenuEvents> */
static int tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents___eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<Controls__11,csAcceptsControls,csMenuEvents>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<Controls__11,csAcceptsControls,csMenuEvents>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<Controls__11,csAcceptsControls,csMenuEvents>* self = (const Set<Controls__11,csAcceptsControls,csMenuEvents>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<Controls__11,csAcceptsControls,csMenuEvents>* rhs = ((const Set<Controls__11,csAcceptsControls,csMenuEvents>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*rhs);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  Set<TAnchorKind,akLeft,akBottom> */
static int tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom__new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<TAnchorKind,akLeft,akBottom>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   Set<TAnchorKind,akLeft,akBottom>* tolua_ret = (Set<TAnchorKind,akLeft,akBottom>*)  new Set<TAnchorKind,akLeft,akBottom>();

/* getting type */
  char* lua_type = "Set<TAnchorKind,akLeft,akBottom>";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  Set<TAnchorKind,akLeft,akBottom> */
static int tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom__new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<TAnchorKind,akLeft,akBottom>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   Set<TAnchorKind,akLeft,akBottom>* tolua_ret = (Set<TAnchorKind,akLeft,akBottom>*)  new Set<TAnchorKind,akLeft,akBottom>();

/* getting type */
  char* lua_type = "Set<TAnchorKind,akLeft,akBottom>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  Set<TAnchorKind,akLeft,akBottom> */
static int tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom__new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<TAnchorKind,akLeft,akBottom>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TAnchorKind,akLeft,akBottom>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  const Set<TAnchorKind,akLeft,akBottom>* src = ((const Set<TAnchorKind,akLeft,akBottom>*)  tolua_tousertype(tolua_S,2,0));
  {
   Set<TAnchorKind,akLeft,akBottom>* tolua_ret = (Set<TAnchorKind,akLeft,akBottom>*)  new Set<TAnchorKind,akLeft,akBottom>(*src);

/* getting type */
  char* lua_type = "Set<TAnchorKind,akLeft,akBottom>";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom__new00(tolua_S);
}

/* method: new_local of class  Set<TAnchorKind,akLeft,akBottom> */
static int tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom__new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<TAnchorKind,akLeft,akBottom>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TAnchorKind,akLeft,akBottom>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  const Set<TAnchorKind,akLeft,akBottom>* src = ((const Set<TAnchorKind,akLeft,akBottom>*)  tolua_tousertype(tolua_S,2,0));
  {
   Set<TAnchorKind,akLeft,akBottom>* tolua_ret = (Set<TAnchorKind,akLeft,akBottom>*)  new Set<TAnchorKind,akLeft,akBottom>(*src);

/* getting type */
  char* lua_type = "Set<TAnchorKind,akLeft,akBottom>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom__new00_local(tolua_S);
}

/* method: delete of class  Set<TAnchorKind,akLeft,akBottom> */
static int tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom__delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Set<TAnchorKind,akLeft,akBottom>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Set<TAnchorKind,akLeft,akBottom>* self = (Set<TAnchorKind,akLeft,akBottom>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: operator+ of class  Set<TAnchorKind,akLeft,akBottom> */
static int tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom___add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TAnchorKind,akLeft,akBottom>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TAnchorKind,akLeft,akBottom>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TAnchorKind,akLeft,akBottom>* self = (const Set<TAnchorKind,akLeft,akBottom>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<TAnchorKind,akLeft,akBottom>* rhs = ((const Set<TAnchorKind,akLeft,akBottom>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'",NULL);
#endif
  {
   Set<TAnchorKind,akLeft,akBottom> tolua_ret = (Set<TAnchorKind,akLeft,akBottom>)  self->operator+(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<TAnchorKind,akLeft,akBottom>(tolua_ret);

/* getting type */
  char* lua_type = "Set<TAnchorKind,akLeft,akBottom>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<TAnchorKind,akLeft,akBottom>));

/* getting type */
  char* lua_type = "Set<TAnchorKind,akLeft,akBottom>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}

/* method: operator- of class  Set<TAnchorKind,akLeft,akBottom> */
static int tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom___sub00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TAnchorKind,akLeft,akBottom>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TAnchorKind,akLeft,akBottom>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TAnchorKind,akLeft,akBottom>* self = (const Set<TAnchorKind,akLeft,akBottom>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<TAnchorKind,akLeft,akBottom>* rhs = ((const Set<TAnchorKind,akLeft,akBottom>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'",NULL);
#endif
  {
   Set<TAnchorKind,akLeft,akBottom> tolua_ret = (Set<TAnchorKind,akLeft,akBottom>)  self->operator-(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<TAnchorKind,akLeft,akBottom>(tolua_ret);

/* getting type */
  char* lua_type = "Set<TAnchorKind,akLeft,akBottom>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<TAnchorKind,akLeft,akBottom>));

/* getting type */
  char* lua_type = "Set<TAnchorKind,akLeft,akBottom>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.sub'.",&tolua_err);
 return 0;
#endif
}

/* method: operator* of class  Set<TAnchorKind,akLeft,akBottom> */
static int tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom___mul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TAnchorKind,akLeft,akBottom>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TAnchorKind,akLeft,akBottom>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TAnchorKind,akLeft,akBottom>* self = (const Set<TAnchorKind,akLeft,akBottom>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<TAnchorKind,akLeft,akBottom>* rhs = ((const Set<TAnchorKind,akLeft,akBottom>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'",NULL);
#endif
  {
   Set<TAnchorKind,akLeft,akBottom> tolua_ret = (Set<TAnchorKind,akLeft,akBottom>)  self->operator*(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<TAnchorKind,akLeft,akBottom>(tolua_ret);

/* getting type */
  char* lua_type = "Set<TAnchorKind,akLeft,akBottom>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<TAnchorKind,akLeft,akBottom>));

/* getting type */
  char* lua_type = "Set<TAnchorKind,akLeft,akBottom>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.mul'.",&tolua_err);
 return 0;
#endif
}

/* method: Contains of class  Set<TAnchorKind,akLeft,akBottom> */
static int tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom__Contains00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TAnchorKind,akLeft,akBottom>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TAnchorKind,akLeft,akBottom>* self = (const Set<TAnchorKind,akLeft,akBottom>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TAnchorKind el = ((const TAnchorKind)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Contains'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Contains(el);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Contains'.",&tolua_err);
 return 0;
#endif
}

/* method: Clear of class  Set<TAnchorKind,akLeft,akBottom> */
static int tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom__Clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Set<TAnchorKind,akLeft,akBottom>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Set<TAnchorKind,akLeft,akBottom>* self = (Set<TAnchorKind,akLeft,akBottom>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Clear'",NULL);
#endif
  {
   Set<TAnchorKind,akLeft,akBottom>& tolua_ret = (Set<TAnchorKind,akLeft,akBottom>&)  self->Clear();

/* getting type */
  char* lua_type = "Set<TAnchorKind,akLeft,akBottom>";
   tolua_pushusertype(tolua_S,(void*)(&tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clear'.",&tolua_err);
 return 0;
#endif
}

/* method: Empty of class  Set<TAnchorKind,akLeft,akBottom> */
static int tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom__Empty00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TAnchorKind,akLeft,akBottom>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TAnchorKind,akLeft,akBottom>* self = (const Set<TAnchorKind,akLeft,akBottom>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Empty'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Empty();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Empty'.",&tolua_err);
 return 0;
#endif
}

/* method: operator== of class  Set<TAnchorKind,akLeft,akBottom> */
static int tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom___eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TAnchorKind,akLeft,akBottom>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TAnchorKind,akLeft,akBottom>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TAnchorKind,akLeft,akBottom>* self = (const Set<TAnchorKind,akLeft,akBottom>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<TAnchorKind,akLeft,akBottom>* rhs = ((const Set<TAnchorKind,akLeft,akBottom>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*rhs);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  Set<TFontStyle,fsBold,fsStrikeOut> */
static int tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut__new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<TFontStyle,fsBold,fsStrikeOut>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   Set<TFontStyle,fsBold,fsStrikeOut>* tolua_ret = (Set<TFontStyle,fsBold,fsStrikeOut>*)  new Set<TFontStyle,fsBold,fsStrikeOut>();

/* getting type */
  char* lua_type = "Set<TFontStyle,fsBold,fsStrikeOut>";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  Set<TFontStyle,fsBold,fsStrikeOut> */
static int tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut__new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<TFontStyle,fsBold,fsStrikeOut>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   Set<TFontStyle,fsBold,fsStrikeOut>* tolua_ret = (Set<TFontStyle,fsBold,fsStrikeOut>*)  new Set<TFontStyle,fsBold,fsStrikeOut>();

/* getting type */
  char* lua_type = "Set<TFontStyle,fsBold,fsStrikeOut>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  Set<TFontStyle,fsBold,fsStrikeOut> */
static int tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut__new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<TFontStyle,fsBold,fsStrikeOut>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TFontStyle,fsBold,fsStrikeOut>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  const Set<TFontStyle,fsBold,fsStrikeOut>* src = ((const Set<TFontStyle,fsBold,fsStrikeOut>*)  tolua_tousertype(tolua_S,2,0));
  {
   Set<TFontStyle,fsBold,fsStrikeOut>* tolua_ret = (Set<TFontStyle,fsBold,fsStrikeOut>*)  new Set<TFontStyle,fsBold,fsStrikeOut>(*src);

/* getting type */
  char* lua_type = "Set<TFontStyle,fsBold,fsStrikeOut>";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut__new00(tolua_S);
}

/* method: new_local of class  Set<TFontStyle,fsBold,fsStrikeOut> */
static int tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut__new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Set<TFontStyle,fsBold,fsStrikeOut>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TFontStyle,fsBold,fsStrikeOut>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  const Set<TFontStyle,fsBold,fsStrikeOut>* src = ((const Set<TFontStyle,fsBold,fsStrikeOut>*)  tolua_tousertype(tolua_S,2,0));
  {
   Set<TFontStyle,fsBold,fsStrikeOut>* tolua_ret = (Set<TFontStyle,fsBold,fsStrikeOut>*)  new Set<TFontStyle,fsBold,fsStrikeOut>(*src);

/* getting type */
  char* lua_type = "Set<TFontStyle,fsBold,fsStrikeOut>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut__new00_local(tolua_S);
}

/* method: delete of class  Set<TFontStyle,fsBold,fsStrikeOut> */
static int tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut__delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Set<TFontStyle,fsBold,fsStrikeOut>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Set<TFontStyle,fsBold,fsStrikeOut>* self = (Set<TFontStyle,fsBold,fsStrikeOut>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: operator+ of class  Set<TFontStyle,fsBold,fsStrikeOut> */
static int tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut___add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TFontStyle,fsBold,fsStrikeOut>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TFontStyle,fsBold,fsStrikeOut>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TFontStyle,fsBold,fsStrikeOut>* self = (const Set<TFontStyle,fsBold,fsStrikeOut>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<TFontStyle,fsBold,fsStrikeOut>* rhs = ((const Set<TFontStyle,fsBold,fsStrikeOut>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'",NULL);
#endif
  {
   Set<TFontStyle,fsBold,fsStrikeOut> tolua_ret = (Set<TFontStyle,fsBold,fsStrikeOut>)  self->operator+(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<TFontStyle,fsBold,fsStrikeOut>(tolua_ret);

/* getting type */
  char* lua_type = "Set<TFontStyle,fsBold,fsStrikeOut>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<TFontStyle,fsBold,fsStrikeOut>));

/* getting type */
  char* lua_type = "Set<TFontStyle,fsBold,fsStrikeOut>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}

/* method: operator- of class  Set<TFontStyle,fsBold,fsStrikeOut> */
static int tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut___sub00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TFontStyle,fsBold,fsStrikeOut>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TFontStyle,fsBold,fsStrikeOut>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TFontStyle,fsBold,fsStrikeOut>* self = (const Set<TFontStyle,fsBold,fsStrikeOut>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<TFontStyle,fsBold,fsStrikeOut>* rhs = ((const Set<TFontStyle,fsBold,fsStrikeOut>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'",NULL);
#endif
  {
   Set<TFontStyle,fsBold,fsStrikeOut> tolua_ret = (Set<TFontStyle,fsBold,fsStrikeOut>)  self->operator-(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<TFontStyle,fsBold,fsStrikeOut>(tolua_ret);

/* getting type */
  char* lua_type = "Set<TFontStyle,fsBold,fsStrikeOut>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<TFontStyle,fsBold,fsStrikeOut>));

/* getting type */
  char* lua_type = "Set<TFontStyle,fsBold,fsStrikeOut>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.sub'.",&tolua_err);
 return 0;
#endif
}

/* method: operator* of class  Set<TFontStyle,fsBold,fsStrikeOut> */
static int tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut___mul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TFontStyle,fsBold,fsStrikeOut>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TFontStyle,fsBold,fsStrikeOut>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TFontStyle,fsBold,fsStrikeOut>* self = (const Set<TFontStyle,fsBold,fsStrikeOut>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<TFontStyle,fsBold,fsStrikeOut>* rhs = ((const Set<TFontStyle,fsBold,fsStrikeOut>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'",NULL);
#endif
  {
   Set<TFontStyle,fsBold,fsStrikeOut> tolua_ret = (Set<TFontStyle,fsBold,fsStrikeOut>)  self->operator*(*rhs);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set<TFontStyle,fsBold,fsStrikeOut>(tolua_ret);

/* getting type */
  char* lua_type = "Set<TFontStyle,fsBold,fsStrikeOut>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set<TFontStyle,fsBold,fsStrikeOut>));

/* getting type */
  char* lua_type = "Set<TFontStyle,fsBold,fsStrikeOut>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.mul'.",&tolua_err);
 return 0;
#endif
}

/* method: Contains of class  Set<TFontStyle,fsBold,fsStrikeOut> */
static int tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut__Contains00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TFontStyle,fsBold,fsStrikeOut>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TFontStyle,fsBold,fsStrikeOut>* self = (const Set<TFontStyle,fsBold,fsStrikeOut>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TFontStyle el = ((const TFontStyle)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Contains'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Contains(el);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Contains'.",&tolua_err);
 return 0;
#endif
}

/* method: Clear of class  Set<TFontStyle,fsBold,fsStrikeOut> */
static int tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut__Clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Set<TFontStyle,fsBold,fsStrikeOut>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Set<TFontStyle,fsBold,fsStrikeOut>* self = (Set<TFontStyle,fsBold,fsStrikeOut>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Clear'",NULL);
#endif
  {
   Set<TFontStyle,fsBold,fsStrikeOut>& tolua_ret = (Set<TFontStyle,fsBold,fsStrikeOut>&)  self->Clear();

/* getting type */
  char* lua_type = "Set<TFontStyle,fsBold,fsStrikeOut>";
   tolua_pushusertype(tolua_S,(void*)(&tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clear'.",&tolua_err);
 return 0;
#endif
}

/* method: Empty of class  Set<TFontStyle,fsBold,fsStrikeOut> */
static int tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut__Empty00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TFontStyle,fsBold,fsStrikeOut>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TFontStyle,fsBold,fsStrikeOut>* self = (const Set<TFontStyle,fsBold,fsStrikeOut>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Empty'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Empty();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Empty'.",&tolua_err);
 return 0;
#endif
}

/* method: operator== of class  Set<TFontStyle,fsBold,fsStrikeOut> */
static int tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut___eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Set<TFontStyle,fsBold,fsStrikeOut>",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const Set<TFontStyle,fsBold,fsStrikeOut>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Set<TFontStyle,fsBold,fsStrikeOut>* self = (const Set<TFontStyle,fsBold,fsStrikeOut>*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const Set<TFontStyle,fsBold,fsStrikeOut>* rhs = ((const Set<TFontStyle,fsBold,fsStrikeOut>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*rhs);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TWMMenuChar */
static int tolua_z_VCL_TWMMenuChar_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TWMMenuChar",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TWMMenuChar* tolua_ret = (TWMMenuChar*)  new TWMMenuChar();

/* getting type */
  char* lua_type = "TWMMenuChar";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TWMMenuChar */
static int tolua_z_VCL_TWMMenuChar_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TWMMenuChar",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TWMMenuChar* tolua_ret = (TWMMenuChar*)  new TWMMenuChar();

/* getting type */
  char* lua_type = "TWMMenuChar";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TWMMenuChar */
static int tolua_z_VCL_TWMMenuChar_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWMMenuChar",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWMMenuChar* self = (TWMMenuChar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* get function: Msg of class  TWMMenuChar */
static int tolua_get_TWMMenuChar_Msg(lua_State* tolua_S)
{
  TWMMenuChar* self = (TWMMenuChar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Msg'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Msg);
 return 1;
}

/* set function: Msg of class  TWMMenuChar */
static int tolua_set_TWMMenuChar_Msg(lua_State* tolua_S)
{
  TWMMenuChar* self = (TWMMenuChar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Msg'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Msg = ((unsigned)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: User of class  TWMMenuChar */
static int tolua_get_TWMMenuChar_User(lua_State* tolua_S)
{
  TWMMenuChar* self = (TWMMenuChar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'User'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->User);
 return 1;
}

/* set function: User of class  TWMMenuChar */
static int tolua_set_TWMMenuChar_User(lua_State* tolua_S)
{
  TWMMenuChar* self = (TWMMenuChar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'User'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->User = ((char)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Unused of class  TWMMenuChar */
static int tolua_get_TWMMenuChar_Unused(lua_State* tolua_S)
{
  TWMMenuChar* self = (TWMMenuChar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Unused'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Unused);
 return 1;
}

/* set function: Unused of class  TWMMenuChar */
static int tolua_set_TWMMenuChar_Unused(lua_State* tolua_S)
{
  TWMMenuChar* self = (TWMMenuChar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Unused'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Unused = ((Byte)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: MenuFlag of class  TWMMenuChar */
static int tolua_get_TWMMenuChar_MenuFlag(lua_State* tolua_S)
{
  TWMMenuChar* self = (TWMMenuChar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MenuFlag'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->MenuFlag);
 return 1;
}

/* set function: MenuFlag of class  TWMMenuChar */
static int tolua_set_TWMMenuChar_MenuFlag(lua_State* tolua_S)
{
  TWMMenuChar* self = (TWMMenuChar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MenuFlag'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MenuFlag = ((Word)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Result of class  TWMMenuChar */
static int tolua_get_TWMMenuChar_Result(lua_State* tolua_S)
{
  TWMMenuChar* self = (TWMMenuChar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Result'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Result);
 return 1;
}

/* set function: Result of class  TWMMenuChar */
static int tolua_set_TWMMenuChar_Result(lua_State* tolua_S)
{
  TWMMenuChar* self = (TWMMenuChar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Result'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Result = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* method: new of class  SIZE */
static int tolua_z_VCL_SIZE_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SIZE",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SIZE* tolua_ret = (SIZE*)  new SIZE();

/* getting type */
  char* lua_type = "SIZE";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  SIZE */
static int tolua_z_VCL_SIZE_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"SIZE",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   SIZE* tolua_ret = (SIZE*)  new SIZE();

/* getting type */
  char* lua_type = "SIZE";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  SIZE */
static int tolua_z_VCL_SIZE_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SIZE",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SIZE* self = (SIZE*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* get function: cx of class  SIZE */
static int tolua_get_SIZE_cx(lua_State* tolua_S)
{
  SIZE* self = (SIZE*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'cx'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->cx);
 return 1;
}

/* set function: cx of class  SIZE */
static int tolua_set_SIZE_cx(lua_State* tolua_S)
{
  SIZE* self = (SIZE*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'cx'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->cx = ((  long)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: cy of class  SIZE */
static int tolua_get_SIZE_cy(lua_State* tolua_S)
{
  SIZE* self = (SIZE*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'cy'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->cy);
 return 1;
}

/* set function: cy of class  SIZE */
static int tolua_set_SIZE_cy(lua_State* tolua_S)
{
  SIZE* self = (SIZE*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'cy'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->cy = ((  long)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* method: new of class  TWMKey */
static int tolua_z_VCL_TWMKey_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TWMKey",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TWMKey* tolua_ret = (TWMKey*)  new TWMKey();

/* getting type */
  char* lua_type = "TWMKey";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TWMKey */
static int tolua_z_VCL_TWMKey_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TWMKey",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TWMKey* tolua_ret = (TWMKey*)  new TWMKey();

/* getting type */
  char* lua_type = "TWMKey";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TWMKey */
static int tolua_z_VCL_TWMKey_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWMKey",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWMKey* self = (TWMKey*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* get function: Msg of class  TWMKey */
static int tolua_get_TWMKey_Msg(lua_State* tolua_S)
{
  TWMKey* self = (TWMKey*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Msg'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Msg);
 return 1;
}

/* set function: Msg of class  TWMKey */
static int tolua_set_TWMKey_Msg(lua_State* tolua_S)
{
  TWMKey* self = (TWMKey*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Msg'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Msg = ((unsigned)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: CharCode of class  TWMKey */
static int tolua_get_TWMKey_CharCode(lua_State* tolua_S)
{
  TWMKey* self = (TWMKey*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'CharCode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->CharCode);
 return 1;
}

/* set function: CharCode of class  TWMKey */
static int tolua_set_TWMKey_CharCode(lua_State* tolua_S)
{
  TWMKey* self = (TWMKey*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'CharCode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->CharCode = ((Word)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Unused of class  TWMKey */
static int tolua_get_TWMKey_Unused(lua_State* tolua_S)
{
  TWMKey* self = (TWMKey*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Unused'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Unused);
 return 1;
}

/* set function: Unused of class  TWMKey */
static int tolua_set_TWMKey_Unused(lua_State* tolua_S)
{
  TWMKey* self = (TWMKey*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Unused'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Unused = ((Word)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: KeyData of class  TWMKey */
static int tolua_get_TWMKey_KeyData(lua_State* tolua_S)
{
  TWMKey* self = (TWMKey*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'KeyData'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->KeyData);
 return 1;
}

/* set function: KeyData of class  TWMKey */
static int tolua_set_TWMKey_KeyData(lua_State* tolua_S)
{
  TWMKey* self = (TWMKey*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'KeyData'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->KeyData = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Result of class  TWMKey */
static int tolua_get_TWMKey_Result(lua_State* tolua_S)
{
  TWMKey* self = (TWMKey*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Result'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Result);
 return 1;
}

/* set function: Result of class  TWMKey */
static int tolua_set_TWMKey_Result(lua_State* tolua_S)
{
  TWMKey* self = (TWMKey*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Result'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Result = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* method: new of class  TMessage */
static int tolua_z_VCL_TMessage_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TMessage",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TMessage* tolua_ret = (TMessage*)  new TMessage();

/* getting type */
  char* lua_type = "TMessage";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TMessage */
static int tolua_z_VCL_TMessage_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TMessage",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TMessage* tolua_ret = (TMessage*)  new TMessage();

/* getting type */
  char* lua_type = "TMessage";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TMessage */
static int tolua_z_VCL_TMessage_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMessage",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMessage* self = (TMessage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* get function: WParamLo of class  TMessage */
static int tolua_get_TMessage_WParamLo(lua_State* tolua_S)
{
  TMessage* self = (TMessage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'WParamLo'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->WParamLo);
 return 1;
}

/* set function: WParamLo of class  TMessage */
static int tolua_set_TMessage_WParamLo(lua_State* tolua_S)
{
  TMessage* self = (TMessage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'WParamLo'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->WParamLo = ((Word)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: WParamHi of class  TMessage */
static int tolua_get_TMessage_WParamHi(lua_State* tolua_S)
{
  TMessage* self = (TMessage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'WParamHi'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->WParamHi);
 return 1;
}

/* set function: WParamHi of class  TMessage */
static int tolua_set_TMessage_WParamHi(lua_State* tolua_S)
{
  TMessage* self = (TMessage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'WParamHi'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->WParamHi = ((Word)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: LParamLo of class  TMessage */
static int tolua_get_TMessage_LParamLo(lua_State* tolua_S)
{
  TMessage* self = (TMessage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'LParamLo'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->LParamLo);
 return 1;
}

/* set function: LParamLo of class  TMessage */
static int tolua_set_TMessage_LParamLo(lua_State* tolua_S)
{
  TMessage* self = (TMessage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'LParamLo'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->LParamLo = ((Word)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: LParamHi of class  TMessage */
static int tolua_get_TMessage_LParamHi(lua_State* tolua_S)
{
  TMessage* self = (TMessage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'LParamHi'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->LParamHi);
 return 1;
}

/* set function: LParamHi of class  TMessage */
static int tolua_set_TMessage_LParamHi(lua_State* tolua_S)
{
  TMessage* self = (TMessage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'LParamHi'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->LParamHi = ((Word)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: ResultLo of class  TMessage */
static int tolua_get_TMessage_ResultLo(lua_State* tolua_S)
{
  TMessage* self = (TMessage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ResultLo'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ResultLo);
 return 1;
}

/* set function: ResultLo of class  TMessage */
static int tolua_set_TMessage_ResultLo(lua_State* tolua_S)
{
  TMessage* self = (TMessage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ResultLo'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ResultLo = ((Word)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: ResultHi of class  TMessage */
static int tolua_get_TMessage_ResultHi(lua_State* tolua_S)
{
  TMessage* self = (TMessage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ResultHi'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ResultHi);
 return 1;
}

/* set function: ResultHi of class  TMessage */
static int tolua_set_TMessage_ResultHi(lua_State* tolua_S)
{
  TMessage* self = (TMessage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ResultHi'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ResultHi = ((Word)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: WParam of class  TMessage */
static int tolua_get_TMessage_WParam(lua_State* tolua_S)
{
  TMessage* self = (TMessage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'WParam'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->WParam);
 return 1;
}

/* set function: WParam of class  TMessage */
static int tolua_set_TMessage_WParam(lua_State* tolua_S)
{
  TMessage* self = (TMessage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'WParam'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->WParam = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: LParam of class  TMessage */
static int tolua_get_TMessage_LParam(lua_State* tolua_S)
{
  TMessage* self = (TMessage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'LParam'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->LParam);
 return 1;
}

/* set function: LParam of class  TMessage */
static int tolua_set_TMessage_LParam(lua_State* tolua_S)
{
  TMessage* self = (TMessage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'LParam'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->LParam = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Result of class  TMessage */
static int tolua_get_TMessage_Result(lua_State* tolua_S)
{
  TMessage* self = (TMessage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Result'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Result);
 return 1;
}

/* set function: Result of class  TMessage */
static int tolua_set_TMessage_Result(lua_State* tolua_S)
{
  TMessage* self = (TMessage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Result'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Result = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* method: new of class  RECT */
static int tolua_z_VCL_RECT_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"RECT",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   RECT* tolua_ret = (RECT*)  new RECT();

/* getting type */
  char* lua_type = "RECT";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  RECT */
static int tolua_z_VCL_RECT_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"RECT",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   RECT* tolua_ret = (RECT*)  new RECT();

/* getting type */
  char* lua_type = "RECT";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  RECT */
static int tolua_z_VCL_RECT_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RECT",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RECT* self = (RECT*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* get function: left of class  RECT */
static int tolua_get_RECT_left(lua_State* tolua_S)
{
  RECT* self = (RECT*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'left'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->left);
 return 1;
}

/* set function: left of class  RECT */
static int tolua_set_RECT_left(lua_State* tolua_S)
{
  RECT* self = (RECT*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'left'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->left = ((  long)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: top of class  RECT */
static int tolua_get_RECT_top(lua_State* tolua_S)
{
  RECT* self = (RECT*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'top'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->top);
 return 1;
}

/* set function: top of class  RECT */
static int tolua_set_RECT_top(lua_State* tolua_S)
{
  RECT* self = (RECT*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'top'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->top = ((  long)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: right of class  RECT */
static int tolua_get_RECT_right(lua_State* tolua_S)
{
  RECT* self = (RECT*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'right'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->right);
 return 1;
}

/* set function: right of class  RECT */
static int tolua_set_RECT_right(lua_State* tolua_S)
{
  RECT* self = (RECT*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'right'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->right = ((  long)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: bottom of class  RECT */
static int tolua_get_RECT_bottom(lua_State* tolua_S)
{
  RECT* self = (RECT*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'bottom'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->bottom);
 return 1;
}

/* set function: bottom of class  RECT */
static int tolua_set_RECT_bottom(lua_State* tolua_S)
{
  RECT* self = (RECT*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'bottom'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->bottom = ((  long)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* method: new of class  POINT */
static int tolua_z_VCL_POINT_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"POINT",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   POINT* tolua_ret = (POINT*)  new POINT();

/* getting type */
  char* lua_type = "POINT";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  POINT */
static int tolua_z_VCL_POINT_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"POINT",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   POINT* tolua_ret = (POINT*)  new POINT();

/* getting type */
  char* lua_type = "POINT";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  POINT */
static int tolua_z_VCL_POINT_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"POINT",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  POINT* self = (POINT*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* get function: x of class  POINT */
static int tolua_get_POINT_x(lua_State* tolua_S)
{
  POINT* self = (POINT*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'x'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->x);
 return 1;
}

/* set function: x of class  POINT */
static int tolua_set_POINT_x(lua_State* tolua_S)
{
  POINT* self = (POINT*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'x'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->x = ((  long)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: y of class  POINT */
static int tolua_get_POINT_y(lua_State* tolua_S)
{
  POINT* self = (POINT*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'y'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->y);
 return 1;
}

/* set function: y of class  POINT */
static int tolua_set_POINT_y(lua_State* tolua_S)
{
  POINT* self = (POINT*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'y'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->y = ((  long)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* method: new of class  TPoint */
static int tolua_z_VCL_TPoint_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TPoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TPoint* tolua_ret = (TPoint*)  new TPoint();

/* getting type */
  char* lua_type = "TPoint";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TPoint */
static int tolua_z_VCL_TPoint_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TPoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TPoint* tolua_ret = (TPoint*)  new TPoint();

/* getting type */
  char* lua_type = "TPoint";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TPoint */
static int tolua_z_VCL_TPoint_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TPoint",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  int _x = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int _y = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   TPoint* tolua_ret = (TPoint*)  new TPoint(_x,_y);

/* getting type */
  char* lua_type = "TPoint";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_TPoint_new00(tolua_S);
}

/* method: new_local of class  TPoint */
static int tolua_z_VCL_TPoint_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TPoint",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  int _x = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int _y = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   TPoint* tolua_ret = (TPoint*)  new TPoint(_x,_y);

/* getting type */
  char* lua_type = "TPoint";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_TPoint_new00_local(tolua_S);
}

/* method: new of class  TPoint */
static int tolua_z_VCL_TPoint_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TPoint",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"POINT",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  POINT* pt = ((POINT*)  tolua_tousertype(tolua_S,2,0));
  {
   TPoint* tolua_ret = (TPoint*)  new TPoint(*pt);

/* getting type */
  char* lua_type = "TPoint";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_TPoint_new01(tolua_S);
}

/* method: new_local of class  TPoint */
static int tolua_z_VCL_TPoint_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TPoint",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"POINT",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  POINT* pt = ((POINT*)  tolua_tousertype(tolua_S,2,0));
  {
   TPoint* tolua_ret = (TPoint*)  new TPoint(*pt);

/* getting type */
  char* lua_type = "TPoint";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_TPoint_new01_local(tolua_S);
}

/* method: delete of class  TPoint */
static int tolua_z_VCL_TPoint_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TPoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TPoint* self = (TPoint*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TRect */
static int tolua_z_VCL_TRect_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TRect* tolua_ret = (TRect*)  new TRect();

/* getting type */
  char* lua_type = "TRect";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TRect */
static int tolua_z_VCL_TRect_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TRect* tolua_ret = (TRect*)  new TRect();

/* getting type */
  char* lua_type = "TRect";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TRect */
static int tolua_z_VCL_TRect_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TRect* self = (TRect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TRect */
static int tolua_z_VCL_TRect_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TRect",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TPoint",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"const TPoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  const TPoint* TL = ((const TPoint*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  const TPoint* BR = ((const TPoint*)  tolua_tousertype(tolua_S,3,0));
  {
   TRect* tolua_ret = (TRect*)  new TRect(*TL,*BR);

/* getting type */
  char* lua_type = "TRect";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_TRect_new00(tolua_S);
}

/* method: new_local of class  TRect */
static int tolua_z_VCL_TRect_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TRect",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TPoint",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"const TPoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  const TPoint* TL = ((const TPoint*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  const TPoint* BR = ((const TPoint*)  tolua_tousertype(tolua_S,3,0));
  {
   TRect* tolua_ret = (TRect*)  new TRect(*TL,*BR);

/* getting type */
  char* lua_type = "TRect";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_TRect_new00_local(tolua_S);
}

/* method: new of class  TRect */
static int tolua_z_VCL_TRect_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TRect",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  int l = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int t = ((int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  int r = ((int)  tolua_tonumber(tolua_S,4,0));
/*declare*/
  int b = ((int)  tolua_tonumber(tolua_S,5,0));
  {
   TRect* tolua_ret = (TRect*)  new TRect(l,t,r,b);

/* getting type */
  char* lua_type = "TRect";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_TRect_new01(tolua_S);
}

/* method: new_local of class  TRect */
static int tolua_z_VCL_TRect_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TRect",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  int l = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int t = ((int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  int r = ((int)  tolua_tonumber(tolua_S,4,0));
/*declare*/
  int b = ((int)  tolua_tonumber(tolua_S,5,0));
  {
   TRect* tolua_ret = (TRect*)  new TRect(l,t,r,b);

/* getting type */
  char* lua_type = "TRect";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_TRect_new01_local(tolua_S);
}

/* method: new of class  TRect */
static int tolua_z_VCL_TRect_new03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TRect",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"RECT",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  RECT* r = ((RECT*)  tolua_tousertype(tolua_S,2,0));
  {
   TRect* tolua_ret = (TRect*)  new TRect(*r);

/* getting type */
  char* lua_type = "TRect";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_TRect_new02(tolua_S);
}

/* method: new_local of class  TRect */
static int tolua_z_VCL_TRect_new03_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TRect",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"RECT",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  RECT* r = ((RECT*)  tolua_tousertype(tolua_S,2,0));
  {
   TRect* tolua_ret = (TRect*)  new TRect(*r);

/* getting type */
  char* lua_type = "TRect";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_TRect_new02_local(tolua_S);
}

/* method: Width of class  TRect */
static int tolua_z_VCL_TRect_Width00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const TRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const TRect* self = (const TRect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Width'",NULL);
#endif
  {
   int tolua_ret = (int)  self->Width();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Width'.",&tolua_err);
 return 0;
#endif
}

/* method: Height of class  TRect */
static int tolua_z_VCL_TRect_Height00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const TRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const TRect* self = (const TRect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Height'",NULL);
#endif
  {
   int tolua_ret = (int)  self->Height();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Height'.",&tolua_err);
 return 0;
#endif
}

/* method: operator== of class  TRect */
static int tolua_z_VCL_TRect__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const TRect",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const TRect* self = (const TRect*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TRect* rc = ((const TRect*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*rc);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}

/* get function: Left of class  TRect */
static int tolua_get_TRect_Left(lua_State* tolua_S)
{
  TRect* self = (TRect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Left'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Left);
 return 1;
}

/* set function: Left of class  TRect */
static int tolua_set_TRect_Left(lua_State* tolua_S)
{
  TRect* self = (TRect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Left'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Left = ((  long)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Top of class  TRect */
static int tolua_get_TRect_Top(lua_State* tolua_S)
{
  TRect* self = (TRect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Top'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Top);
 return 1;
}

/* set function: Top of class  TRect */
static int tolua_set_TRect_Top(lua_State* tolua_S)
{
  TRect* self = (TRect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Top'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Top = ((  long)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Right of class  TRect */
static int tolua_get_TRect_Right(lua_State* tolua_S)
{
  TRect* self = (TRect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Right'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Right);
 return 1;
}

/* set function: Right of class  TRect */
static int tolua_set_TRect_Right(lua_State* tolua_S)
{
  TRect* self = (TRect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Right'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Right = ((  long)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Bottom of class  TRect */
static int tolua_get_TRect_Bottom(lua_State* tolua_S)
{
  TRect* self = (TRect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Bottom'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Bottom);
 return 1;
}

/* set function: Bottom of class  TRect */
static int tolua_set_TRect_Bottom(lua_State* tolua_S)
{
  TRect* self = (TRect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Bottom'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Bottom = ((  long)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* method: new of class  TMetaClass */
static int tolua_z_VCL_TMetaClass_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TMetaClass",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TMetaClass* tolua_ret = (TMetaClass*)  new TMetaClass();

/* getting type */
  char* lua_type = "TMetaClass";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TMetaClass */
static int tolua_z_VCL_TMetaClass_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TMetaClass",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TMetaClass* tolua_ret = (TMetaClass*)  new TMetaClass();

/* getting type */
  char* lua_type = "TMetaClass";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TMetaClass */
static int tolua_z_VCL_TMetaClass_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMetaClass",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMetaClass* self = (TMetaClass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TObject */
static int tolua_z_VCL_TObject_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TObject* tolua_ret = (TObject*)  new TObject();

/* getting type */
  char* lua_type = "TObject";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TObject */
static int tolua_z_VCL_TObject_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TObject* tolua_ret = (TObject*)  new TObject();

/* getting type */
  char* lua_type = "TObject";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TObject */
static int tolua_z_VCL_TObject_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TObject* self = (TObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TChangeLink */
static int tolua_z_VCL_TChangeLink_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TChangeLink",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TChangeLink* self = (TChangeLink*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: Change of class  TChangeLink */
static int tolua_z_VCL_TChangeLink_Change00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TChangeLink",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TChangeLink* self = (TChangeLink*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Change'",NULL);
#endif
  {
   self->Change();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Change'.",&tolua_err);
 return 0;
#endif
}

/* get function: Sender of class  TChangeLink */
static int tolua_get_TChangeLink_Sender_ptr(lua_State* tolua_S)
{
  TChangeLink* self = (TChangeLink*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Sender'",NULL);
#endif

/* getting type */
  char* lua_type = "TCustomImageList";
   tolua_pushusertype(tolua_S,(void*)(self->Sender),lua_type);
 return 1;
}

/* set function: Sender of class  TChangeLink */
static int tolua_set_TChangeLink_Sender_ptr(lua_State* tolua_S)
{
  TChangeLink* self = (TChangeLink*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Sender'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TCustomImageList",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Sender = ((TCustomImageList*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* method: new of class  TChangeLink */
static int tolua_z_VCL_TChangeLink_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TChangeLink",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TChangeLink* tolua_ret = (TChangeLink*)  new TChangeLink();

/* getting type */
  char* lua_type = "TChangeLink";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TChangeLink */
static int tolua_z_VCL_TChangeLink_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TChangeLink",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TChangeLink* tolua_ret = (TChangeLink*)  new TChangeLink();

/* getting type */
  char* lua_type = "TChangeLink";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: operator[] of class  TList */
static int tolua_z_VCL_TList__geti00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TList* self = (TList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator[]'",NULL);
#endif
  {
   void* tolua_ret = (void*)  self->operator[](Index);
   tolua_pushuserdata(tolua_S,(void*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.geti'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TList */
static int tolua_z_VCL_TList_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TList",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TList* self = (TList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: Add of class  TList */
static int tolua_z_VCL_TList_Add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TList",0,&tolua_err) ||
     !tolua_isuserdata(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TList* self = (TList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  void* Item = ((void*)  tolua_touserdata(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Add'",NULL);
#endif
  {
   int tolua_ret = (int)  self->Add(Item);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Add'.",&tolua_err);
 return 0;
#endif
}

/* method: Clear of class  TList */
static int tolua_z_VCL_TList_Clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TList",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TList* self = (TList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Clear'",NULL);
#endif
  {
   self->Clear();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clear'.",&tolua_err);
 return 0;
#endif
}

/* method: Delete of class  TList */
static int tolua_z_VCL_TList_Delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TList* self = (TList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Delete'",NULL);
#endif
  {
   self->Delete(Index);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Delete'.",&tolua_err);
 return 0;
#endif
}

/* method: Error of class  TList */
static int tolua_z_VCL_TList_Error00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TList",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TMetaClass",0,&tolua_err) ||
     !tolua_isansi(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TList* self = (TList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TMetaClass* vmt = ((TMetaClass*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  const AnsiString Msg = ((const AnsiString)  tolua_toansi(tolua_S,3,0));
/*declare*/
  int Data = ((int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Error'",NULL);
#endif
  {
   self->Error(vmt,Msg,Data);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Error'.",&tolua_err);
 return 0;
#endif
}

/* method: Error of class  TList */
static int tolua_z_VCL_TList_Error01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TList",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TMetaClass",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"PResStringRec",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  TList* self = (TList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TMetaClass* vmt = ((TMetaClass*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  PResStringRec Msg = *((PResStringRec*)  tolua_tousertype(tolua_S,3,0));
/*declare*/
  int Data = ((int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Error'",NULL);
#endif
  {
   self->Error(vmt,Msg,Data);
  }
 }
 return 0;
tolua_lerror:
 return tolua_z_VCL_TList_Error00(tolua_S);
}

/* method: Exchange of class  TList */
static int tolua_z_VCL_TList_Exchange00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TList* self = (TList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index1 = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int Index2 = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Exchange'",NULL);
#endif
  {
   self->Exchange(Index1,Index2);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Exchange'.",&tolua_err);
 return 0;
#endif
}

/* method: Extract of class  TList */
static int tolua_z_VCL_TList_Extract00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TList",0,&tolua_err) ||
     !tolua_isuserdata(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TList* self = (TList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  void* Item = ((void*)  tolua_touserdata(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Extract'",NULL);
#endif
  {
   void* tolua_ret = (void*)  self->Extract(Item);
   tolua_pushuserdata(tolua_S,(void*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Extract'.",&tolua_err);
 return 0;
#endif
}

/* method: First of class  TList */
static int tolua_z_VCL_TList_First00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TList",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TList* self = (TList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'First'",NULL);
#endif
  {
   void* tolua_ret = (void*)  self->First();
   tolua_pushuserdata(tolua_S,(void*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'First'.",&tolua_err);
 return 0;
#endif
}

/* method: IndexOf of class  TList */
static int tolua_z_VCL_TList_IndexOf00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TList",0,&tolua_err) ||
     !tolua_isuserdata(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TList* self = (TList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  void* Item = ((void*)  tolua_touserdata(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IndexOf'",NULL);
#endif
  {
   int tolua_ret = (int)  self->IndexOf(Item);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IndexOf'.",&tolua_err);
 return 0;
#endif
}

/* method: Insert of class  TList */
static int tolua_z_VCL_TList_Insert00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isuserdata(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TList* self = (TList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  void* Item = ((void*)  tolua_touserdata(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Insert'",NULL);
#endif
  {
   self->Insert(Index,Item);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Insert'.",&tolua_err);
 return 0;
#endif
}

/* method: Last of class  TList */
static int tolua_z_VCL_TList_Last00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TList",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TList* self = (TList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Last'",NULL);
#endif
  {
   void* tolua_ret = (void*)  self->Last();
   tolua_pushuserdata(tolua_S,(void*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Last'.",&tolua_err);
 return 0;
#endif
}

/* method: Move of class  TList */
static int tolua_z_VCL_TList_Move00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TList* self = (TList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int CurIndex = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int NewIndex = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Move'",NULL);
#endif
  {
   self->Move(CurIndex,NewIndex);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Move'.",&tolua_err);
 return 0;
#endif
}

/* method: Remove of class  TList */
static int tolua_z_VCL_TList_Remove00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TList",0,&tolua_err) ||
     !tolua_isuserdata(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TList* self = (TList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  void* Item = ((void*)  tolua_touserdata(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Remove'",NULL);
#endif
  {
   int tolua_ret = (int)  self->Remove(Item);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Remove'.",&tolua_err);
 return 0;
#endif
}

/* method: Pack of class  TList */
static int tolua_z_VCL_TList_Pack00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TList",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TList* self = (TList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Pack'",NULL);
#endif
  {
   self->Pack();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Pack'.",&tolua_err);
 return 0;
#endif
}

/* method: Sort of class  TList */
static int tolua_z_VCL_TList_Sort00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TList",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TListSortCompare",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TList* self = (TList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TListSortCompare Compare = *((TListSortCompare*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Sort'",NULL);
#endif
  {
   self->Sort(Compare);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Sort'.",&tolua_err);
 return 0;
#endif
}

/* get function: Capacity of class  TList */
static int tolua_get_TList_Capacity(lua_State* tolua_S)
{
  TList* self = (TList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Capacity'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Capacity);
 return 1;
}

/* set function: Capacity of class  TList */
static int tolua_set_TList_Capacity(lua_State* tolua_S)
{
  TList* self = (TList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Capacity'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Capacity = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Count of class  TList */
static int tolua_get_TList_Count(lua_State* tolua_S)
{
  TList* self = (TList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Count'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Count);
 return 1;
}

/* set function: Count of class  TList */
static int tolua_set_TList_Count(lua_State* tolua_S)
{
  TList* self = (TList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Count'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Count = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Items of class  TList */
static int tolua_get_z_VCL_TList_Items(lua_State* tolua_S)
{
 int tolua_index;
  TList* self;
 lua_pushstring(tolua_S,".self");
 lua_rawget(tolua_S,1);
 self = (TList*)  lua_touserdata(tolua_S,-1);
 tolua_index = (int)tolua_tonumber(tolua_S,2,0);
 tolua_pushuserdata(tolua_S,(void*)self->Items[tolua_index]);
 return 1;
}

/* set function: Items of class  TList */
static int tolua_set_z_VCL_TList_Items(lua_State* tolua_S)
{
 int tolua_index;
  TList* self;
 lua_pushstring(tolua_S,".self");
 lua_rawget(tolua_S,1);
 self = (TList*)  lua_touserdata(tolua_S,-1);
 tolua_index = (int)tolua_tonumber(tolua_S,2,0);
  self->Items[tolua_index] = ((void*)  tolua_touserdata(tolua_S,3,0));
 return 0;
}

/* method: new of class  TList */
static int tolua_z_VCL_TList_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TList",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TList* tolua_ret = (TList*)  new TList();

/* getting type */
  char* lua_type = "TList";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TList */
static int tolua_z_VCL_TList_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TList",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TList* tolua_ret = (TList*)  new TList();

/* getting type */
  char* lua_type = "TList";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TStream */
static int tolua_z_VCL_TStream_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TStream* tolua_ret = (TStream*)NULL;//  new TStream();

/* getting type */
  char* lua_type = "TStream";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TStream */
static int tolua_z_VCL_TStream_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TStream* tolua_ret = (TStream*)NULL;//  new TStream();

/* getting type */
  char* lua_type = "TStream";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TStream */
static int tolua_z_VCL_TStream_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStream* self = (TStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: Read of class  TStream */
static int tolua_z_VCL_TStream_Read00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStream",0,&tolua_err) ||
     !tolua_isuserdata(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStream* self = (TStream*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  void* Buffer = ((void*)  tolua_touserdata(tolua_S,2,0));
/*declare*/
  int Count = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Read'",NULL);
#endif
  {
   int tolua_ret = (int)  self->Read(Buffer,Count);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Read'.",&tolua_err);
 return 0;
#endif
}

/* method: Write of class  TStream */
static int tolua_z_VCL_TStream_Write00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStream",0,&tolua_err) ||
     !tolua_isuserdata(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStream* self = (TStream*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const void* Buffer = ((const void*)  tolua_touserdata(tolua_S,2,0));
/*declare*/
  int Count = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Write'",NULL);
#endif
  {
   int tolua_ret = (int)  self->Write(Buffer,Count);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Write'.",&tolua_err);
 return 0;
#endif
}

/* method: Seek of class  TStream */
static int tolua_z_VCL_TStream_Seek00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStream",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStream* self = (TStream*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Offset = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  Word Origin = ((Word)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Seek'",NULL);
#endif
  {
   int tolua_ret = (int)  self->Seek(Offset,Origin);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Seek'.",&tolua_err);
 return 0;
#endif
}

/* method: Seek of class  TStream */
static int tolua_z_VCL_TStream_Seek01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStream",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  TStream* self = (TStream*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const __int64 Offset = ((const __int64)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  TSeekOrigin Origin = ((TSeekOrigin) (int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Seek'",NULL);
#endif
  {
   __int64 tolua_ret = (__int64)  self->Seek(Offset,Origin);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_TStream_Seek00(tolua_S);
}

/* method: ReadBuffer of class  TStream */
static int tolua_z_VCL_TStream_ReadBuffer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStream",0,&tolua_err) ||
     !tolua_isuserdata(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStream* self = (TStream*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  void* Buffer = ((void*)  tolua_touserdata(tolua_S,2,0));
/*declare*/
  int Count = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReadBuffer'",NULL);
#endif
  {
   self->ReadBuffer(Buffer,Count);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadBuffer'.",&tolua_err);
 return 0;
#endif
}

/* method: WriteBuffer of class  TStream */
static int tolua_z_VCL_TStream_WriteBuffer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStream",0,&tolua_err) ||
     !tolua_isuserdata(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStream* self = (TStream*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const void* Buffer = ((const void*)  tolua_touserdata(tolua_S,2,0));
/*declare*/
  int Count = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WriteBuffer'",NULL);
#endif
  {
   self->WriteBuffer(Buffer,Count);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteBuffer'.",&tolua_err);
 return 0;
#endif
}

/* method: CopyFrom of class  TStream */
static int tolua_z_VCL_TStream_CopyFrom00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStream",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TStream",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStream* self = (TStream*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TStream* Source = ((TStream*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  __int64 Count = ((__int64)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'CopyFrom'",NULL);
#endif
  {
   __int64 tolua_ret = (__int64)  self->CopyFrom(Source,Count);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CopyFrom'.",&tolua_err);
 return 0;
#endif
}

/* method: ReadComponent of class  TStream */
static int tolua_z_VCL_TStream_ReadComponent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStream",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStream* self = (TStream*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TComponent* Instance = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReadComponent'",NULL);
#endif
  {
   TComponent* tolua_ret = (TComponent*)  self->ReadComponent(Instance);

/* getting type */
  char* lua_type = "TComponent";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadComponent'.",&tolua_err);
 return 0;
#endif
}

/* method: ReadComponentRes of class  TStream */
static int tolua_z_VCL_TStream_ReadComponentRes00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStream",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStream* self = (TStream*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TComponent* Instance = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReadComponentRes'",NULL);
#endif
  {
   TComponent* tolua_ret = (TComponent*)  self->ReadComponentRes(Instance);

/* getting type */
  char* lua_type = "TComponent";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadComponentRes'.",&tolua_err);
 return 0;
#endif
}

/* method: WriteComponent of class  TStream */
static int tolua_z_VCL_TStream_WriteComponent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStream",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStream* self = (TStream*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TComponent* Instance = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WriteComponent'",NULL);
#endif
  {
   self->WriteComponent(Instance);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteComponent'.",&tolua_err);
 return 0;
#endif
}

/* method: WriteComponentRes of class  TStream */
static int tolua_z_VCL_TStream_WriteComponentRes00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStream",0,&tolua_err) ||
     !tolua_isansi(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStream* self = (TStream*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const AnsiString ResName = ((const AnsiString)  tolua_toansi(tolua_S,2,0));
/*declare*/
  TComponent* Instance = ((TComponent*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WriteComponentRes'",NULL);
#endif
  {
   self->WriteComponentRes(ResName,Instance);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteComponentRes'.",&tolua_err);
 return 0;
#endif
}

/* method: WriteDescendent of class  TStream */
static int tolua_z_VCL_TStream_WriteDescendent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStream",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStream* self = (TStream*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TComponent* Instance = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  TComponent* Ancestor = ((TComponent*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WriteDescendent'",NULL);
#endif
  {
   self->WriteDescendent(Instance,Ancestor);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteDescendent'.",&tolua_err);
 return 0;
#endif
}

/* method: WriteDescendentRes of class  TStream */
static int tolua_z_VCL_TStream_WriteDescendentRes00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStream",0,&tolua_err) ||
     !tolua_isansi(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"TComponent",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,4,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStream* self = (TStream*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const AnsiString ResName = ((const AnsiString)  tolua_toansi(tolua_S,2,0));
/*declare*/
  TComponent* Instance = ((TComponent*)  tolua_tousertype(tolua_S,3,0));
/*declare*/
  TComponent* Ancestor = ((TComponent*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WriteDescendentRes'",NULL);
#endif
  {
   self->WriteDescendentRes(ResName,Instance,Ancestor);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteDescendentRes'.",&tolua_err);
 return 0;
#endif
}

/* method: WriteResourceHeader of class  TStream */
static int tolua_z_VCL_TStream_WriteResourceHeader00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStream",0,&tolua_err) ||
     !tolua_isansi(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStream* self = (TStream*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const AnsiString ResName = ((const AnsiString)  tolua_toansi(tolua_S,2,0));
/*declare*/
  int FixupInfo = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WriteResourceHeader'",NULL);
#endif
  {
   self->WriteResourceHeader(ResName,FixupInfo);
   tolua_pushnumber(tolua_S,(lua_Number)FixupInfo);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WriteResourceHeader'.",&tolua_err);
 return 0;
#endif
}

/* method: FixupResourceHeader of class  TStream */
static int tolua_z_VCL_TStream_FixupResourceHeader00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStream",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStream* self = (TStream*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int FixupInfo = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'FixupResourceHeader'",NULL);
#endif
  {
   self->FixupResourceHeader(FixupInfo);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'FixupResourceHeader'.",&tolua_err);
 return 0;
#endif
}

/* method: ReadResHeader of class  TStream */
static int tolua_z_VCL_TStream_ReadResHeader00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStream* self = (TStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReadResHeader'",NULL);
#endif
  {
   self->ReadResHeader();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReadResHeader'.",&tolua_err);
 return 0;
#endif
}

/* get function: Position of class  TStream */
static int tolua_get_TStream_Position(lua_State* tolua_S)
{
  TStream* self = (TStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Position'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Position);
 return 1;
}

/* set function: Position of class  TStream */
static int tolua_set_TStream_Position(lua_State* tolua_S)
{
  TStream* self = (TStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Position'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Position = ((__int64)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Size of class  TStream */
static int tolua_get_TStream_Size(lua_State* tolua_S)
{
  TStream* self = (TStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Size'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Size);
 return 1;
}

/* set function: Size of class  TStream */
static int tolua_set_TStream_Size(lua_State* tolua_S)
{
  TStream* self = (TStream*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Size'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Size = ((__int64)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* method: Assign of class  TDragObject */
static int tolua_z_VCL_TDragObject_Assign00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TDragObject",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TDragObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TDragObject* self = (TDragObject*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TDragObject* Source = ((TDragObject*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Assign'",NULL);
#endif
  {
   self->Assign(Source);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Assign'.",&tolua_err);
 return 0;
#endif
}

/* method: GetName of class  TDragObject */
static int tolua_z_VCL_TDragObject_GetName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TDragObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TDragObject* self = (TDragObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetName'",NULL);
#endif
  {
   AnsiString tolua_ret = (AnsiString)  self->GetName();
   tolua_pushansi(tolua_S,(const AnsiString&)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetName'.",&tolua_err);
 return 0;
#endif
}

/* method: HideDragImage of class  TDragObject */
static int tolua_z_VCL_TDragObject_HideDragImage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TDragObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TDragObject* self = (TDragObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'HideDragImage'",NULL);
#endif
  {
   self->HideDragImage();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'HideDragImage'.",&tolua_err);
 return 0;
#endif
}

/* method: Instance of class  TDragObject */
static int tolua_z_VCL_TDragObject_Instance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TDragObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TDragObject* self = (TDragObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Instance'",NULL);
#endif
  {
   unsigned tolua_ret = (unsigned)  self->Instance();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Instance'.",&tolua_err);
 return 0;
#endif
}

/* method: ShowDragImage of class  TDragObject */
static int tolua_z_VCL_TDragObject_ShowDragImage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TDragObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TDragObject* self = (TDragObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ShowDragImage'",NULL);
#endif
  {
   self->ShowDragImage();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ShowDragImage'.",&tolua_err);
 return 0;
#endif
}

/* get function: Cancelling of class  TDragObject */
static int tolua_get_TDragObject_Cancelling(lua_State* tolua_S)
{
  TDragObject* self = (TDragObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Cancelling'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Cancelling);
 return 1;
}

/* set function: Cancelling of class  TDragObject */
static int tolua_set_TDragObject_Cancelling(lua_State* tolua_S)
{
  TDragObject* self = (TDragObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Cancelling'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Cancelling = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: DragPos of class  TDragObject */
static int tolua_get_TDragObject_DragPos(lua_State* tolua_S)
{
  TDragObject* self = (TDragObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragPos'",NULL);
#endif

/* getting type */
  char* lua_type = "TPoint";
   tolua_pushusertype(tolua_S,(void*)(&(self->DragPos)),lua_type);
 return 1;
}

/* set function: DragPos of class  TDragObject */
static int tolua_set_TDragObject_DragPos(lua_State* tolua_S)
{
  TDragObject* self = (TDragObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragPos'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TPoint",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragPos = *((TPoint*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: DragTargetPos of class  TDragObject */
static int tolua_get_TDragObject_DragTargetPos(lua_State* tolua_S)
{
  TDragObject* self = (TDragObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragTargetPos'",NULL);
#endif

/* getting type */
  char* lua_type = "TPoint";
   tolua_pushusertype(tolua_S,(void*)(&(self->DragTargetPos)),lua_type);
 return 1;
}

/* set function: DragTargetPos of class  TDragObject */
static int tolua_set_TDragObject_DragTargetPos(lua_State* tolua_S)
{
  TDragObject* self = (TDragObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragTargetPos'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TPoint",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragTargetPos = *((TPoint*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: DragTarget of class  TDragObject */
static int tolua_get_TDragObject_DragTarget(lua_State* tolua_S)
{
  TDragObject* self = (TDragObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragTarget'",NULL);
#endif
  tolua_pushuserdata(tolua_S,(void*)self->DragTarget);
 return 1;
}

/* set function: DragTarget of class  TDragObject */
static int tolua_set_TDragObject_DragTarget(lua_State* tolua_S)
{
  TDragObject* self = (TDragObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragTarget'",NULL);
  if (!tolua_isuserdata(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragTarget = ((void*)  tolua_touserdata(tolua_S,2,0));
 return 0;
}

/* get function: Dropped of class  TDragObject */
static int tolua_get_TDragObject_Dropped(lua_State* tolua_S)
{
  TDragObject* self = (TDragObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Dropped'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Dropped);
 return 1;
}

/* get function: MouseDeltaX of class  TDragObject */
static int tolua_get_TDragObject_MouseDeltaX(lua_State* tolua_S)
{
  TDragObject* self = (TDragObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MouseDeltaX'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->MouseDeltaX);
 return 1;
}

/* get function: MouseDeltaY of class  TDragObject */
static int tolua_get_TDragObject_MouseDeltaY(lua_State* tolua_S)
{
  TDragObject* self = (TDragObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MouseDeltaY'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->MouseDeltaY);
 return 1;
}

/* method: new of class  TDragObject */
static int tolua_z_VCL_TDragObject_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TDragObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TDragObject* tolua_ret = (TDragObject*)  new TDragObject();

/* getting type */
  char* lua_type = "TDragObject";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TDragObject */
static int tolua_z_VCL_TDragObject_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TDragObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TDragObject* tolua_ret = (TDragObject*)  new TDragObject();

/* getting type */
  char* lua_type = "TDragObject";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TDragObject */
static int tolua_z_VCL_TDragObject_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TDragObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TDragObject* self = (TDragObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* get function: Control of class  TBaseDragControlObject */
static int tolua_get_TBaseDragControlObject_Control_ptr(lua_State* tolua_S)
{
  TBaseDragControlObject* self = (TBaseDragControlObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Control'",NULL);
#endif

/* getting type */
  char* lua_type = "TControl";
   tolua_pushusertype(tolua_S,(void*)(self->Control),lua_type);
 return 1;
}

/* set function: Control of class  TBaseDragControlObject */
static int tolua_set_TBaseDragControlObject_Control_ptr(lua_State* tolua_S)
{
  TBaseDragControlObject* self = (TBaseDragControlObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Control'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TControl",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Control = ((TControl*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* method: new of class  TBaseDragControlObject */
static int tolua_z_VCL_TBaseDragControlObject_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TBaseDragControlObject",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TControl* AControl = ((TControl*)  tolua_tousertype(tolua_S,2,0));
  {
   TBaseDragControlObject* tolua_ret = (TBaseDragControlObject*)  new TBaseDragControlObject(AControl);

/* getting type */
  char* lua_type = "TBaseDragControlObject";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TBaseDragControlObject */
static int tolua_z_VCL_TBaseDragControlObject_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TBaseDragControlObject",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TControl* AControl = ((TControl*)  tolua_tousertype(tolua_S,2,0));
  {
   TBaseDragControlObject* tolua_ret = (TBaseDragControlObject*)  new TBaseDragControlObject(AControl);

/* getting type */
  char* lua_type = "TBaseDragControlObject";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: Assign of class  TBaseDragControlObject */
static int tolua_z_VCL_TBaseDragControlObject_Assign00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TBaseDragControlObject",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TDragObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TBaseDragControlObject* self = (TBaseDragControlObject*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TDragObject* Source = ((TDragObject*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Assign'",NULL);
#endif
  {
   self->Assign(Source);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Assign'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TBaseDragControlObject */
static int tolua_z_VCL_TBaseDragControlObject_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TBaseDragControlObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TBaseDragControlObject* self = (TBaseDragControlObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TDragDockObject */
static int tolua_z_VCL_TDragDockObject_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TDragDockObject",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TControl* AControl = ((TControl*)  tolua_tousertype(tolua_S,2,0));
  {
   TDragDockObject* tolua_ret = (TDragDockObject*)  new TDragDockObject(AControl);

/* getting type */
  char* lua_type = "TDragDockObject";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TDragDockObject */
static int tolua_z_VCL_TDragDockObject_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TDragDockObject",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TControl* AControl = ((TControl*)  tolua_tousertype(tolua_S,2,0));
  {
   TDragDockObject* tolua_ret = (TDragDockObject*)  new TDragDockObject(AControl);

/* getting type */
  char* lua_type = "TDragDockObject";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TDragDockObject */
static int tolua_z_VCL_TDragDockObject_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TDragDockObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TDragDockObject* self = (TDragDockObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: Assign of class  TDragDockObject */
static int tolua_z_VCL_TDragDockObject_Assign00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TDragDockObject",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TDragObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TDragDockObject* self = (TDragDockObject*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TDragObject* Source = ((TDragObject*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Assign'",NULL);
#endif
  {
   self->Assign(Source);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Assign'.",&tolua_err);
 return 0;
#endif
}

/* get function: Brush of class  TDragDockObject */
static int tolua_get_TDragDockObject_Brush_ptr(lua_State* tolua_S)
{
  TDragDockObject* self = (TDragDockObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Brush'",NULL);
#endif

/* getting type */
  char* lua_type = "TBrush";
   tolua_pushusertype(tolua_S,(void*)(self->Brush),lua_type);
 return 1;
}

/* set function: Brush of class  TDragDockObject */
static int tolua_set_TDragDockObject_Brush_ptr(lua_State* tolua_S)
{
  TDragDockObject* self = (TDragDockObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Brush'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TBrush",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Brush = ((TBrush*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: DockRect of class  TDragDockObject */
static int tolua_get_TDragDockObject_DockRect(lua_State* tolua_S)
{
  TDragDockObject* self = (TDragDockObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DockRect'",NULL);
#endif

/* getting type */
  char* lua_type = "TRect";
   tolua_pushusertype(tolua_S,(void*)(&(self->DockRect)),lua_type);
 return 1;
}

/* set function: DockRect of class  TDragDockObject */
static int tolua_set_TDragDockObject_DockRect(lua_State* tolua_S)
{
  TDragDockObject* self = (TDragDockObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DockRect'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TRect",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DockRect = *((TRect*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: DropAlign of class  TDragDockObject */
static int tolua_get_TDragDockObject_DropAlign(lua_State* tolua_S)
{
  TDragDockObject* self = (TDragDockObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DropAlign'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DropAlign);
 return 1;
}

/* get function: DropOnControl of class  TDragDockObject */
static int tolua_get_TDragDockObject_DropOnControl_ptr(lua_State* tolua_S)
{
  TDragDockObject* self = (TDragDockObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DropOnControl'",NULL);
#endif

/* getting type */
  char* lua_type = "TControl";
   tolua_pushusertype(tolua_S,(void*)(self->DropOnControl),lua_type);
 return 1;
}

/* get function: Floating of class  TDragDockObject */
static int tolua_get_TDragDockObject_Floating(lua_State* tolua_S)
{
  TDragDockObject* self = (TDragDockObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Floating'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Floating);
 return 1;
}

/* set function: Floating of class  TDragDockObject */
static int tolua_set_TDragDockObject_Floating(lua_State* tolua_S)
{
  TDragDockObject* self = (TDragDockObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Floating'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Floating = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: FrameWidth of class  TDragDockObject */
static int tolua_get_TDragDockObject_FrameWidth(lua_State* tolua_S)
{
  TDragDockObject* self = (TDragDockObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FrameWidth'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->FrameWidth);
 return 1;
}

/* get function: MonitorNum of class  TMonitor */
static int tolua_get_TMonitor_MonitorNum(lua_State* tolua_S)
{
  TMonitor* self = (TMonitor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MonitorNum'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->MonitorNum);
 return 1;
}

/* get function: Left of class  TMonitor */
static int tolua_get_TMonitor_Left(lua_State* tolua_S)
{
  TMonitor* self = (TMonitor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Left'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Left);
 return 1;
}

/* get function: Height of class  TMonitor */
static int tolua_get_TMonitor_Height(lua_State* tolua_S)
{
  TMonitor* self = (TMonitor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Height'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Height);
 return 1;
}

/* get function: Top of class  TMonitor */
static int tolua_get_TMonitor_Top(lua_State* tolua_S)
{
  TMonitor* self = (TMonitor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Top'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Top);
 return 1;
}

/* get function: Width of class  TMonitor */
static int tolua_get_TMonitor_Width(lua_State* tolua_S)
{
  TMonitor* self = (TMonitor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Width'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Width);
 return 1;
}

/* get function: BoundsRect of class  TMonitor */
static int tolua_get_TMonitor_BoundsRect(lua_State* tolua_S)
{
  TMonitor* self = (TMonitor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BoundsRect'",NULL);
#endif

/* getting type */
  char* lua_type = "TRect";
   tolua_pushusertype(tolua_S,(void*)(&(self->BoundsRect)),lua_type);
 return 1;
}

/* get function: WorkareaRect of class  TMonitor */
static int tolua_get_TMonitor_WorkareaRect(lua_State* tolua_S)
{
  TMonitor* self = (TMonitor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'WorkareaRect'",NULL);
#endif

/* getting type */
  char* lua_type = "TRect";
   tolua_pushusertype(tolua_S,(void*)(&(self->WorkareaRect)),lua_type);
 return 1;
}

/* get function: Primary of class  TMonitor */
static int tolua_get_TMonitor_Primary(lua_State* tolua_S)
{
  TMonitor* self = (TMonitor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Primary'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Primary);
 return 1;
}

/* method: new of class  TMonitor */
static int tolua_z_VCL_TMonitor_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TMonitor",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TMonitor* tolua_ret = (TMonitor*)  new TMonitor();

/* getting type */
  char* lua_type = "TMonitor";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TMonitor */
static int tolua_z_VCL_TMonitor_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TMonitor",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TMonitor* tolua_ret = (TMonitor*)  new TMonitor();

/* getting type */
  char* lua_type = "TMonitor";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TMonitor */
static int tolua_z_VCL_TMonitor_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMonitor",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMonitor* self = (TMonitor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TBasicActionLink */
static int tolua_z_VCL_TBasicActionLink_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TBasicActionLink",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TObject* AClient = ((TObject*)  tolua_tousertype(tolua_S,2,0));
  {
   TBasicActionLink* tolua_ret = (TBasicActionLink*)  new TBasicActionLink(AClient);

/* getting type */
  char* lua_type = "TBasicActionLink";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TBasicActionLink */
static int tolua_z_VCL_TBasicActionLink_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TBasicActionLink",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TObject* AClient = ((TObject*)  tolua_tousertype(tolua_S,2,0));
  {
   TBasicActionLink* tolua_ret = (TBasicActionLink*)  new TBasicActionLink(AClient);

/* getting type */
  char* lua_type = "TBasicActionLink";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TBasicActionLink */
static int tolua_z_VCL_TBasicActionLink_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TBasicActionLink",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TBasicActionLink* self = (TBasicActionLink*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: Execute of class  TBasicActionLink */
static int tolua_z_VCL_TBasicActionLink_Execute00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TBasicActionLink",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TBasicActionLink* self = (TBasicActionLink*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TComponent* AComponent = ((TComponent*)  tolua_tousertype(tolua_S,2,(TComponent*)(0x0)));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Execute'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Execute(AComponent);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Execute'.",&tolua_err);
 return 0;
#endif
}

/* method: Update of class  TBasicActionLink */
static int tolua_z_VCL_TBasicActionLink_Update00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TBasicActionLink",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TBasicActionLink* self = (TBasicActionLink*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Update'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Update();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Update'.",&tolua_err);
 return 0;
#endif
}

/* get function: Action of class  TBasicActionLink */
static int tolua_get_TBasicActionLink_Action_ptr(lua_State* tolua_S)
{
  TBasicActionLink* self = (TBasicActionLink*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Action'",NULL);
#endif

/* getting type */
  char* lua_type = "TBasicAction";
   tolua_pushusertype(tolua_S,(void*)(self->Action),lua_type);
 return 1;
}

/* set function: Action of class  TBasicActionLink */
static int tolua_set_TBasicActionLink_Action_ptr(lua_State* tolua_S)
{
  TBasicActionLink* self = (TBasicActionLink*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Action'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TBasicAction",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Action = ((TBasicAction*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* method: new of class  TPersistent */
static int tolua_z_VCL_TPersistent_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TPersistent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TPersistent* tolua_ret = (TPersistent*)  new TPersistent();

/* getting type */
  char* lua_type = "TPersistent";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TPersistent */
static int tolua_z_VCL_TPersistent_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TPersistent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TPersistent* tolua_ret = (TPersistent*)  new TPersistent();

/* getting type */
  char* lua_type = "TPersistent";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TPersistent */
static int tolua_z_VCL_TPersistent_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TPersistent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TPersistent* self = (TPersistent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: Assign of class  TPersistent */
static int tolua_z_VCL_TPersistent_Assign00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TPersistent",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TPersistent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TPersistent* self = (TPersistent*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TPersistent* Source = ((TPersistent*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Assign'",NULL);
#endif
  {
   self->Assign(Source);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Assign'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TCanvas */
static int tolua_z_VCL_TCanvas_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TCanvas* tolua_ret = (TCanvas*)  new TCanvas();

/* getting type */
  char* lua_type = "TCanvas";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TCanvas */
static int tolua_z_VCL_TCanvas_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TCanvas* tolua_ret = (TCanvas*)  new TCanvas();

/* getting type */
  char* lua_type = "TCanvas";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TCanvas */
static int tolua_z_VCL_TCanvas_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: Arc of class  TCanvas */
static int tolua_z_VCL_TCanvas_Arc00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,10,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int X1 = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int Y1 = ((int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  int X2 = ((int)  tolua_tonumber(tolua_S,4,0));
/*declare*/
  int Y2 = ((int)  tolua_tonumber(tolua_S,5,0));
/*declare*/
  int X3 = ((int)  tolua_tonumber(tolua_S,6,0));
/*declare*/
  int Y3 = ((int)  tolua_tonumber(tolua_S,7,0));
/*declare*/
  int X4 = ((int)  tolua_tonumber(tolua_S,8,0));
/*declare*/
  int Y4 = ((int)  tolua_tonumber(tolua_S,9,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Arc'",NULL);
#endif
  {
   self->Arc(X1,Y1,X2,Y2,X3,Y3,X4,Y4);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Arc'.",&tolua_err);
 return 0;
#endif
}

/* method: BrushCopy of class  TCanvas */
static int tolua_z_VCL_TCanvas_BrushCopy00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TRect",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"Graphics::TBitmap",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,4,"const TRect",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TRect* Dest = ((const TRect*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  Graphics::TBitmap* Bitmap = ((Graphics::TBitmap*)  tolua_tousertype(tolua_S,3,0));
/*declare*/
  const TRect* Source = ((const TRect*)  tolua_tousertype(tolua_S,4,0));
/*declare*/
  TColor Color = ((TColor) (int)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'BrushCopy'",NULL);
#endif
  {
   self->BrushCopy(*Dest,Bitmap,*Source,Color);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'BrushCopy'.",&tolua_err);
 return 0;
#endif
}

/* method: Chord of class  TCanvas */
static int tolua_z_VCL_TCanvas_Chord00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,10,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int X1 = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int Y1 = ((int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  int X2 = ((int)  tolua_tonumber(tolua_S,4,0));
/*declare*/
  int Y2 = ((int)  tolua_tonumber(tolua_S,5,0));
/*declare*/
  int X3 = ((int)  tolua_tonumber(tolua_S,6,0));
/*declare*/
  int Y3 = ((int)  tolua_tonumber(tolua_S,7,0));
/*declare*/
  int X4 = ((int)  tolua_tonumber(tolua_S,8,0));
/*declare*/
  int Y4 = ((int)  tolua_tonumber(tolua_S,9,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Chord'",NULL);
#endif
  {
   self->Chord(X1,Y1,X2,Y2,X3,Y3,X4,Y4);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Chord'.",&tolua_err);
 return 0;
#endif
}

/* method: CopyRect of class  TCanvas */
static int tolua_z_VCL_TCanvas_CopyRect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TRect",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"TCanvas",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,4,"const TRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TRect* Dest = ((const TRect*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  TCanvas* Canvas = ((TCanvas*)  tolua_tousertype(tolua_S,3,0));
/*declare*/
  const TRect* Source = ((const TRect*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'CopyRect'",NULL);
#endif
  {
   self->CopyRect(*Dest,Canvas,*Source);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CopyRect'.",&tolua_err);
 return 0;
#endif
}

/* method: Draw of class  TCanvas */
static int tolua_z_VCL_TCanvas_Draw00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,4,"TGraphic",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int X = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int Y = ((int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  TGraphic* Graphic = ((TGraphic*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Draw'",NULL);
#endif
  {
   self->Draw(X,Y,Graphic);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Draw'.",&tolua_err);
 return 0;
#endif
}

/* method: DrawFocusRect of class  TCanvas */
static int tolua_z_VCL_TCanvas_DrawFocusRect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TRect* Rect = ((const TRect*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DrawFocusRect'",NULL);
#endif
  {
   self->DrawFocusRect(*Rect);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DrawFocusRect'.",&tolua_err);
 return 0;
#endif
}

/* method: Ellipse of class  TCanvas */
static int tolua_z_VCL_TCanvas_Ellipse00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int X1 = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int Y1 = ((int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  int X2 = ((int)  tolua_tonumber(tolua_S,4,0));
/*declare*/
  int Y2 = ((int)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Ellipse'",NULL);
#endif
  {
   self->Ellipse(X1,Y1,X2,Y2);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Ellipse'.",&tolua_err);
 return 0;
#endif
}

/* method: Ellipse of class  TCanvas */
static int tolua_z_VCL_TCanvas_Ellipse01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TRect* Rect = ((const TRect*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Ellipse'",NULL);
#endif
  {
   self->Ellipse(*Rect);
  }
 }
 return 0;
tolua_lerror:
 return tolua_z_VCL_TCanvas_Ellipse00(tolua_S);
}

/* method: FillRect of class  TCanvas */
static int tolua_z_VCL_TCanvas_FillRect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TRect* Rect = ((const TRect*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'FillRect'",NULL);
#endif
  {
   self->FillRect(*Rect);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'FillRect'.",&tolua_err);
 return 0;
#endif
}

/* method: FloodFill of class  TCanvas */
static int tolua_z_VCL_TCanvas_FloodFill00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int X = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int Y = ((int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  TColor Color = ((TColor) (int)  tolua_tonumber(tolua_S,4,0));
/*declare*/
  TFillStyle FillStyle = ((TFillStyle) (int)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'FloodFill'",NULL);
#endif
  {
   self->FloodFill(X,Y,Color,FillStyle);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'FloodFill'.",&tolua_err);
 return 0;
#endif
}

/* method: FrameRect of class  TCanvas */
static int tolua_z_VCL_TCanvas_FrameRect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TRect* Rect = ((const TRect*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'FrameRect'",NULL);
#endif
  {
   self->FrameRect(*Rect);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'FrameRect'.",&tolua_err);
 return 0;
#endif
}

/* method: HandleAllocated of class  TCanvas */
static int tolua_z_VCL_TCanvas_HandleAllocated00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'HandleAllocated'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->HandleAllocated();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'HandleAllocated'.",&tolua_err);
 return 0;
#endif
}

/* method: LineTo of class  TCanvas */
static int tolua_z_VCL_TCanvas_LineTo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int X = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int Y = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'LineTo'",NULL);
#endif
  {
   self->LineTo(X,Y);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'LineTo'.",&tolua_err);
 return 0;
#endif
}

/* method: Lock of class  TCanvas */
static int tolua_z_VCL_TCanvas_Lock00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Lock'",NULL);
#endif
  {
   self->Lock();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Lock'.",&tolua_err);
 return 0;
#endif
}

/* method: MoveTo of class  TCanvas */
static int tolua_z_VCL_TCanvas_MoveTo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int X = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int Y = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'MoveTo'",NULL);
#endif
  {
   self->MoveTo(X,Y);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'MoveTo'.",&tolua_err);
 return 0;
#endif
}

/* method: Pie of class  TCanvas */
static int tolua_z_VCL_TCanvas_Pie00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,10,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int X1 = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int Y1 = ((int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  int X2 = ((int)  tolua_tonumber(tolua_S,4,0));
/*declare*/
  int Y2 = ((int)  tolua_tonumber(tolua_S,5,0));
/*declare*/
  int X3 = ((int)  tolua_tonumber(tolua_S,6,0));
/*declare*/
  int Y3 = ((int)  tolua_tonumber(tolua_S,7,0));
/*declare*/
  int X4 = ((int)  tolua_tonumber(tolua_S,8,0));
/*declare*/
  int Y4 = ((int)  tolua_tonumber(tolua_S,9,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Pie'",NULL);
#endif
  {
   self->Pie(X1,Y1,X2,Y2,X3,Y3,X4,Y4);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Pie'.",&tolua_err);
 return 0;
#endif
}

/* method: Polygon of class  TCanvas */
static int tolua_z_VCL_TCanvas_Polygon00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TPoint",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TPoint* Points = ((const TPoint*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  const int Points_Size = ((const int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Polygon'",NULL);
#endif
  {
   self->Polygon(Points,Points_Size);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Polygon'.",&tolua_err);
 return 0;
#endif
}

/* method: Polyline of class  TCanvas */
static int tolua_z_VCL_TCanvas_Polyline00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TPoint",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TPoint* Points = ((const TPoint*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  const int Points_Size = ((const int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Polyline'",NULL);
#endif
  {
   self->Polyline(Points,Points_Size);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Polyline'.",&tolua_err);
 return 0;
#endif
}

/* method: PolyBezier of class  TCanvas */
static int tolua_z_VCL_TCanvas_PolyBezier00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TPoint",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TPoint* Points = ((const TPoint*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  const int Points_Size = ((const int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'PolyBezier'",NULL);
#endif
  {
   self->PolyBezier(Points,Points_Size);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'PolyBezier'.",&tolua_err);
 return 0;
#endif
}

/* method: PolyBezierTo of class  TCanvas */
static int tolua_z_VCL_TCanvas_PolyBezierTo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TPoint",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TPoint* Points = ((const TPoint*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  const int Points_Size = ((const int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'PolyBezierTo'",NULL);
#endif
  {
   self->PolyBezierTo(Points,Points_Size);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'PolyBezierTo'.",&tolua_err);
 return 0;
#endif
}

/* method: Rectangle of class  TCanvas */
static int tolua_z_VCL_TCanvas_Rectangle00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int X1 = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int Y1 = ((int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  int X2 = ((int)  tolua_tonumber(tolua_S,4,0));
/*declare*/
  int Y2 = ((int)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Rectangle'",NULL);
#endif
  {
   self->Rectangle(X1,Y1,X2,Y2);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Rectangle'.",&tolua_err);
 return 0;
#endif
}

/* method: Rectangle of class  TCanvas */
static int tolua_z_VCL_TCanvas_Rectangle01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TRect* Rect = ((const TRect*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Rectangle'",NULL);
#endif
  {
   self->Rectangle(*Rect);
  }
 }
 return 0;
tolua_lerror:
 return tolua_z_VCL_TCanvas_Rectangle00(tolua_S);
}

/* method: Refresh of class  TCanvas */
static int tolua_z_VCL_TCanvas_Refresh00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Refresh'",NULL);
#endif
  {
   self->Refresh();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Refresh'.",&tolua_err);
 return 0;
#endif
}

/* method: RoundRect of class  TCanvas */
static int tolua_z_VCL_TCanvas_RoundRect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int X1 = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int Y1 = ((int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  int X2 = ((int)  tolua_tonumber(tolua_S,4,0));
/*declare*/
  int Y2 = ((int)  tolua_tonumber(tolua_S,5,0));
/*declare*/
  int X3 = ((int)  tolua_tonumber(tolua_S,6,0));
/*declare*/
  int Y3 = ((int)  tolua_tonumber(tolua_S,7,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RoundRect'",NULL);
#endif
  {
   self->RoundRect(X1,Y1,X2,Y2,X3,Y3);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RoundRect'.",&tolua_err);
 return 0;
#endif
}

/* method: StretchDraw of class  TCanvas */
static int tolua_z_VCL_TCanvas_StretchDraw00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TRect",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"TGraphic",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TRect* Rect = ((const TRect*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  TGraphic* Graphic = ((TGraphic*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'StretchDraw'",NULL);
#endif
  {
   self->StretchDraw(*Rect,Graphic);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'StretchDraw'.",&tolua_err);
 return 0;
#endif
}

/* method: TextExtent of class  TCanvas */
static int tolua_z_VCL_TCanvas_TextExtent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isansi(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const AnsiString Text = ((const AnsiString)  tolua_toansi(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'TextExtent'",NULL);
#endif
  {
   tagSIZE tolua_ret = (tagSIZE)  self->TextExtent(Text);
   {
#ifdef __cplusplus
    void* tolua_obj = new tagSIZE(tolua_ret);

/* getting type */
  char* lua_type = "tagSIZE";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(tagSIZE));

/* getting type */
  char* lua_type = "tagSIZE";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'TextExtent'.",&tolua_err);
 return 0;
#endif
}

/* method: TextHeight of class  TCanvas */
static int tolua_z_VCL_TCanvas_TextHeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isansi(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const AnsiString Text = ((const AnsiString)  tolua_toansi(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'TextHeight'",NULL);
#endif
  {
   int tolua_ret = (int)  self->TextHeight(Text);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'TextHeight'.",&tolua_err);
 return 0;
#endif
}

/* method: TextOut of class  TCanvas */
static int tolua_z_VCL_TCanvas_TextOut00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isansi(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int X = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int Y = ((int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  const AnsiString Text = ((const AnsiString)  tolua_toansi(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'TextOut'",NULL);
#endif
  {
   self->TextOut(X,Y,Text);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'TextOut'.",&tolua_err);
 return 0;
#endif
}

/* method: TextRect of class  TCanvas */
static int tolua_z_VCL_TCanvas_TextRect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TRect",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isansi(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TRect* Rect = ((const TRect*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  int X = ((int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  int Y = ((int)  tolua_tonumber(tolua_S,4,0));
/*declare*/
  const AnsiString Text = ((const AnsiString)  tolua_toansi(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'TextRect'",NULL);
#endif
  {
   self->TextRect(*Rect,X,Y,Text);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'TextRect'.",&tolua_err);
 return 0;
#endif
}

/* method: TextWidth of class  TCanvas */
static int tolua_z_VCL_TCanvas_TextWidth00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isansi(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const AnsiString Text = ((const AnsiString)  tolua_toansi(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'TextWidth'",NULL);
#endif
  {
   int tolua_ret = (int)  self->TextWidth(Text);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'TextWidth'.",&tolua_err);
 return 0;
#endif
}

/* method: TryLock of class  TCanvas */
static int tolua_z_VCL_TCanvas_TryLock00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'TryLock'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->TryLock();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'TryLock'.",&tolua_err);
 return 0;
#endif
}

/* method: Unlock of class  TCanvas */
static int tolua_z_VCL_TCanvas_Unlock00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCanvas",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Unlock'",NULL);
#endif
  {
   self->Unlock();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Unlock'.",&tolua_err);
 return 0;
#endif
}

/* get function: ClipRect of class  TCanvas */
static int tolua_get_TCanvas_ClipRect(lua_State* tolua_S)
{
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ClipRect'",NULL);
#endif

/* getting type */
  char* lua_type = "TRect";
   tolua_pushusertype(tolua_S,(void*)(&(self->ClipRect)),lua_type);
 return 1;
}

/* get function: LockCount of class  TCanvas */
static int tolua_get_TCanvas_LockCount(lua_State* tolua_S)
{
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'LockCount'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->LockCount);
 return 1;
}

/* get function: CanvasOrientation of class  TCanvas */
static int tolua_get_TCanvas_CanvasOrientation(lua_State* tolua_S)
{
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'CanvasOrientation'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->CanvasOrientation);
 return 1;
}

/* get function: PenPos of class  TCanvas */
static int tolua_get_TCanvas_PenPos(lua_State* tolua_S)
{
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PenPos'",NULL);
#endif

/* getting type */
  char* lua_type = "TPoint";
   tolua_pushusertype(tolua_S,(void*)(&(self->PenPos)),lua_type);
 return 1;
}

/* set function: PenPos of class  TCanvas */
static int tolua_set_TCanvas_PenPos(lua_State* tolua_S)
{
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PenPos'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TPoint",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->PenPos = *((TPoint*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: TextFlags of class  TCanvas */
static int tolua_get_TCanvas_TextFlags(lua_State* tolua_S)
{
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TextFlags'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->TextFlags);
 return 1;
}

/* set function: TextFlags of class  TCanvas */
static int tolua_set_TCanvas_TextFlags(lua_State* tolua_S)
{
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TextFlags'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->TextFlags = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Brush of class  TCanvas */
static int tolua_get_TCanvas_Brush_ptr(lua_State* tolua_S)
{
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Brush'",NULL);
#endif

/* getting type */
  char* lua_type = "TBrush";
   tolua_pushusertype(tolua_S,(void*)(self->Brush),lua_type);
 return 1;
}

/* set function: Brush of class  TCanvas */
static int tolua_set_TCanvas_Brush_ptr(lua_State* tolua_S)
{
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Brush'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TBrush",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Brush = ((TBrush*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: CopyMode of class  TCanvas */
static int tolua_get_TCanvas_CopyMode(lua_State* tolua_S)
{
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'CopyMode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->CopyMode);
 return 1;
}

/* set function: CopyMode of class  TCanvas */
static int tolua_set_TCanvas_CopyMode(lua_State* tolua_S)
{
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'CopyMode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->CopyMode = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Font of class  TCanvas */
static int tolua_get_TCanvas_Font_ptr(lua_State* tolua_S)
{
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Font'",NULL);
#endif

/* getting type */
  char* lua_type = "TFont";
   tolua_pushusertype(tolua_S,(void*)(self->Font),lua_type);
 return 1;
}

/* set function: Font of class  TCanvas */
static int tolua_set_TCanvas_Font_ptr(lua_State* tolua_S)
{
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Font'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TFont",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Font = ((TFont*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: Pen of class  TCanvas */
static int tolua_get_TCanvas_Pen_ptr(lua_State* tolua_S)
{
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Pen'",NULL);
#endif

/* getting type */
  char* lua_type = "TPen";
   tolua_pushusertype(tolua_S,(void*)(self->Pen),lua_type);
 return 1;
}

/* set function: Pen of class  TCanvas */
static int tolua_set_TCanvas_Pen_ptr(lua_State* tolua_S)
{
  TCanvas* self = (TCanvas*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Pen'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TPen",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Pen = ((TPen*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* method: AfterConstruction of class  TInterfacedPersistent */
static int tolua_z_VCL_TInterfacedPersistent_AfterConstruction00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TInterfacedPersistent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TInterfacedPersistent* self = (TInterfacedPersistent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AfterConstruction'",NULL);
#endif
  {
   self->AfterConstruction();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AfterConstruction'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TInterfacedPersistent */
static int tolua_z_VCL_TInterfacedPersistent_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TInterfacedPersistent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TInterfacedPersistent* self = (TInterfacedPersistent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TInterfacedPersistent */
static int tolua_z_VCL_TInterfacedPersistent_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TInterfacedPersistent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TInterfacedPersistent* tolua_ret = (TInterfacedPersistent*)  new TInterfacedPersistent();

/* getting type */
  char* lua_type = "TInterfacedPersistent";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TInterfacedPersistent */
static int tolua_z_VCL_TInterfacedPersistent_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TInterfacedPersistent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TInterfacedPersistent* tolua_ret = (TInterfacedPersistent*)  new TInterfacedPersistent();

/* getting type */
  char* lua_type = "TInterfacedPersistent";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TPicture */
static int tolua_z_VCL_TPicture_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TPicture",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TPicture* tolua_ret = (TPicture*)  new TPicture();

/* getting type */
  char* lua_type = "TPicture";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TPicture */
static int tolua_z_VCL_TPicture_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TPicture",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TPicture* tolua_ret = (TPicture*)  new TPicture();

/* getting type */
  char* lua_type = "TPicture";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TPicture */
static int tolua_z_VCL_TPicture_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TPicture",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TPicture* self = (TPicture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: LoadFromFile of class  TPicture */
static int tolua_z_VCL_TPicture_LoadFromFile00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TPicture",0,&tolua_err) ||
     !tolua_isansi(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TPicture* self = (TPicture*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const AnsiString Filename = ((const AnsiString)  tolua_toansi(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'LoadFromFile'",NULL);
#endif
  {
   self->LoadFromFile(Filename);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'LoadFromFile'.",&tolua_err);
 return 0;
#endif
}

/* method: SaveToFile of class  TPicture */
static int tolua_z_VCL_TPicture_SaveToFile00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TPicture",0,&tolua_err) ||
     !tolua_isansi(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TPicture* self = (TPicture*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const AnsiString Filename = ((const AnsiString)  tolua_toansi(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SaveToFile'",NULL);
#endif
  {
   self->SaveToFile(Filename);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SaveToFile'.",&tolua_err);
 return 0;
#endif
}

/* method: SupportsClipboardFormat of class  TPicture */
static int tolua_z_VCL_TPicture_SupportsClipboardFormat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TPicture",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TMetaClass",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TPicture* self = (TPicture*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TMetaClass* vmt = ((TMetaClass*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  Word AFormat = ((Word)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SupportsClipboardFormat'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->SupportsClipboardFormat(vmt,AFormat);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SupportsClipboardFormat'.",&tolua_err);
 return 0;
#endif
}

/* method: Assign of class  TPicture */
static int tolua_z_VCL_TPicture_Assign00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TPicture",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TPersistent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TPicture* self = (TPicture*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TPersistent* Source = ((TPersistent*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Assign'",NULL);
#endif
  {
   self->Assign(Source);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Assign'.",&tolua_err);
 return 0;
#endif
}

/* method: RegisterFileFormat of class  TPicture */
static int tolua_z_VCL_TPicture_RegisterFileFormat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TPicture",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TMetaClass",0,&tolua_err) ||
     !tolua_isansi(tolua_S,3,0,&tolua_err) ||
     !tolua_isansi(tolua_S,4,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,5,"TMetaClass",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TPicture* self = (TPicture*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TMetaClass* vmt = ((TMetaClass*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  const AnsiString AExtension = ((const AnsiString)  tolua_toansi(tolua_S,3,0));
/*declare*/
  const AnsiString ADescription = ((const AnsiString)  tolua_toansi(tolua_S,4,0));
/*declare*/
  TMetaClass* AGraphicClass = ((TMetaClass*)  tolua_tousertype(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RegisterFileFormat'",NULL);
#endif
  {
   self->RegisterFileFormat(vmt,AExtension,ADescription,AGraphicClass);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RegisterFileFormat'.",&tolua_err);
 return 0;
#endif
}

/* method: RegisterFileFormatRes of class  TPicture */
static int tolua_z_VCL_TPicture_RegisterFileFormatRes00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TPicture",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TMetaClass",0,&tolua_err) ||
     !tolua_isansi(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,5,"TMetaClass",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TPicture* self = (TPicture*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TMetaClass* vmt = ((TMetaClass*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  const AnsiString AExtension = ((const AnsiString)  tolua_toansi(tolua_S,3,0));
/*declare*/
  int ADescriptionResID = ((int)  tolua_tonumber(tolua_S,4,0));
/*declare*/
  TMetaClass* AGraphicClass = ((TMetaClass*)  tolua_tousertype(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RegisterFileFormatRes'",NULL);
#endif
  {
   self->RegisterFileFormatRes(vmt,AExtension,ADescriptionResID,AGraphicClass);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RegisterFileFormatRes'.",&tolua_err);
 return 0;
#endif
}

/* method: RegisterClipboardFormat of class  TPicture */
static int tolua_z_VCL_TPicture_RegisterClipboardFormat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TPicture",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TMetaClass",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,4,"TMetaClass",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TPicture* self = (TPicture*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TMetaClass* vmt = ((TMetaClass*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  Word AFormat = ((Word)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  TMetaClass* AGraphicClass = ((TMetaClass*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RegisterClipboardFormat'",NULL);
#endif
  {
   self->RegisterClipboardFormat(vmt,AFormat,AGraphicClass);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RegisterClipboardFormat'.",&tolua_err);
 return 0;
#endif
}

/* method: UnregisterGraphicClass of class  TPicture */
static int tolua_z_VCL_TPicture_UnregisterGraphicClass00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TPicture",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TMetaClass",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"TMetaClass",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TPicture* self = (TPicture*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TMetaClass* vmt = ((TMetaClass*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  TMetaClass* AClass = ((TMetaClass*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'UnregisterGraphicClass'",NULL);
#endif
  {
   self->UnregisterGraphicClass(vmt,AClass);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'UnregisterGraphicClass'.",&tolua_err);
 return 0;
#endif
}

/* get function: Bitmap of class  TPicture */
static int tolua_get_TPicture_Bitmap_ptr(lua_State* tolua_S)
{
  TPicture* self = (TPicture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Bitmap'",NULL);
#endif

/* getting type */
  char* lua_type = "Graphics::TBitmap";
   tolua_pushusertype(tolua_S,(void*)(self->Bitmap),lua_type);
 return 1;
}

/* set function: Bitmap of class  TPicture */
static int tolua_set_TPicture_Bitmap_ptr(lua_State* tolua_S)
{
  TPicture* self = (TPicture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Bitmap'",NULL);
  if (!tolua_isusertype(tolua_S,2,"Graphics::TBitmap",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Bitmap = ((Graphics::TBitmap*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: Graphic of class  TPicture */
static int tolua_get_TPicture_Graphic_ptr(lua_State* tolua_S)
{
  TPicture* self = (TPicture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Graphic'",NULL);
#endif

/* getting type */
  char* lua_type = "TGraphic";
   tolua_pushusertype(tolua_S,(void*)(self->Graphic),lua_type);
 return 1;
}

/* set function: Graphic of class  TPicture */
static int tolua_set_TPicture_Graphic_ptr(lua_State* tolua_S)
{
  TPicture* self = (TPicture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Graphic'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TGraphic",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Graphic = ((TGraphic*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: Height of class  TPicture */
static int tolua_get_TPicture_Height(lua_State* tolua_S)
{
  TPicture* self = (TPicture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Height'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Height);
 return 1;
}

/* get function: Icon of class  TPicture */
static int tolua_get_TPicture_Icon_ptr(lua_State* tolua_S)
{
  TPicture* self = (TPicture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Icon'",NULL);
#endif

/* getting type */
  char* lua_type = "TIcon";
   tolua_pushusertype(tolua_S,(void*)(self->Icon),lua_type);
 return 1;
}

/* set function: Icon of class  TPicture */
static int tolua_set_TPicture_Icon_ptr(lua_State* tolua_S)
{
  TPicture* self = (TPicture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Icon'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TIcon",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Icon = ((TIcon*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: Metafile of class  TPicture */
static int tolua_get_TPicture_Metafile_ptr(lua_State* tolua_S)
{
  TPicture* self = (TPicture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Metafile'",NULL);
#endif

/* getting type */
  char* lua_type = "TMetafile";
   tolua_pushusertype(tolua_S,(void*)(self->Metafile),lua_type);
 return 1;
}

/* set function: Metafile of class  TPicture */
static int tolua_set_TPicture_Metafile_ptr(lua_State* tolua_S)
{
  TPicture* self = (TPicture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Metafile'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TMetafile",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Metafile = ((TMetafile*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: Width of class  TPicture */
static int tolua_get_TPicture_Width(lua_State* tolua_S)
{
  TPicture* self = (TPicture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Width'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Width);
 return 1;
}

/* method: new of class  TGraphic */
static int tolua_z_VCL_TGraphic_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TGraphic",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TGraphic* tolua_ret = (TGraphic*)NULL;//  new TGraphic();

/* getting type */
  char* lua_type = "TGraphic";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TGraphic */
static int tolua_z_VCL_TGraphic_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TGraphic",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TGraphic* tolua_ret = (TGraphic*)NULL;//  new TGraphic();

/* getting type */
  char* lua_type = "TGraphic";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: LoadFromFile of class  TGraphic */
static int tolua_z_VCL_TGraphic_LoadFromFile00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TGraphic",0,&tolua_err) ||
     !tolua_isansi(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TGraphic* self = (TGraphic*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const AnsiString Filename = ((const AnsiString)  tolua_toansi(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'LoadFromFile'",NULL);
#endif
  {
   self->LoadFromFile(Filename);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'LoadFromFile'.",&tolua_err);
 return 0;
#endif
}

/* method: SaveToFile of class  TGraphic */
static int tolua_z_VCL_TGraphic_SaveToFile00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TGraphic",0,&tolua_err) ||
     !tolua_isansi(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TGraphic* self = (TGraphic*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const AnsiString Filename = ((const AnsiString)  tolua_toansi(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SaveToFile'",NULL);
#endif
  {
   self->SaveToFile(Filename);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SaveToFile'.",&tolua_err);
 return 0;
#endif
}

/* method: LoadFromStream of class  TGraphic */
static int tolua_z_VCL_TGraphic_LoadFromStream00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TGraphic",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TGraphic* self = (TGraphic*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TStream* Stream = ((TStream*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'LoadFromStream'",NULL);
#endif
  {
   self->LoadFromStream(Stream);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'LoadFromStream'.",&tolua_err);
 return 0;
#endif
}

/* method: SaveToStream of class  TGraphic */
static int tolua_z_VCL_TGraphic_SaveToStream00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TGraphic",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TGraphic* self = (TGraphic*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TStream* Stream = ((TStream*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SaveToStream'",NULL);
#endif
  {
   self->SaveToStream(Stream);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SaveToStream'.",&tolua_err);
 return 0;
#endif
}

/* get function: Empty of class  TGraphic */
static int tolua_get_TGraphic_Empty(lua_State* tolua_S)
{
  TGraphic* self = (TGraphic*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Empty'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Empty);
 return 1;
}

/* get function: Height of class  TGraphic */
static int tolua_get_TGraphic_Height(lua_State* tolua_S)
{
  TGraphic* self = (TGraphic*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Height'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Height);
 return 1;
}

/* set function: Height of class  TGraphic */
static int tolua_set_TGraphic_Height(lua_State* tolua_S)
{
  TGraphic* self = (TGraphic*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Height'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Height = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Modified of class  TGraphic */
static int tolua_get_TGraphic_Modified(lua_State* tolua_S)
{
  TGraphic* self = (TGraphic*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Modified'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Modified);
 return 1;
}

/* set function: Modified of class  TGraphic */
static int tolua_set_TGraphic_Modified(lua_State* tolua_S)
{
  TGraphic* self = (TGraphic*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Modified'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Modified = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: PaletteModified of class  TGraphic */
static int tolua_get_TGraphic_PaletteModified(lua_State* tolua_S)
{
  TGraphic* self = (TGraphic*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PaletteModified'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->PaletteModified);
 return 1;
}

/* set function: PaletteModified of class  TGraphic */
static int tolua_set_TGraphic_PaletteModified(lua_State* tolua_S)
{
  TGraphic* self = (TGraphic*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PaletteModified'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->PaletteModified = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Transparent of class  TGraphic */
static int tolua_get_TGraphic_Transparent(lua_State* tolua_S)
{
  TGraphic* self = (TGraphic*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Transparent'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Transparent);
 return 1;
}

/* set function: Transparent of class  TGraphic */
static int tolua_set_TGraphic_Transparent(lua_State* tolua_S)
{
  TGraphic* self = (TGraphic*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Transparent'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Transparent = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Width of class  TGraphic */
static int tolua_get_TGraphic_Width(lua_State* tolua_S)
{
  TGraphic* self = (TGraphic*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Width'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Width);
 return 1;
}

/* set function: Width of class  TGraphic */
static int tolua_set_TGraphic_Width(lua_State* tolua_S)
{
  TGraphic* self = (TGraphic*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Width'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Width = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* method: delete of class  TGraphic */
static int tolua_z_VCL_TGraphic_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TGraphic",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TGraphic* self = (TGraphic*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TMetafile */
static int tolua_z_VCL_TMetafile_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TMetafile",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TMetafile* tolua_ret = (TMetafile*)  new TMetafile();

/* getting type */
  char* lua_type = "TMetafile";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TMetafile */
static int tolua_z_VCL_TMetafile_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TMetafile",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TMetafile* tolua_ret = (TMetafile*)  new TMetafile();

/* getting type */
  char* lua_type = "TMetafile";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TMetafile */
static int tolua_z_VCL_TMetafile_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMetafile",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMetafile* self = (TMetafile*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: Clear of class  TMetafile */
static int tolua_z_VCL_TMetafile_Clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMetafile",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMetafile* self = (TMetafile*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Clear'",NULL);
#endif
  {
   self->Clear();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clear'.",&tolua_err);
 return 0;
#endif
}

/* method: HandleAllocated of class  TMetafile */
static int tolua_z_VCL_TMetafile_HandleAllocated00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMetafile",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMetafile* self = (TMetafile*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'HandleAllocated'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->HandleAllocated();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'HandleAllocated'.",&tolua_err);
 return 0;
#endif
}

/* method: LoadFromStream of class  TMetafile */
static int tolua_z_VCL_TMetafile_LoadFromStream00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMetafile",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMetafile* self = (TMetafile*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TStream* Stream = ((TStream*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'LoadFromStream'",NULL);
#endif
  {
   self->LoadFromStream(Stream);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'LoadFromStream'.",&tolua_err);
 return 0;
#endif
}

/* method: SaveToFile of class  TMetafile */
static int tolua_z_VCL_TMetafile_SaveToFile00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMetafile",0,&tolua_err) ||
     !tolua_isansi(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMetafile* self = (TMetafile*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const AnsiString Filename = ((const AnsiString)  tolua_toansi(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SaveToFile'",NULL);
#endif
  {
   self->SaveToFile(Filename);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SaveToFile'.",&tolua_err);
 return 0;
#endif
}

/* method: SaveToStream of class  TMetafile */
static int tolua_z_VCL_TMetafile_SaveToStream00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMetafile",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMetafile* self = (TMetafile*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TStream* Stream = ((TStream*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SaveToStream'",NULL);
#endif
  {
   self->SaveToStream(Stream);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SaveToStream'.",&tolua_err);
 return 0;
#endif
}

/* method: Assign of class  TMetafile */
static int tolua_z_VCL_TMetafile_Assign00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMetafile",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TPersistent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMetafile* self = (TMetafile*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TPersistent* Source = ((TPersistent*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Assign'",NULL);
#endif
  {
   self->Assign(Source);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Assign'.",&tolua_err);
 return 0;
#endif
}

/* method: ReleaseHandle of class  TMetafile */
static int tolua_z_VCL_TMetafile_ReleaseHandle00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMetafile",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMetafile* self = (TMetafile*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReleaseHandle'",NULL);
#endif
  {
   unsigned tolua_ret = (unsigned)  self->ReleaseHandle();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReleaseHandle'.",&tolua_err);
 return 0;
#endif
}

/* get function: CreatedBy of class  TMetafile */
static int tolua_get_TMetafile_CreatedBy(lua_State* tolua_S)
{
  TMetafile* self = (TMetafile*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'CreatedBy'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->CreatedBy);
 return 1;
}

/* get function: Description of class  TMetafile */
static int tolua_get_TMetafile_Description(lua_State* tolua_S)
{
  TMetafile* self = (TMetafile*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Description'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->Description);
 return 1;
}

/* get function: Enhanced of class  TMetafile */
static int tolua_get_TMetafile_Enhanced(lua_State* tolua_S)
{
  TMetafile* self = (TMetafile*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enhanced'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Enhanced);
 return 1;
}

/* set function: Enhanced of class  TMetafile */
static int tolua_set_TMetafile_Enhanced(lua_State* tolua_S)
{
  TMetafile* self = (TMetafile*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enhanced'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Enhanced = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Handle of class  TMetafile */
static int tolua_get_TMetafile_Handle(lua_State* tolua_S)
{
  TMetafile* self = (TMetafile*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Handle'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Handle);
 return 1;
}

/* set function: Handle of class  TMetafile */
static int tolua_set_TMetafile_Handle(lua_State* tolua_S)
{
  TMetafile* self = (TMetafile*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Handle'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Handle = ((unsigned)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: MMWidth of class  TMetafile */
static int tolua_get_TMetafile_MMWidth(lua_State* tolua_S)
{
  TMetafile* self = (TMetafile*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MMWidth'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->MMWidth);
 return 1;
}

/* set function: MMWidth of class  TMetafile */
static int tolua_set_TMetafile_MMWidth(lua_State* tolua_S)
{
  TMetafile* self = (TMetafile*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MMWidth'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MMWidth = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: MMHeight of class  TMetafile */
static int tolua_get_TMetafile_MMHeight(lua_State* tolua_S)
{
  TMetafile* self = (TMetafile*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MMHeight'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->MMHeight);
 return 1;
}

/* set function: MMHeight of class  TMetafile */
static int tolua_set_TMetafile_MMHeight(lua_State* tolua_S)
{
  TMetafile* self = (TMetafile*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MMHeight'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MMHeight = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Inch of class  TMetafile */
static int tolua_get_TMetafile_Inch(lua_State* tolua_S)
{
  TMetafile* self = (TMetafile*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Inch'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Inch);
 return 1;
}

/* set function: Inch of class  TMetafile */
static int tolua_set_TMetafile_Inch(lua_State* tolua_S)
{
  TMetafile* self = (TMetafile*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Inch'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Inch = ((Word)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* method: new of class  TIcon */
static int tolua_z_VCL_TIcon_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TIcon",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TIcon* tolua_ret = (TIcon*)  new TIcon();

/* getting type */
  char* lua_type = "TIcon";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TIcon */
static int tolua_z_VCL_TIcon_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TIcon",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TIcon* tolua_ret = (TIcon*)  new TIcon();

/* getting type */
  char* lua_type = "TIcon";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TIcon */
static int tolua_z_VCL_TIcon_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TIcon",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TIcon* self = (TIcon*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: Assign of class  TIcon */
static int tolua_z_VCL_TIcon_Assign00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TIcon",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TPersistent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TIcon* self = (TIcon*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TPersistent* Source = ((TPersistent*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Assign'",NULL);
#endif
  {
   self->Assign(Source);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Assign'.",&tolua_err);
 return 0;
#endif
}

/* method: HandleAllocated of class  TIcon */
static int tolua_z_VCL_TIcon_HandleAllocated00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TIcon",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TIcon* self = (TIcon*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'HandleAllocated'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->HandleAllocated();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'HandleAllocated'.",&tolua_err);
 return 0;
#endif
}

/* method: LoadFromStream of class  TIcon */
static int tolua_z_VCL_TIcon_LoadFromStream00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TIcon",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TIcon* self = (TIcon*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TStream* Stream = ((TStream*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'LoadFromStream'",NULL);
#endif
  {
   self->LoadFromStream(Stream);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'LoadFromStream'.",&tolua_err);
 return 0;
#endif
}

/* method: SaveToStream of class  TIcon */
static int tolua_z_VCL_TIcon_SaveToStream00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TIcon",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TIcon* self = (TIcon*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TStream* Stream = ((TStream*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SaveToStream'",NULL);
#endif
  {
   self->SaveToStream(Stream);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SaveToStream'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  Graphics::TBitmap */
static int tolua_z_VCL_Graphics_TBitmap_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Graphics::TBitmap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   Graphics::TBitmap* tolua_ret = (Graphics::TBitmap*)  new Graphics::TBitmap();

/* getting type */
  char* lua_type = "Graphics::TBitmap";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  Graphics::TBitmap */
static int tolua_z_VCL_Graphics_TBitmap_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Graphics::TBitmap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   Graphics::TBitmap* tolua_ret = (Graphics::TBitmap*)  new Graphics::TBitmap();

/* getting type */
  char* lua_type = "Graphics::TBitmap";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  Graphics::TBitmap */
static int tolua_z_VCL_Graphics_TBitmap_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Graphics::TBitmap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Graphics::TBitmap* self = (Graphics::TBitmap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: Assign of class  Graphics::TBitmap */
static int tolua_z_VCL_Graphics_TBitmap_Assign00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Graphics::TBitmap",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TPersistent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Graphics::TBitmap* self = (Graphics::TBitmap*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TPersistent* Source = ((TPersistent*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Assign'",NULL);
#endif
  {
   self->Assign(Source);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Assign'.",&tolua_err);
 return 0;
#endif
}

/* method: Dormant of class  Graphics::TBitmap */
static int tolua_z_VCL_Graphics_TBitmap_Dormant00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Graphics::TBitmap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Graphics::TBitmap* self = (Graphics::TBitmap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Dormant'",NULL);
#endif
  {
   self->Dormant();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Dormant'.",&tolua_err);
 return 0;
#endif
}

/* method: FreeImage of class  Graphics::TBitmap */
static int tolua_z_VCL_Graphics_TBitmap_FreeImage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Graphics::TBitmap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Graphics::TBitmap* self = (Graphics::TBitmap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'FreeImage'",NULL);
#endif
  {
   self->FreeImage();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'FreeImage'.",&tolua_err);
 return 0;
#endif
}

/* method: HandleAllocated of class  Graphics::TBitmap */
static int tolua_z_VCL_Graphics_TBitmap_HandleAllocated00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Graphics::TBitmap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Graphics::TBitmap* self = (Graphics::TBitmap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'HandleAllocated'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->HandleAllocated();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'HandleAllocated'.",&tolua_err);
 return 0;
#endif
}

/* method: LoadFromStream of class  Graphics::TBitmap */
static int tolua_z_VCL_Graphics_TBitmap_LoadFromStream00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Graphics::TBitmap",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Graphics::TBitmap* self = (Graphics::TBitmap*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TStream* Stream = ((TStream*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'LoadFromStream'",NULL);
#endif
  {
   self->LoadFromStream(Stream);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'LoadFromStream'.",&tolua_err);
 return 0;
#endif
}

/* method: LoadFromResourceName of class  Graphics::TBitmap */
static int tolua_z_VCL_Graphics_TBitmap_LoadFromResourceName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Graphics::TBitmap",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isansi(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Graphics::TBitmap* self = (Graphics::TBitmap*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  unsigned Instance = ((unsigned)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  const AnsiString ResName = ((const AnsiString)  tolua_toansi(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'LoadFromResourceName'",NULL);
#endif
  {
   self->LoadFromResourceName(Instance,ResName);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'LoadFromResourceName'.",&tolua_err);
 return 0;
#endif
}

/* method: LoadFromResourceID of class  Graphics::TBitmap */
static int tolua_z_VCL_Graphics_TBitmap_LoadFromResourceID00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Graphics::TBitmap",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Graphics::TBitmap* self = (Graphics::TBitmap*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  unsigned Instance = ((unsigned)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int ResID = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'LoadFromResourceID'",NULL);
#endif
  {
   self->LoadFromResourceID(Instance,ResID);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'LoadFromResourceID'.",&tolua_err);
 return 0;
#endif
}

/* method: Mask of class  Graphics::TBitmap */
static int tolua_z_VCL_Graphics_TBitmap_Mask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Graphics::TBitmap",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Graphics::TBitmap* self = (Graphics::TBitmap*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TColor TransparentColor = ((TColor) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Mask'",NULL);
#endif
  {
   self->Mask(TransparentColor);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Mask'.",&tolua_err);
 return 0;
#endif
}

/* method: SaveToStream of class  Graphics::TBitmap */
static int tolua_z_VCL_Graphics_TBitmap_SaveToStream00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Graphics::TBitmap",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Graphics::TBitmap* self = (Graphics::TBitmap*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TStream* Stream = ((TStream*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SaveToStream'",NULL);
#endif
  {
   self->SaveToStream(Stream);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SaveToStream'.",&tolua_err);
 return 0;
#endif
}

/* get function: Canvas of class  Graphics::TBitmap */
static int tolua_get_Graphics__TBitmap_Canvas_ptr(lua_State* tolua_S)
{
  Graphics::TBitmap* self = (Graphics::TBitmap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Canvas'",NULL);
#endif

/* getting type */
  char* lua_type = "TCanvas";
   tolua_pushusertype(tolua_S,(void*)(self->Canvas),lua_type);
 return 1;
}

/* get function: HandleType of class  Graphics::TBitmap */
static int tolua_get_Graphics__TBitmap_HandleType(lua_State* tolua_S)
{
  Graphics::TBitmap* self = (Graphics::TBitmap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HandleType'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->HandleType);
 return 1;
}

/* set function: HandleType of class  Graphics::TBitmap */
static int tolua_set_Graphics__TBitmap_HandleType(lua_State* tolua_S)
{
  Graphics::TBitmap* self = (Graphics::TBitmap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HandleType'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->HandleType = ((TBitmapHandleType) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: IgnorePalette of class  Graphics::TBitmap */
static int tolua_get_Graphics__TBitmap_IgnorePalette(lua_State* tolua_S)
{
  Graphics::TBitmap* self = (Graphics::TBitmap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'IgnorePalette'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->IgnorePalette);
 return 1;
}

/* set function: IgnorePalette of class  Graphics::TBitmap */
static int tolua_set_Graphics__TBitmap_IgnorePalette(lua_State* tolua_S)
{
  Graphics::TBitmap* self = (Graphics::TBitmap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'IgnorePalette'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->IgnorePalette = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Monochrome of class  Graphics::TBitmap */
static int tolua_get_Graphics__TBitmap_Monochrome(lua_State* tolua_S)
{
  Graphics::TBitmap* self = (Graphics::TBitmap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Monochrome'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Monochrome);
 return 1;
}

/* set function: Monochrome of class  Graphics::TBitmap */
static int tolua_set_Graphics__TBitmap_Monochrome(lua_State* tolua_S)
{
  Graphics::TBitmap* self = (Graphics::TBitmap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Monochrome'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Monochrome = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: PixelFormat of class  Graphics::TBitmap */
static int tolua_get_Graphics__TBitmap_PixelFormat(lua_State* tolua_S)
{
  Graphics::TBitmap* self = (Graphics::TBitmap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PixelFormat'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->PixelFormat);
 return 1;
}

/* set function: PixelFormat of class  Graphics::TBitmap */
static int tolua_set_Graphics__TBitmap_PixelFormat(lua_State* tolua_S)
{
  Graphics::TBitmap* self = (Graphics::TBitmap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PixelFormat'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->PixelFormat = ((TPixelFormat) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: ScanLine of class  Graphics::TBitmap */
static int tolua_get_z_VCL_Graphics_TBitmap_ScanLine(lua_State* tolua_S)
{
 int tolua_index;
  Graphics::TBitmap* self;
 lua_pushstring(tolua_S,".self");
 lua_rawget(tolua_S,1);
 self = (Graphics::TBitmap*)  lua_touserdata(tolua_S,-1);
 tolua_index = (int)tolua_tonumber(tolua_S,2,0);
 tolua_pushuserdata(tolua_S,(void*)self->ScanLine[tolua_index]);
 return 1;
}

/* get function: TransparentColor of class  Graphics::TBitmap */
static int tolua_get_Graphics__TBitmap_TransparentColor(lua_State* tolua_S)
{
  Graphics::TBitmap* self = (Graphics::TBitmap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TransparentColor'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->TransparentColor);
 return 1;
}

/* set function: TransparentColor of class  Graphics::TBitmap */
static int tolua_set_Graphics__TBitmap_TransparentColor(lua_State* tolua_S)
{
  Graphics::TBitmap* self = (Graphics::TBitmap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TransparentColor'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->TransparentColor = ((TColor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: TransparentMode of class  Graphics::TBitmap */
static int tolua_get_Graphics__TBitmap_TransparentMode(lua_State* tolua_S)
{
  Graphics::TBitmap* self = (Graphics::TBitmap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TransparentMode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->TransparentMode);
 return 1;
}

/* set function: TransparentMode of class  Graphics::TBitmap */
static int tolua_set_Graphics__TBitmap_TransparentMode(lua_State* tolua_S)
{
  Graphics::TBitmap* self = (Graphics::TBitmap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TransparentMode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->TransparentMode = ((TTransparentMode) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* method: HandleAllocated of class  TGraphicsObject */
static int tolua_z_VCL_TGraphicsObject_HandleAllocated00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TGraphicsObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TGraphicsObject* self = (TGraphicsObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'HandleAllocated'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->HandleAllocated();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'HandleAllocated'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TGraphicsObject */
static int tolua_z_VCL_TGraphicsObject_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TGraphicsObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TGraphicsObject* self = (TGraphicsObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TGraphicsObject */
static int tolua_z_VCL_TGraphicsObject_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TGraphicsObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TGraphicsObject* tolua_ret = (TGraphicsObject*)  new TGraphicsObject();

/* getting type */
  char* lua_type = "TGraphicsObject";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TGraphicsObject */
static int tolua_z_VCL_TGraphicsObject_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TGraphicsObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TGraphicsObject* tolua_ret = (TGraphicsObject*)  new TGraphicsObject();

/* getting type */
  char* lua_type = "TGraphicsObject";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TFont */
static int tolua_z_VCL_TFont_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TFont",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TFont* tolua_ret = (TFont*)  new TFont();

/* getting type */
  char* lua_type = "TFont";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TFont */
static int tolua_z_VCL_TFont_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TFont",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TFont* tolua_ret = (TFont*)  new TFont();

/* getting type */
  char* lua_type = "TFont";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TFont */
static int tolua_z_VCL_TFont_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TFont",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TFont* self = (TFont*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: Assign of class  TFont */
static int tolua_z_VCL_TFont_Assign00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TFont",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TPersistent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TFont* self = (TFont*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TPersistent* Source = ((TPersistent*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Assign'",NULL);
#endif
  {
   self->Assign(Source);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Assign'.",&tolua_err);
 return 0;
#endif
}

/* get function: PixelsPerInch of class  TFont */
static int tolua_get_TFont_PixelsPerInch(lua_State* tolua_S)
{
  TFont* self = (TFont*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PixelsPerInch'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->PixelsPerInch);
 return 1;
}

/* set function: PixelsPerInch of class  TFont */
static int tolua_set_TFont_PixelsPerInch(lua_State* tolua_S)
{
  TFont* self = (TFont*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PixelsPerInch'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->PixelsPerInch = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Charset of class  TFont */
static int tolua_get_TFont_Charset(lua_State* tolua_S)
{
  TFont* self = (TFont*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Charset'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Charset);
 return 1;
}

/* set function: Charset of class  TFont */
static int tolua_set_TFont_Charset(lua_State* tolua_S)
{
  TFont* self = (TFont*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Charset'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Charset = ((  Byte)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Color of class  TFont */
static int tolua_get_TFont_Color(lua_State* tolua_S)
{
  TFont* self = (TFont*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Color);
 return 1;
}

/* set function: Color of class  TFont */
static int tolua_set_TFont_Color(lua_State* tolua_S)
{
  TFont* self = (TFont*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Color = ((TColor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Height of class  TFont */
static int tolua_get_TFont_Height(lua_State* tolua_S)
{
  TFont* self = (TFont*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Height'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Height);
 return 1;
}

/* set function: Height of class  TFont */
static int tolua_set_TFont_Height(lua_State* tolua_S)
{
  TFont* self = (TFont*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Height'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Height = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Name of class  TFont */
static int tolua_get_TFont_Name(lua_State* tolua_S)
{
  TFont* self = (TFont*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Name'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->Name);
 return 1;
}

/* set function: Name of class  TFont */
static int tolua_set_TFont_Name(lua_State* tolua_S)
{
  TFont* self = (TFont*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Name'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Name = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* get function: Pitch of class  TFont */
static int tolua_get_TFont_Pitch(lua_State* tolua_S)
{
  TFont* self = (TFont*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Pitch'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Pitch);
 return 1;
}

/* set function: Pitch of class  TFont */
static int tolua_set_TFont_Pitch(lua_State* tolua_S)
{
  TFont* self = (TFont*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Pitch'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Pitch = ((TFontPitch) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Size of class  TFont */
static int tolua_get_TFont_Size(lua_State* tolua_S)
{
  TFont* self = (TFont*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Size'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Size);
 return 1;
}

/* set function: Size of class  TFont */
static int tolua_set_TFont_Size(lua_State* tolua_S)
{
  TFont* self = (TFont*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Size'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Size = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Style of class  TFont */
static int tolua_get_TFont_Style(lua_State* tolua_S)
{
  TFont* self = (TFont*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Style'",NULL);
#endif

/* getting type */
  char* lua_type = "Set<TFontStyle, fsBold, fsStrikeOut>";
   tolua_pushusertype(tolua_S,(void*)(&(self->Style)),lua_type);
 return 1;
}

/* set function: Style of class  TFont */
static int tolua_set_TFont_Style(lua_State* tolua_S)
{
  TFont* self = (TFont*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Style'",NULL);
  if (!tolua_isusertype(tolua_S,2,"Set<TFontStyle, fsBold, fsStrikeOut>",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Style = *((  Set<TFontStyle, fsBold, fsStrikeOut>*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* method: new of class  TPen */
static int tolua_z_VCL_TPen_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TPen",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TPen* tolua_ret = (TPen*)  new TPen();

/* getting type */
  char* lua_type = "TPen";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TPen */
static int tolua_z_VCL_TPen_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TPen",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TPen* tolua_ret = (TPen*)  new TPen();

/* getting type */
  char* lua_type = "TPen";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TPen */
static int tolua_z_VCL_TPen_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TPen",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TPen* self = (TPen*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: Assign of class  TPen */
static int tolua_z_VCL_TPen_Assign00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TPen",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TPersistent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TPen* self = (TPen*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TPersistent* Source = ((TPersistent*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Assign'",NULL);
#endif
  {
   self->Assign(Source);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Assign'.",&tolua_err);
 return 0;
#endif
}

/* get function: Color of class  TPen */
static int tolua_get_TPen_Color(lua_State* tolua_S)
{
  TPen* self = (TPen*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Color);
 return 1;
}

/* set function: Color of class  TPen */
static int tolua_set_TPen_Color(lua_State* tolua_S)
{
  TPen* self = (TPen*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Color = ((TColor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Mode of class  TPen */
static int tolua_get_TPen_Mode(lua_State* tolua_S)
{
  TPen* self = (TPen*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Mode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Mode);
 return 1;
}

/* set function: Mode of class  TPen */
static int tolua_set_TPen_Mode(lua_State* tolua_S)
{
  TPen* self = (TPen*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Mode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Mode = ((TPenMode) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Style of class  TPen */
static int tolua_get_TPen_Style(lua_State* tolua_S)
{
  TPen* self = (TPen*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Style'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Style);
 return 1;
}

/* set function: Style of class  TPen */
static int tolua_set_TPen_Style(lua_State* tolua_S)
{
  TPen* self = (TPen*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Style'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Style = ((TPenStyle) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Width of class  TPen */
static int tolua_get_TPen_Width(lua_State* tolua_S)
{
  TPen* self = (TPen*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Width'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Width);
 return 1;
}

/* set function: Width of class  TPen */
static int tolua_set_TPen_Width(lua_State* tolua_S)
{
  TPen* self = (TPen*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Width'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Width = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* method: new of class  TBrush */
static int tolua_z_VCL_TBrush_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TBrush",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TBrush* tolua_ret = (TBrush*)  new TBrush();

/* getting type */
  char* lua_type = "TBrush";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TBrush */
static int tolua_z_VCL_TBrush_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TBrush",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TBrush* tolua_ret = (TBrush*)  new TBrush();

/* getting type */
  char* lua_type = "TBrush";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TBrush */
static int tolua_z_VCL_TBrush_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TBrush",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TBrush* self = (TBrush*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: Assign of class  TBrush */
static int tolua_z_VCL_TBrush_Assign00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TBrush",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TPersistent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TBrush* self = (TBrush*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TPersistent* Source = ((TPersistent*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Assign'",NULL);
#endif
  {
   self->Assign(Source);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Assign'.",&tolua_err);
 return 0;
#endif
}

/* get function: Bitmap of class  TBrush */
static int tolua_get_TBrush_Bitmap_ptr(lua_State* tolua_S)
{
  TBrush* self = (TBrush*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Bitmap'",NULL);
#endif

/* getting type */
  char* lua_type = "Graphics::TBitmap";
   tolua_pushusertype(tolua_S,(void*)(self->Bitmap),lua_type);
 return 1;
}

/* set function: Bitmap of class  TBrush */
static int tolua_set_TBrush_Bitmap_ptr(lua_State* tolua_S)
{
  TBrush* self = (TBrush*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Bitmap'",NULL);
  if (!tolua_isusertype(tolua_S,2,"Graphics::TBitmap",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Bitmap = ((Graphics::TBitmap*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: Color of class  TBrush */
static int tolua_get_TBrush_Color(lua_State* tolua_S)
{
  TBrush* self = (TBrush*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Color);
 return 1;
}

/* set function: Color of class  TBrush */
static int tolua_set_TBrush_Color(lua_State* tolua_S)
{
  TBrush* self = (TBrush*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Color = ((TColor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Style of class  TBrush */
static int tolua_get_TBrush_Style(lua_State* tolua_S)
{
  TBrush* self = (TBrush*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Style'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Style);
 return 1;
}

/* set function: Style of class  TBrush */
static int tolua_set_TBrush_Style(lua_State* tolua_S)
{
  TBrush* self = (TBrush*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Style'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Style = ((TBrushStyle) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* method: operator[] of class  TStrings */
static int tolua_z_VCL_TStrings__geti00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator[]'",NULL);
#endif
  {
   AnsiString tolua_ret = (AnsiString)  self->operator[](Index);
   tolua_pushansi(tolua_S,(const AnsiString&)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.geti'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TStrings */
static int tolua_z_VCL_TStrings_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: Add of class  TStrings */
static int tolua_z_VCL_TStrings_Add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isansi(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const AnsiString S = ((const AnsiString)  tolua_toansi(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Add'",NULL);
#endif
  {
   int tolua_ret = (int)  self->Add(S);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Add'.",&tolua_err);
 return 0;
#endif
}

/* method: AddObject of class  TStrings */
static int tolua_z_VCL_TStrings_AddObject00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isansi(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"TObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const AnsiString S = ((const AnsiString)  tolua_toansi(tolua_S,2,0));
/*declare*/
  TObject* AObject = ((TObject*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddObject'",NULL);
#endif
  {
   int tolua_ret = (int)  self->AddObject(S,AObject);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddObject'.",&tolua_err);
 return 0;
#endif
}

/* method: Append of class  TStrings */
static int tolua_z_VCL_TStrings_Append00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isansi(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const AnsiString S = ((const AnsiString)  tolua_toansi(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Append'",NULL);
#endif
  {
   self->Append(S);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Append'.",&tolua_err);
 return 0;
#endif
}

/* method: AddStrings of class  TStrings */
static int tolua_z_VCL_TStrings_AddStrings00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TStrings",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TStrings* Strings = ((TStrings*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddStrings'",NULL);
#endif
  {
   self->AddStrings(Strings);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddStrings'.",&tolua_err);
 return 0;
#endif
}

/* method: Assign of class  TStrings */
static int tolua_z_VCL_TStrings_Assign00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TPersistent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TPersistent* Source = ((TPersistent*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Assign'",NULL);
#endif
  {
   self->Assign(Source);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Assign'.",&tolua_err);
 return 0;
#endif
}

/* method: BeginUpdate of class  TStrings */
static int tolua_z_VCL_TStrings_BeginUpdate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'BeginUpdate'",NULL);
#endif
  {
   self->BeginUpdate();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'BeginUpdate'.",&tolua_err);
 return 0;
#endif
}

/* method: Clear of class  TStrings */
static int tolua_z_VCL_TStrings_Clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Clear'",NULL);
#endif
  {
   self->Clear();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clear'.",&tolua_err);
 return 0;
#endif
}

/* method: Delete of class  TStrings */
static int tolua_z_VCL_TStrings_Delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Delete'",NULL);
#endif
  {
   self->Delete(Index);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Delete'.",&tolua_err);
 return 0;
#endif
}

/* method: EndUpdate of class  TStrings */
static int tolua_z_VCL_TStrings_EndUpdate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'EndUpdate'",NULL);
#endif
  {
   self->EndUpdate();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'EndUpdate'.",&tolua_err);
 return 0;
#endif
}

/* method: Equals of class  TStrings */
static int tolua_z_VCL_TStrings_Equals00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TStrings",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TStrings* Strings = ((TStrings*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Equals'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Equals(Strings);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Equals'.",&tolua_err);
 return 0;
#endif
}

/* method: Exchange of class  TStrings */
static int tolua_z_VCL_TStrings_Exchange00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index1 = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int Index2 = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Exchange'",NULL);
#endif
  {
   self->Exchange(Index1,Index2);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Exchange'.",&tolua_err);
 return 0;
#endif
}

/* method: GetText of class  TStrings */
static int tolua_z_VCL_TStrings_GetText00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetText'",NULL);
#endif
  {
   char* tolua_ret = (char*)  self->GetText();
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetText'.",&tolua_err);
 return 0;
#endif
}

/* method: IndexOf of class  TStrings */
static int tolua_z_VCL_TStrings_IndexOf00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isansi(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const AnsiString S = ((const AnsiString)  tolua_toansi(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IndexOf'",NULL);
#endif
  {
   int tolua_ret = (int)  self->IndexOf(S);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IndexOf'.",&tolua_err);
 return 0;
#endif
}

/* method: IndexOfName of class  TStrings */
static int tolua_z_VCL_TStrings_IndexOfName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isansi(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const AnsiString Name = ((const AnsiString)  tolua_toansi(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IndexOfName'",NULL);
#endif
  {
   int tolua_ret = (int)  self->IndexOfName(Name);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IndexOfName'.",&tolua_err);
 return 0;
#endif
}

/* method: IndexOfObject of class  TStrings */
static int tolua_z_VCL_TStrings_IndexOfObject00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TObject* AObject = ((TObject*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IndexOfObject'",NULL);
#endif
  {
   int tolua_ret = (int)  self->IndexOfObject(AObject);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IndexOfObject'.",&tolua_err);
 return 0;
#endif
}

/* method: Insert of class  TStrings */
static int tolua_z_VCL_TStrings_Insert00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isansi(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  const AnsiString S = ((const AnsiString)  tolua_toansi(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Insert'",NULL);
#endif
  {
   self->Insert(Index,S);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Insert'.",&tolua_err);
 return 0;
#endif
}

/* method: InsertObject of class  TStrings */
static int tolua_z_VCL_TStrings_InsertObject00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isansi(tolua_S,3,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,4,"TObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  const AnsiString S = ((const AnsiString)  tolua_toansi(tolua_S,3,0));
/*declare*/
  TObject* AObject = ((TObject*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'InsertObject'",NULL);
#endif
  {
   self->InsertObject(Index,S,AObject);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'InsertObject'.",&tolua_err);
 return 0;
#endif
}

/* method: LoadFromFile of class  TStrings */
static int tolua_z_VCL_TStrings_LoadFromFile00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isansi(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const AnsiString FileName = ((const AnsiString)  tolua_toansi(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'LoadFromFile'",NULL);
#endif
  {
   self->LoadFromFile(FileName);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'LoadFromFile'.",&tolua_err);
 return 0;
#endif
}

/* method: LoadFromStream of class  TStrings */
static int tolua_z_VCL_TStrings_LoadFromStream00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TStream* Stream = ((TStream*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'LoadFromStream'",NULL);
#endif
  {
   self->LoadFromStream(Stream);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'LoadFromStream'.",&tolua_err);
 return 0;
#endif
}

/* method: Move of class  TStrings */
static int tolua_z_VCL_TStrings_Move00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int CurIndex = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int NewIndex = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Move'",NULL);
#endif
  {
   self->Move(CurIndex,NewIndex);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Move'.",&tolua_err);
 return 0;
#endif
}

/* method: SaveToFile of class  TStrings */
static int tolua_z_VCL_TStrings_SaveToFile00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isansi(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const AnsiString FileName = ((const AnsiString)  tolua_toansi(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SaveToFile'",NULL);
#endif
  {
   self->SaveToFile(FileName);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SaveToFile'.",&tolua_err);
 return 0;
#endif
}

/* method: SaveToStream of class  TStrings */
static int tolua_z_VCL_TStrings_SaveToStream00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TStream",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TStream* Stream = ((TStream*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SaveToStream'",NULL);
#endif
  {
   self->SaveToStream(Stream);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SaveToStream'.",&tolua_err);
 return 0;
#endif
}

/* method: SetText of class  TStrings */
static int tolua_z_VCL_TStrings_SetText00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  char* Text = ((char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetText'",NULL);
#endif
  {
   self->SetText(Text);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetText'.",&tolua_err);
 return 0;
#endif
}

/* get function: Capacity of class  TStrings */
static int tolua_get_TStrings_Capacity(lua_State* tolua_S)
{
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Capacity'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Capacity);
 return 1;
}

/* set function: Capacity of class  TStrings */
static int tolua_set_TStrings_Capacity(lua_State* tolua_S)
{
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Capacity'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Capacity = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: CommaText of class  TStrings */
static int tolua_get_TStrings_CommaText(lua_State* tolua_S)
{
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'CommaText'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->CommaText);
 return 1;
}

/* set function: CommaText of class  TStrings */
static int tolua_set_TStrings_CommaText(lua_State* tolua_S)
{
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'CommaText'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->CommaText = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* get function: Count of class  TStrings */
static int tolua_get_TStrings_Count(lua_State* tolua_S)
{
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Count'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Count);
 return 1;
}

/* get function: Delimiter of class  TStrings */
static int tolua_get_TStrings_Delimiter(lua_State* tolua_S)
{
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Delimiter'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Delimiter);
 return 1;
}

/* set function: Delimiter of class  TStrings */
static int tolua_set_TStrings_Delimiter(lua_State* tolua_S)
{
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Delimiter'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Delimiter = ((char)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DelimitedText of class  TStrings */
static int tolua_get_TStrings_DelimitedText(lua_State* tolua_S)
{
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DelimitedText'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->DelimitedText);
 return 1;
}

/* set function: DelimitedText of class  TStrings */
static int tolua_set_TStrings_DelimitedText(lua_State* tolua_S)
{
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DelimitedText'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DelimitedText = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* get function: Names of class  TStrings */
static int tolua_get_z_VCL_TStrings_Names(lua_State* tolua_S)
{
 int tolua_index;
  TStrings* self;
 lua_pushstring(tolua_S,".self");
 lua_rawget(tolua_S,1);
 self = (TStrings*)  lua_touserdata(tolua_S,-1);
 tolua_index = (int)tolua_tonumber(tolua_S,2,0);
 tolua_pushansi(tolua_S,(const AnsiString&)self->Names[tolua_index]);
 return 1;
}

/* get function: Objects of class  TStrings */
static int tolua_get_z_VCL_TStrings_Objects(lua_State* tolua_S)
{
 int tolua_index;
  TStrings* self;
 lua_pushstring(tolua_S,".self");
 lua_rawget(tolua_S,1);
 self = (TStrings*)  lua_touserdata(tolua_S,-1);
 tolua_index = (int)tolua_tonumber(tolua_S,2,0);

/* getting type */
  char* lua_type = "TObject";
   tolua_pushusertype(tolua_S,(void*)(self->Objects[tolua_index]),lua_type);
 return 1;
}

/* set function: Objects of class  TStrings */
static int tolua_set_z_VCL_TStrings_Objects(lua_State* tolua_S)
{
 int tolua_index;
  TStrings* self;
 lua_pushstring(tolua_S,".self");
 lua_rawget(tolua_S,1);
 self = (TStrings*)  lua_touserdata(tolua_S,-1);
 tolua_index = (int)tolua_tonumber(tolua_S,2,0);
  self->Objects[tolua_index] = ((TObject*)  tolua_tousertype(tolua_S,3,0));
 return 0;
}

/* get function: QuoteChar of class  TStrings */
static int tolua_get_TStrings_QuoteChar(lua_State* tolua_S)
{
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'QuoteChar'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->QuoteChar);
 return 1;
}

/* set function: QuoteChar of class  TStrings */
static int tolua_set_TStrings_QuoteChar(lua_State* tolua_S)
{
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'QuoteChar'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->QuoteChar = ((char)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Values of class  TStrings */
static int tolua_get_z_VCL_TStrings_Values(lua_State* tolua_S)
{
 int tolua_index;
  TStrings* self;
 lua_pushstring(tolua_S,".self");
 lua_rawget(tolua_S,1);
 self = (TStrings*)  lua_touserdata(tolua_S,-1);
 tolua_index = (int)tolua_tonumber(tolua_S,2,0);
 tolua_pushansi(tolua_S,(const AnsiString&)self->Values[tolua_index]);
 return 1;
}

/* set function: Values of class  TStrings */
static int tolua_set_z_VCL_TStrings_Values(lua_State* tolua_S)
{
 int tolua_index;
  TStrings* self;
 lua_pushstring(tolua_S,".self");
 lua_rawget(tolua_S,1);
 self = (TStrings*)  lua_touserdata(tolua_S,-1);
 tolua_index = (int)tolua_tonumber(tolua_S,2,0);
  self->Values[tolua_index] = ((AnsiString)  tolua_toansi(tolua_S,3,0));
 return 0;
}

/* get function: Strings of class  TStrings */
static int tolua_get_z_VCL_TStrings_Strings(lua_State* tolua_S)
{
 int tolua_index;
  TStrings* self;
 lua_pushstring(tolua_S,".self");
 lua_rawget(tolua_S,1);
 self = (TStrings*)  lua_touserdata(tolua_S,-1);
 tolua_index = (int)tolua_tonumber(tolua_S,2,0);
 tolua_pushansi(tolua_S,(const AnsiString&)self->Strings[tolua_index]);
 return 1;
}

/* set function: Strings of class  TStrings */
static int tolua_set_z_VCL_TStrings_Strings(lua_State* tolua_S)
{
 int tolua_index;
  TStrings* self;
 lua_pushstring(tolua_S,".self");
 lua_rawget(tolua_S,1);
 self = (TStrings*)  lua_touserdata(tolua_S,-1);
 tolua_index = (int)tolua_tonumber(tolua_S,2,0);
  self->Strings[tolua_index] = ((AnsiString)  tolua_toansi(tolua_S,3,0));
 return 0;
}

/* get function: Text of class  TStrings */
static int tolua_get_TStrings_Text(lua_State* tolua_S)
{
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Text'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->Text);
 return 1;
}

/* set function: Text of class  TStrings */
static int tolua_set_TStrings_Text(lua_State* tolua_S)
{
  TStrings* self = (TStrings*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Text'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Text = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* method: new of class  TStrings */
static int tolua_z_VCL_TStrings_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TStrings* tolua_ret = (TStrings*)NULL;//  new TStrings();

/* getting type */
  char* lua_type = "TStrings";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TStrings */
static int tolua_z_VCL_TStrings_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TStrings",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TStrings* tolua_ret = (TStrings*)NULL;//  new TStrings();

/* getting type */
  char* lua_type = "TStrings";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: Assign of class  TControlScrollBar */
static int tolua_z_VCL_TControlScrollBar_Assign00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControlScrollBar",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TPersistent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TPersistent* Source = ((TPersistent*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Assign'",NULL);
#endif
  {
   self->Assign(Source);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Assign'.",&tolua_err);
 return 0;
#endif
}

/* method: ChangeBiDiPosition of class  TControlScrollBar */
static int tolua_z_VCL_TControlScrollBar_ChangeBiDiPosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControlScrollBar",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ChangeBiDiPosition'",NULL);
#endif
  {
   self->ChangeBiDiPosition();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ChangeBiDiPosition'.",&tolua_err);
 return 0;
#endif
}

/* get function: Kind of class  TControlScrollBar */
static int tolua_get_TControlScrollBar_Kind(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Kind'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Kind);
 return 1;
}

/* method: IsScrollBarVisible of class  TControlScrollBar */
static int tolua_z_VCL_TControlScrollBar_IsScrollBarVisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControlScrollBar",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsScrollBarVisible'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->IsScrollBarVisible();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsScrollBarVisible'.",&tolua_err);
 return 0;
#endif
}

/* get function: ScrollPos of class  TControlScrollBar */
static int tolua_get_TControlScrollBar_ScrollPos(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ScrollPos'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ScrollPos);
 return 1;
}

/* get function: ButtonSize of class  TControlScrollBar */
static int tolua_get_TControlScrollBar_ButtonSize(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ButtonSize'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ButtonSize);
 return 1;
}

/* set function: ButtonSize of class  TControlScrollBar */
static int tolua_set_TControlScrollBar_ButtonSize(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ButtonSize'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ButtonSize = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Color of class  TControlScrollBar */
static int tolua_get_TControlScrollBar_Color(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Color);
 return 1;
}

/* set function: Color of class  TControlScrollBar */
static int tolua_set_TControlScrollBar_Color(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Color = ((TColor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Increment of class  TControlScrollBar */
static int tolua_get_TControlScrollBar_Increment(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Increment'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Increment);
 return 1;
}

/* set function: Increment of class  TControlScrollBar */
static int tolua_set_TControlScrollBar_Increment(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Increment'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Increment = ((  Word)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Margin of class  TControlScrollBar */
static int tolua_get_TControlScrollBar_Margin(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Margin'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Margin);
 return 1;
}

/* set function: Margin of class  TControlScrollBar */
static int tolua_set_TControlScrollBar_Margin(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Margin'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Margin = ((Word)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: ParentColor of class  TControlScrollBar */
static int tolua_get_TControlScrollBar_ParentColor(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentColor'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentColor);
 return 1;
}

/* set function: ParentColor of class  TControlScrollBar */
static int tolua_set_TControlScrollBar_ParentColor(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentColor'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentColor = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Position of class  TControlScrollBar */
static int tolua_get_TControlScrollBar_Position(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Position'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Position);
 return 1;
}

/* set function: Position of class  TControlScrollBar */
static int tolua_set_TControlScrollBar_Position(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Position'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Position = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Range of class  TControlScrollBar */
static int tolua_get_TControlScrollBar_Range(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Range'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Range);
 return 1;
}

/* set function: Range of class  TControlScrollBar */
static int tolua_set_TControlScrollBar_Range(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Range'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Range = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Smooth of class  TControlScrollBar */
static int tolua_get_TControlScrollBar_Smooth(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Smooth'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Smooth);
 return 1;
}

/* set function: Smooth of class  TControlScrollBar */
static int tolua_set_TControlScrollBar_Smooth(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Smooth'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Smooth = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Size of class  TControlScrollBar */
static int tolua_get_TControlScrollBar_Size(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Size'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Size);
 return 1;
}

/* set function: Size of class  TControlScrollBar */
static int tolua_set_TControlScrollBar_Size(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Size'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Size = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Style of class  TControlScrollBar */
static int tolua_get_TControlScrollBar_Style(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Style'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Style);
 return 1;
}

/* set function: Style of class  TControlScrollBar */
static int tolua_set_TControlScrollBar_Style(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Style'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Style = ((TScrollBarStyle) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: ThumbSize of class  TControlScrollBar */
static int tolua_get_TControlScrollBar_ThumbSize(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ThumbSize'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ThumbSize);
 return 1;
}

/* set function: ThumbSize of class  TControlScrollBar */
static int tolua_set_TControlScrollBar_ThumbSize(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ThumbSize'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ThumbSize = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Tracking of class  TControlScrollBar */
static int tolua_get_TControlScrollBar_Tracking(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Tracking'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Tracking);
 return 1;
}

/* set function: Tracking of class  TControlScrollBar */
static int tolua_set_TControlScrollBar_Tracking(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Tracking'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Tracking = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Visible of class  TControlScrollBar */
static int tolua_get_TControlScrollBar_Visible(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Visible'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Visible);
 return 1;
}

/* set function: Visible of class  TControlScrollBar */
static int tolua_set_TControlScrollBar_Visible(lua_State* tolua_S)
{
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Visible'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Visible = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* method: delete of class  TControlScrollBar */
static int tolua_z_VCL_TControlScrollBar_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControlScrollBar",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControlScrollBar* self = (TControlScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TControlScrollBar */
static int tolua_z_VCL_TControlScrollBar_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TControlScrollBar",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TControlScrollBar* tolua_ret = (TControlScrollBar*)  new TControlScrollBar();

/* getting type */
  char* lua_type = "TControlScrollBar";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TControlScrollBar */
static int tolua_z_VCL_TControlScrollBar_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TControlScrollBar",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   TControlScrollBar* tolua_ret = (TControlScrollBar*)  new TControlScrollBar();

/* getting type */
  char* lua_type = "TControlScrollBar";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TSizeConstraints */
static int tolua_z_VCL_TSizeConstraints_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TSizeConstraints",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TControl* Control = ((TControl*)  tolua_tousertype(tolua_S,2,0));
  {
   TSizeConstraints* tolua_ret = (TSizeConstraints*)  new TSizeConstraints(Control);

/* getting type */
  char* lua_type = "TSizeConstraints";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TSizeConstraints */
static int tolua_z_VCL_TSizeConstraints_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TSizeConstraints",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TControl* Control = ((TControl*)  tolua_tousertype(tolua_S,2,0));
  {
   TSizeConstraints* tolua_ret = (TSizeConstraints*)  new TSizeConstraints(Control);

/* getting type */
  char* lua_type = "TSizeConstraints";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* get function: MaxHeight of class  TSizeConstraints */
static int tolua_get_TSizeConstraints_MaxHeight(lua_State* tolua_S)
{
  TSizeConstraints* self = (TSizeConstraints*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MaxHeight'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->MaxHeight);
 return 1;
}

/* set function: MaxHeight of class  TSizeConstraints */
static int tolua_set_TSizeConstraints_MaxHeight(lua_State* tolua_S)
{
  TSizeConstraints* self = (TSizeConstraints*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MaxHeight'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MaxHeight = ((  int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: MaxWidth of class  TSizeConstraints */
static int tolua_get_TSizeConstraints_MaxWidth(lua_State* tolua_S)
{
  TSizeConstraints* self = (TSizeConstraints*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MaxWidth'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->MaxWidth);
 return 1;
}

/* set function: MaxWidth of class  TSizeConstraints */
static int tolua_set_TSizeConstraints_MaxWidth(lua_State* tolua_S)
{
  TSizeConstraints* self = (TSizeConstraints*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MaxWidth'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MaxWidth = ((  int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: MinHeight of class  TSizeConstraints */
static int tolua_get_TSizeConstraints_MinHeight(lua_State* tolua_S)
{
  TSizeConstraints* self = (TSizeConstraints*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MinHeight'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->MinHeight);
 return 1;
}

/* set function: MinHeight of class  TSizeConstraints */
static int tolua_set_TSizeConstraints_MinHeight(lua_State* tolua_S)
{
  TSizeConstraints* self = (TSizeConstraints*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MinHeight'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MinHeight = ((  int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: MinWidth of class  TSizeConstraints */
static int tolua_get_TSizeConstraints_MinWidth(lua_State* tolua_S)
{
  TSizeConstraints* self = (TSizeConstraints*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MinWidth'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->MinWidth);
 return 1;
}

/* set function: MinWidth of class  TSizeConstraints */
static int tolua_set_TSizeConstraints_MinWidth(lua_State* tolua_S)
{
  TSizeConstraints* self = (TSizeConstraints*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MinWidth'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MinWidth = ((  int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* method: delete of class  TSizeConstraints */
static int tolua_z_VCL_TSizeConstraints_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TSizeConstraints",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TSizeConstraints* self = (TSizeConstraints*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* get function: Name of class  TComponent */
static int tolua_get_TComponent_Name(lua_State* tolua_S)
{
  TComponent* self = (TComponent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Name'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->Name);
 return 1;
}

/* set function: Name of class  TComponent */
static int tolua_set_TComponent_Name(lua_State* tolua_S)
{
  TComponent* self = (TComponent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Name'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Name = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* get function: Tag of class  TComponent */
static int tolua_get_TComponent_Tag(lua_State* tolua_S)
{
  TComponent* self = (TComponent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Tag'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Tag);
 return 1;
}

/* set function: Tag of class  TComponent */
static int tolua_set_TComponent_Tag(lua_State* tolua_S)
{
  TComponent* self = (TComponent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Tag'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Tag = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* method: new of class  TComponent */
static int tolua_z_VCL_TComponent_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TComponent",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TComponent* tolua_ret = (TComponent*)  new TComponent(AOwner);

/* getting type */
  char* lua_type = "TComponent";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TComponent */
static int tolua_z_VCL_TComponent_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TComponent",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TComponent* tolua_ret = (TComponent*)  new TComponent(AOwner);

/* getting type */
  char* lua_type = "TComponent";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TComponent */
static int tolua_z_VCL_TComponent_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TComponent* self = (TComponent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: ExecuteAction of class  TComponent */
static int tolua_z_VCL_TComponent_ExecuteAction00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TComponent",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TBasicAction",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TComponent* self = (TComponent*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TBasicAction* Action = ((TBasicAction*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ExecuteAction'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->ExecuteAction(Action);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ExecuteAction'.",&tolua_err);
 return 0;
#endif
}

/* method: HasParent of class  TComponent */
static int tolua_z_VCL_TComponent_HasParent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TComponent* self = (TComponent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'HasParent'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->HasParent();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'HasParent'.",&tolua_err);
 return 0;
#endif
}

/* method: UpdateAction of class  TComponent */
static int tolua_z_VCL_TComponent_UpdateAction00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TComponent",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TBasicAction",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TComponent* self = (TComponent*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TBasicAction* Action = ((TBasicAction*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'UpdateAction'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->UpdateAction(Action);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'UpdateAction'.",&tolua_err);
 return 0;
#endif
}

/* get function: Components of class  TComponent */
static int tolua_get_z_VCL_TComponent_Components(lua_State* tolua_S)
{
 int tolua_index;
  TComponent* self;
 lua_pushstring(tolua_S,".self");
 lua_rawget(tolua_S,1);
 self = (TComponent*)  lua_touserdata(tolua_S,-1);
 tolua_index = (int)tolua_tonumber(tolua_S,2,0);

/* getting type */
  char* lua_type = "TComponent";
   tolua_pushusertype(tolua_S,(void*)(self->Components[tolua_index]),lua_type);
 return 1;
}

/* get function: ComponentCount of class  TComponent */
static int tolua_get_TComponent_ComponentCount(lua_State* tolua_S)
{
  TComponent* self = (TComponent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ComponentCount'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ComponentCount);
 return 1;
}

/* get function: ComponentIndex of class  TComponent */
static int tolua_get_TComponent_ComponentIndex(lua_State* tolua_S)
{
  TComponent* self = (TComponent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ComponentIndex'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ComponentIndex);
 return 1;
}

/* set function: ComponentIndex of class  TComponent */
static int tolua_set_TComponent_ComponentIndex(lua_State* tolua_S)
{
  TComponent* self = (TComponent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ComponentIndex'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ComponentIndex = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: ComponentState of class  TComponent */
static int tolua_get_TComponent_ComponentState(lua_State* tolua_S)
{
  TComponent* self = (TComponent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ComponentState'",NULL);
#endif

/* getting type */
  char* lua_type = "Set<Classes__74, csLoading, csDesignInstance>";
   tolua_pushusertype(tolua_S,(void*)(&(self->ComponentState)),lua_type);
 return 1;
}

/* get function: ComponentStyle of class  TComponent */
static int tolua_get_TComponent_ComponentStyle(lua_State* tolua_S)
{
  TComponent* self = (TComponent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ComponentStyle'",NULL);
#endif

/* getting type */
  char* lua_type = "Set<Classes__84, csInheritable, csTransient>";
   tolua_pushusertype(tolua_S,(void*)(&(self->ComponentStyle)),lua_type);
 return 1;
}

/* get function: DesignInfo of class  TComponent */
static int tolua_get_TComponent_DesignInfo(lua_State* tolua_S)
{
  TComponent* self = (TComponent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DesignInfo'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DesignInfo);
 return 1;
}

/* set function: DesignInfo of class  TComponent */
static int tolua_set_TComponent_DesignInfo(lua_State* tolua_S)
{
  TComponent* self = (TComponent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DesignInfo'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DesignInfo = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Owner of class  TComponent */
static int tolua_get_TComponent_Owner_ptr(lua_State* tolua_S)
{
  TComponent* self = (TComponent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Owner'",NULL);
#endif

/* getting type */
  char* lua_type = "TComponent";
   tolua_pushusertype(tolua_S,(void*)(self->Owner),lua_type);
 return 1;
}

/* method: operator[] of class  TMenuItem */
static int tolua_z_VCL_TMenuItem__geti00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator[]'",NULL);
#endif
  {
   TMenuItem* tolua_ret = (TMenuItem*)  self->operator[](Index);

/* getting type */
  char* lua_type = "TMenuItem";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.geti'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TMenuItem* tolua_ret = (TMenuItem*)  new TMenuItem(AOwner);

/* getting type */
  char* lua_type = "TMenuItem";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TMenuItem* tolua_ret = (TMenuItem*)  new TMenuItem(AOwner);

/* getting type */
  char* lua_type = "TMenuItem";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: InitiateAction of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_InitiateAction00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'InitiateAction'",NULL);
#endif
  {
   self->InitiateAction();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'InitiateAction'.",&tolua_err);
 return 0;
#endif
}

/* method: Insert of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_Insert00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"TMenuItem",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  TMenuItem* Item = ((TMenuItem*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Insert'",NULL);
#endif
  {
   self->Insert(Index,Item);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Insert'.",&tolua_err);
 return 0;
#endif
}

/* method: Delete of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_Delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Delete'",NULL);
#endif
  {
   self->Delete(Index);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Delete'.",&tolua_err);
 return 0;
#endif
}

/* method: Clear of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_Clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Clear'",NULL);
#endif
  {
   self->Clear();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clear'.",&tolua_err);
 return 0;
#endif
}

/* method: Click of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_Click00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Click'",NULL);
#endif
  {
   self->Click();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Click'.",&tolua_err);
 return 0;
#endif
}

/* method: Find of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_Find00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isansi(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  AnsiString ACaption = ((AnsiString)  tolua_toansi(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Find'",NULL);
#endif
  {
   TMenuItem* tolua_ret = (TMenuItem*)  self->Find(ACaption);

/* getting type */
  char* lua_type = "TMenuItem";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Find'.",&tolua_err);
 return 0;
#endif
}

/* method: IndexOf of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_IndexOf00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TMenuItem",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TMenuItem* Item = ((TMenuItem*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IndexOf'",NULL);
#endif
  {
   int tolua_ret = (int)  self->IndexOf(Item);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IndexOf'.",&tolua_err);
 return 0;
#endif
}

/* method: IsLine of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_IsLine00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsLine'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->IsLine();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsLine'.",&tolua_err);
 return 0;
#endif
}

/* method: GetImageList of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_GetImageList00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetImageList'",NULL);
#endif
  {
   TCustomImageList* tolua_ret = (TCustomImageList*)  self->GetImageList();

/* getting type */
  char* lua_type = "TCustomImageList";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetImageList'.",&tolua_err);
 return 0;
#endif
}

/* method: GetParentComponent of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_GetParentComponent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetParentComponent'",NULL);
#endif
  {
   TComponent* tolua_ret = (TComponent*)  self->GetParentComponent();

/* getting type */
  char* lua_type = "TComponent";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetParentComponent'.",&tolua_err);
 return 0;
#endif
}

/* method: GetParentMenu of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_GetParentMenu00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetParentMenu'",NULL);
#endif
  {
   TMenu* tolua_ret = (TMenu*)  self->GetParentMenu();

/* getting type */
  char* lua_type = "TMenu";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetParentMenu'.",&tolua_err);
 return 0;
#endif
}

/* method: HasParent of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_HasParent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'HasParent'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->HasParent();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'HasParent'.",&tolua_err);
 return 0;
#endif
}

/* method: NewTopLine of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_NewTopLine00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'NewTopLine'",NULL);
#endif
  {
   int tolua_ret = (int)  self->NewTopLine();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'NewTopLine'.",&tolua_err);
 return 0;
#endif
}

/* method: NewBottomLine of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_NewBottomLine00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'NewBottomLine'",NULL);
#endif
  {
   int tolua_ret = (int)  self->NewBottomLine();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'NewBottomLine'.",&tolua_err);
 return 0;
#endif
}

/* method: InsertNewLineBefore of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_InsertNewLineBefore00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TMenuItem",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TMenuItem* AItem = ((TMenuItem*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'InsertNewLineBefore'",NULL);
#endif
  {
   int tolua_ret = (int)  self->InsertNewLineBefore(AItem);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'InsertNewLineBefore'.",&tolua_err);
 return 0;
#endif
}

/* method: InsertNewLineAfter of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_InsertNewLineAfter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TMenuItem",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TMenuItem* AItem = ((TMenuItem*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'InsertNewLineAfter'",NULL);
#endif
  {
   int tolua_ret = (int)  self->InsertNewLineAfter(AItem);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'InsertNewLineAfter'.",&tolua_err);
 return 0;
#endif
}

/* method: Add of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_Add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TMenuItem",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TMenuItem* Item = ((TMenuItem*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Add'",NULL);
#endif
  {
   self->Add(Item);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Add'.",&tolua_err);
 return 0;
#endif
}

/* method: Add of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_Add01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TMenuItem",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TMenuItem* AItems = ((const TMenuItem*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  const int AItems_Size = ((const int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Add'",NULL);
#endif
  {
   self->Add(&AItems,AItems_Size);

/* getting type */
  char* lua_type = "const TMenuItem";
   tolua_pushusertype(tolua_S,(void*)(AItems),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_TMenuItem_Add00(tolua_S);
}

/* method: Remove of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_Remove00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TMenuItem",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TMenuItem* Item = ((TMenuItem*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Remove'",NULL);
#endif
  {
   self->Remove(Item);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Remove'.",&tolua_err);
 return 0;
#endif
}

/* method: RethinkHotkeys of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_RethinkHotkeys00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RethinkHotkeys'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->RethinkHotkeys();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RethinkHotkeys'.",&tolua_err);
 return 0;
#endif
}

/* method: RethinkLines of class  TMenuItem */
static int tolua_z_VCL_TMenuItem_RethinkLines00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenuItem",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RethinkLines'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->RethinkLines();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RethinkLines'.",&tolua_err);
 return 0;
#endif
}

/* get function: Command of class  TMenuItem */
static int tolua_get_TMenuItem_Command(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Command'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Command);
 return 1;
}

/* get function: Count of class  TMenuItem */
static int tolua_get_TMenuItem_Count(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Count'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Count);
 return 1;
}

/* get function: Items of class  TMenuItem */
static int tolua_get_z_VCL_TMenuItem_Items(lua_State* tolua_S)
{
 int tolua_index;
  TMenuItem* self;
 lua_pushstring(tolua_S,".self");
 lua_rawget(tolua_S,1);
 self = (TMenuItem*)  lua_touserdata(tolua_S,-1);
 tolua_index = (int)tolua_tonumber(tolua_S,2,0);

/* getting type */
  char* lua_type = "TMenuItem";
   tolua_pushusertype(tolua_S,(void*)(self->Items[tolua_index]),lua_type);
 return 1;
}

/* get function: MenuIndex of class  TMenuItem */
static int tolua_get_TMenuItem_MenuIndex(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MenuIndex'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->MenuIndex);
 return 1;
}

/* set function: MenuIndex of class  TMenuItem */
static int tolua_set_TMenuItem_MenuIndex(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MenuIndex'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MenuIndex = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Parent of class  TMenuItem */
static int tolua_get_TMenuItem_Parent_ptr(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Parent'",NULL);
#endif

/* getting type */
  char* lua_type = "TMenuItem";
   tolua_pushusertype(tolua_S,(void*)(self->Parent),lua_type);
 return 1;
}

/* get function: Action of class  TMenuItem */
static int tolua_get_TMenuItem_Action_ptr(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Action'",NULL);
#endif

/* getting type */
  char* lua_type = "TBasicAction";
   tolua_pushusertype(tolua_S,(void*)(self->Action),lua_type);
 return 1;
}

/* set function: Action of class  TMenuItem */
static int tolua_set_TMenuItem_Action_ptr(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Action'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TBasicAction",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Action = ((TBasicAction*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: AutoCheck of class  TMenuItem */
static int tolua_get_TMenuItem_AutoCheck(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoCheck'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->AutoCheck);
 return 1;
}

/* set function: AutoCheck of class  TMenuItem */
static int tolua_set_TMenuItem_AutoCheck(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoCheck'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AutoCheck = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: AutoHotkeys of class  TMenuItem */
static int tolua_get_TMenuItem_AutoHotkeys(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoHotkeys'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->AutoHotkeys);
 return 1;
}

/* set function: AutoHotkeys of class  TMenuItem */
static int tolua_set_TMenuItem_AutoHotkeys(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoHotkeys'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AutoHotkeys = ((TMenuItemAutoFlag) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: AutoLineReduction of class  TMenuItem */
static int tolua_get_TMenuItem_AutoLineReduction(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoLineReduction'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->AutoLineReduction);
 return 1;
}

/* set function: AutoLineReduction of class  TMenuItem */
static int tolua_set_TMenuItem_AutoLineReduction(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoLineReduction'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AutoLineReduction = ((TMenuItemAutoFlag) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Bitmap of class  TMenuItem */
static int tolua_get_TMenuItem_Bitmap_ptr(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Bitmap'",NULL);
#endif

/* getting type */
  char* lua_type = "Graphics::TBitmap";
   tolua_pushusertype(tolua_S,(void*)(self->Bitmap),lua_type);
 return 1;
}

/* set function: Bitmap of class  TMenuItem */
static int tolua_set_TMenuItem_Bitmap_ptr(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Bitmap'",NULL);
  if (!tolua_isusertype(tolua_S,2,"Graphics::TBitmap",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Bitmap = ((Graphics::TBitmap*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: Break of class  TMenuItem */
static int tolua_get_TMenuItem_Break(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Break'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Break);
 return 1;
}

/* set function: Break of class  TMenuItem */
static int tolua_set_TMenuItem_Break(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Break'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Break = ((TMenuBreak) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Caption of class  TMenuItem */
static int tolua_get_TMenuItem_Caption(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Caption'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->Caption);
 return 1;
}

/* set function: Caption of class  TMenuItem */
static int tolua_set_TMenuItem_Caption(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Caption'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Caption = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* get function: Checked of class  TMenuItem */
static int tolua_get_TMenuItem_Checked(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Checked'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Checked);
 return 1;
}

/* set function: Checked of class  TMenuItem */
static int tolua_set_TMenuItem_Checked(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Checked'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Checked = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: SubMenuImages of class  TMenuItem */
static int tolua_get_TMenuItem_SubMenuImages_ptr(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'SubMenuImages'",NULL);
#endif

/* getting type */
  char* lua_type = "TCustomImageList";
   tolua_pushusertype(tolua_S,(void*)(self->SubMenuImages),lua_type);
 return 1;
}

/* set function: SubMenuImages of class  TMenuItem */
static int tolua_set_TMenuItem_SubMenuImages_ptr(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'SubMenuImages'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TCustomImageList",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SubMenuImages = ((TCustomImageList*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: Default of class  TMenuItem */
static int tolua_get_TMenuItem_Default(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Default'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Default);
 return 1;
}

/* set function: Default of class  TMenuItem */
static int tolua_set_TMenuItem_Default(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Default'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Default = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Enabled of class  TMenuItem */
static int tolua_get_TMenuItem_Enabled(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Enabled);
 return 1;
}

/* set function: Enabled of class  TMenuItem */
static int tolua_set_TMenuItem_Enabled(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: GroupIndex of class  TMenuItem */
static int tolua_get_TMenuItem_GroupIndex(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'GroupIndex'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->GroupIndex);
 return 1;
}

/* set function: GroupIndex of class  TMenuItem */
static int tolua_set_TMenuItem_GroupIndex(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'GroupIndex'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->GroupIndex = ((Byte)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: HelpContext of class  TMenuItem */
static int tolua_get_TMenuItem_HelpContext(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HelpContext'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->HelpContext);
 return 1;
}

/* set function: HelpContext of class  TMenuItem */
static int tolua_set_TMenuItem_HelpContext(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HelpContext'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->HelpContext = ((  int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Hint of class  TMenuItem */
static int tolua_get_TMenuItem_Hint(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Hint'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->Hint);
 return 1;
}

/* set function: Hint of class  TMenuItem */
static int tolua_set_TMenuItem_Hint(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Hint'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Hint = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* get function: ImageIndex of class  TMenuItem */
static int tolua_get_TMenuItem_ImageIndex(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ImageIndex'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ImageIndex);
 return 1;
}

/* set function: ImageIndex of class  TMenuItem */
static int tolua_set_TMenuItem_ImageIndex(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ImageIndex'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ImageIndex = ((  int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: RadioItem of class  TMenuItem */
static int tolua_get_TMenuItem_RadioItem(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'RadioItem'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->RadioItem);
 return 1;
}

/* set function: RadioItem of class  TMenuItem */
static int tolua_set_TMenuItem_RadioItem(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'RadioItem'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->RadioItem = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ShortCut of class  TMenuItem */
static int tolua_get_TMenuItem_ShortCut(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ShortCut'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ShortCut);
 return 1;
}

/* set function: ShortCut of class  TMenuItem */
static int tolua_set_TMenuItem_ShortCut(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ShortCut'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ShortCut = ((  Word)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Visible of class  TMenuItem */
static int tolua_get_TMenuItem_Visible(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Visible'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Visible);
 return 1;
}

/* set function: Visible of class  TMenuItem */
static int tolua_set_TMenuItem_Visible(lua_State* tolua_S)
{
  TMenuItem* self = (TMenuItem*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Visible'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Visible = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* method: new of class  TMenu */
static int tolua_z_VCL_TMenu_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TMenu",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TMenu* tolua_ret = (TMenu*)  new TMenu(AOwner);

/* getting type */
  char* lua_type = "TMenu";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TMenu */
static int tolua_z_VCL_TMenu_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TMenu",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TMenu* tolua_ret = (TMenu*)  new TMenu(AOwner);

/* getting type */
  char* lua_type = "TMenu";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TMenu */
static int tolua_z_VCL_TMenu_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenu",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenu* self = (TMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: DispatchCommand of class  TMenu */
static int tolua_z_VCL_TMenu_DispatchCommand00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenu",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenu* self = (TMenu*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  Word ACommand = ((Word)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DispatchCommand'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->DispatchCommand(ACommand);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DispatchCommand'.",&tolua_err);
 return 0;
#endif
}

/* method: FindItem of class  TMenu */
static int tolua_z_VCL_TMenu_FindItem00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenu",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenu* self = (TMenu*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Value = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  TFindItemKind Kind = ((TFindItemKind) (int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'FindItem'",NULL);
#endif
  {
   TMenuItem* tolua_ret = (TMenuItem*)  self->FindItem(Value,Kind);

/* getting type */
  char* lua_type = "TMenuItem";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'FindItem'.",&tolua_err);
 return 0;
#endif
}

/* method: GetHelpContext of class  TMenu */
static int tolua_z_VCL_TMenu_GetHelpContext00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenu",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenu* self = (TMenu*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Value = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  bool ByCommand = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetHelpContext'",NULL);
#endif
  {
    int tolua_ret = (  int)  self->GetHelpContext(Value,ByCommand);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetHelpContext'.",&tolua_err);
 return 0;
#endif
}

/* get function: Images of class  TMenu */
static int tolua_get_TMenu_Images_ptr(lua_State* tolua_S)
{
  TMenu* self = (TMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Images'",NULL);
#endif

/* getting type */
  char* lua_type = "TCustomImageList";
   tolua_pushusertype(tolua_S,(void*)(self->Images),lua_type);
 return 1;
}

/* set function: Images of class  TMenu */
static int tolua_set_TMenu_Images_ptr(lua_State* tolua_S)
{
  TMenu* self = (TMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Images'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TCustomImageList",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Images = ((TCustomImageList*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* method: IsRightToLeft of class  TMenu */
static int tolua_z_VCL_TMenu_IsRightToLeft00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenu",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenu* self = (TMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsRightToLeft'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->IsRightToLeft();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsRightToLeft'.",&tolua_err);
 return 0;
#endif
}

/* method: IsShortCut of class  TMenu */
static int tolua_z_VCL_TMenu_IsShortCut00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenu",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TWMKey",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenu* self = (TMenu*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TWMKey* Message = ((TWMKey*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsShortCut'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->IsShortCut(*Message);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsShortCut'.",&tolua_err);
 return 0;
#endif
}

/* method: ParentBiDiModeChanged of class  TMenu */
static int tolua_z_VCL_TMenu_ParentBiDiModeChanged00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenu",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenu* self = (TMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ParentBiDiModeChanged'",NULL);
#endif
  {
   self->ParentBiDiModeChanged();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ParentBiDiModeChanged'.",&tolua_err);
 return 0;
#endif
}

/* method: ParentBiDiModeChanged of class  TMenu */
static int tolua_z_VCL_TMenu_ParentBiDiModeChanged01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenu",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  TMenu* self = (TMenu*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TObject* AControl = ((TObject*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ParentBiDiModeChanged'",NULL);
#endif
  {
   self->ParentBiDiModeChanged(AControl);
  }
 }
 return 0;
tolua_lerror:
 return tolua_z_VCL_TMenu_ParentBiDiModeChanged00(tolua_S);
}

/* method: ProcessMenuChar of class  TMenu */
static int tolua_z_VCL_TMenu_ProcessMenuChar00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMenu",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TWMMenuChar",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMenu* self = (TMenu*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TWMMenuChar* Message = ((TWMMenuChar*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ProcessMenuChar'",NULL);
#endif
  {
   self->ProcessMenuChar(*Message);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ProcessMenuChar'.",&tolua_err);
 return 0;
#endif
}

/* get function: AutoHotkeys of class  TMenu */
static int tolua_get_TMenu_AutoHotkeys(lua_State* tolua_S)
{
  TMenu* self = (TMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoHotkeys'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->AutoHotkeys);
 return 1;
}

/* set function: AutoHotkeys of class  TMenu */
static int tolua_set_TMenu_AutoHotkeys(lua_State* tolua_S)
{
  TMenu* self = (TMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoHotkeys'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AutoHotkeys = ((   int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: AutoLineReduction of class  TMenu */
static int tolua_get_TMenu_AutoLineReduction(lua_State* tolua_S)
{
  TMenu* self = (TMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoLineReduction'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->AutoLineReduction);
 return 1;
}

/* set function: AutoLineReduction of class  TMenu */
static int tolua_set_TMenu_AutoLineReduction(lua_State* tolua_S)
{
  TMenu* self = (TMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoLineReduction'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AutoLineReduction = ((   int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: BiDiMode of class  TMenu */
static int tolua_get_TMenu_BiDiMode(lua_State* tolua_S)
{
  TMenu* self = (TMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BiDiMode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BiDiMode);
 return 1;
}

/* set function: BiDiMode of class  TMenu */
static int tolua_set_TMenu_BiDiMode(lua_State* tolua_S)
{
  TMenu* self = (TMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BiDiMode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BiDiMode = ((TBiDiMode) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: OwnerDraw of class  TMenu */
static int tolua_get_TMenu_OwnerDraw(lua_State* tolua_S)
{
  TMenu* self = (TMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'OwnerDraw'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->OwnerDraw);
 return 1;
}

/* set function: OwnerDraw of class  TMenu */
static int tolua_set_TMenu_OwnerDraw(lua_State* tolua_S)
{
  TMenu* self = (TMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'OwnerDraw'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->OwnerDraw = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentBiDiMode of class  TMenu */
static int tolua_get_TMenu_ParentBiDiMode(lua_State* tolua_S)
{
  TMenu* self = (TMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentBiDiMode);
 return 1;
}

/* set function: ParentBiDiMode of class  TMenu */
static int tolua_set_TMenu_ParentBiDiMode(lua_State* tolua_S)
{
  TMenu* self = (TMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentBiDiMode = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Items of class  TMenu */
static int tolua_get_TMenu_Items_ptr(lua_State* tolua_S)
{
  TMenu* self = (TMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Items'",NULL);
#endif

/* getting type */
  char* lua_type = "TMenuItem";
   tolua_pushusertype(tolua_S,(void*)(self->Items),lua_type);
 return 1;
}

/* method: new of class  TPopupMenu */
static int tolua_z_VCL_TPopupMenu_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TPopupMenu",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TPopupMenu* tolua_ret = (TPopupMenu*)  new TPopupMenu(AOwner);

/* getting type */
  char* lua_type = "TPopupMenu";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TPopupMenu */
static int tolua_z_VCL_TPopupMenu_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TPopupMenu",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TPopupMenu* tolua_ret = (TPopupMenu*)  new TPopupMenu(AOwner);

/* getting type */
  char* lua_type = "TPopupMenu";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TPopupMenu */
static int tolua_z_VCL_TPopupMenu_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TPopupMenu",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TPopupMenu* self = (TPopupMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: Popup of class  TPopupMenu */
static int tolua_z_VCL_TPopupMenu_Popup00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TPopupMenu",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TPopupMenu* self = (TPopupMenu*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int X = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int Y = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Popup'",NULL);
#endif
  {
   self->Popup(X,Y);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Popup'.",&tolua_err);
 return 0;
#endif
}

/* get function: PopupComponent of class  TPopupMenu */
static int tolua_get_TPopupMenu_PopupComponent_ptr(lua_State* tolua_S)
{
  TPopupMenu* self = (TPopupMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PopupComponent'",NULL);
#endif

/* getting type */
  char* lua_type = "TComponent";
   tolua_pushusertype(tolua_S,(void*)(self->PopupComponent),lua_type);
 return 1;
}

/* set function: PopupComponent of class  TPopupMenu */
static int tolua_set_TPopupMenu_PopupComponent_ptr(lua_State* tolua_S)
{
  TPopupMenu* self = (TPopupMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PopupComponent'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->PopupComponent = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: PopupPoint of class  TPopupMenu */
static int tolua_get_TPopupMenu_PopupPoint(lua_State* tolua_S)
{
  TPopupMenu* self = (TPopupMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PopupPoint'",NULL);
#endif

/* getting type */
  char* lua_type = "TPoint";
   tolua_pushusertype(tolua_S,(void*)(&(self->PopupPoint)),lua_type);
 return 1;
}

/* get function: Alignment of class  TPopupMenu */
static int tolua_get_TPopupMenu_Alignment(lua_State* tolua_S)
{
  TPopupMenu* self = (TPopupMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Alignment'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Alignment);
 return 1;
}

/* set function: Alignment of class  TPopupMenu */
static int tolua_set_TPopupMenu_Alignment(lua_State* tolua_S)
{
  TPopupMenu* self = (TPopupMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Alignment'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Alignment = ((TPopupAlignment) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: AutoPopup of class  TPopupMenu */
static int tolua_get_TPopupMenu_AutoPopup(lua_State* tolua_S)
{
  TPopupMenu* self = (TPopupMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoPopup'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->AutoPopup);
 return 1;
}

/* set function: AutoPopup of class  TPopupMenu */
static int tolua_set_TPopupMenu_AutoPopup(lua_State* tolua_S)
{
  TPopupMenu* self = (TPopupMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoPopup'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AutoPopup = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: HelpContext of class  TPopupMenu */
static int tolua_get_TPopupMenu_HelpContext(lua_State* tolua_S)
{
  TPopupMenu* self = (TPopupMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HelpContext'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->HelpContext);
 return 1;
}

/* set function: HelpContext of class  TPopupMenu */
static int tolua_set_TPopupMenu_HelpContext(lua_State* tolua_S)
{
  TPopupMenu* self = (TPopupMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HelpContext'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->HelpContext = ((  int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: MenuAnimation of class  TPopupMenu */
static int tolua_get_TPopupMenu_MenuAnimation(lua_State* tolua_S)
{
  TPopupMenu* self = (TPopupMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MenuAnimation'",NULL);
#endif

/* getting type */
  char* lua_type = "Set<TMenuAnimations, maLeftToRight, maNone>";
   tolua_pushusertype(tolua_S,(void*)(&(self->MenuAnimation)),lua_type);
 return 1;
}

/* set function: MenuAnimation of class  TPopupMenu */
static int tolua_set_TPopupMenu_MenuAnimation(lua_State* tolua_S)
{
  TPopupMenu* self = (TPopupMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MenuAnimation'",NULL);
  if (!tolua_isusertype(tolua_S,2,"Set<TMenuAnimations, maLeftToRight, maNone>",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MenuAnimation = *((  Set<TMenuAnimations, maLeftToRight, maNone>*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: TrackButton of class  TPopupMenu */
static int tolua_get_TPopupMenu_TrackButton(lua_State* tolua_S)
{
  TPopupMenu* self = (TPopupMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TrackButton'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->TrackButton);
 return 1;
}

/* set function: TrackButton of class  TPopupMenu */
static int tolua_set_TPopupMenu_TrackButton(lua_State* tolua_S)
{
  TPopupMenu* self = (TPopupMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TrackButton'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->TrackButton = ((TTrackButton) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* method: Merge of class  TMainMenu */
static int tolua_z_VCL_TMainMenu_Merge00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMainMenu",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TMainMenu",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMainMenu* self = (TMainMenu*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TMainMenu* Menu = ((TMainMenu*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Merge'",NULL);
#endif
  {
   self->Merge(Menu);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Merge'.",&tolua_err);
 return 0;
#endif
}

/* method: Unmerge of class  TMainMenu */
static int tolua_z_VCL_TMainMenu_Unmerge00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMainMenu",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TMainMenu",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMainMenu* self = (TMainMenu*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TMainMenu* Menu = ((TMainMenu*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Unmerge'",NULL);
#endif
  {
   self->Unmerge(Menu);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Unmerge'.",&tolua_err);
 return 0;
#endif
}

/* get function: AutoMerge of class  TMainMenu */
static int tolua_get_TMainMenu_AutoMerge(lua_State* tolua_S)
{
  TMainMenu* self = (TMainMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoMerge'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->AutoMerge);
 return 1;
}

/* set function: AutoMerge of class  TMainMenu */
static int tolua_set_TMainMenu_AutoMerge(lua_State* tolua_S)
{
  TMainMenu* self = (TMainMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoMerge'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AutoMerge = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* method: new of class  TMainMenu */
static int tolua_z_VCL_TMainMenu_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TMainMenu",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TMainMenu* tolua_ret = (TMainMenu*)  new TMainMenu(AOwner);

/* getting type */
  char* lua_type = "TMainMenu";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TMainMenu */
static int tolua_z_VCL_TMainMenu_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TMainMenu",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TMainMenu* tolua_ret = (TMainMenu*)  new TMainMenu(AOwner);

/* getting type */
  char* lua_type = "TMainMenu";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TMainMenu */
static int tolua_z_VCL_TMainMenu_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMainMenu",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMainMenu* self = (TMainMenu*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TCustomImageList* tolua_ret = (TCustomImageList*)  new TCustomImageList(AOwner);

/* getting type */
  char* lua_type = "TCustomImageList";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TCustomImageList* tolua_ret = (TCustomImageList*)  new TCustomImageList(AOwner);

/* getting type */
  char* lua_type = "TCustomImageList";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  int AWidth = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int AHeight = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   TCustomImageList* tolua_ret = (TCustomImageList*)  new TCustomImageList(AWidth,AHeight);

/* getting type */
  char* lua_type = "TCustomImageList";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_TCustomImageList_new00(tolua_S);
}

/* method: new_local of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  int AWidth = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int AHeight = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   TCustomImageList* tolua_ret = (TCustomImageList*)  new TCustomImageList(AWidth,AHeight);

/* getting type */
  char* lua_type = "TCustomImageList";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_TCustomImageList_new00_local(tolua_S);
}

/* method: delete of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: Assign of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_Assign00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TPersistent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TPersistent* Source = ((TPersistent*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Assign'",NULL);
#endif
  {
   self->Assign(Source);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Assign'.",&tolua_err);
 return 0;
#endif
}

/* method: Add of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_Add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"Graphics::TBitmap",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"Graphics::TBitmap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  Graphics::TBitmap* Image = ((Graphics::TBitmap*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  Graphics::TBitmap* Mask = ((Graphics::TBitmap*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Add'",NULL);
#endif
  {
   int tolua_ret = (int)  self->Add(Image,Mask);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Add'.",&tolua_err);
 return 0;
#endif
}

/* method: AddIcon of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_AddIcon00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TIcon",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TIcon* Image = ((TIcon*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddIcon'",NULL);
#endif
  {
   int tolua_ret = (int)  self->AddIcon(Image);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddIcon'.",&tolua_err);
 return 0;
#endif
}

/* method: AddImages of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_AddImages00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TCustomImageList* Value = ((TCustomImageList*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddImages'",NULL);
#endif
  {
   self->AddImages(Value);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddImages'.",&tolua_err);
 return 0;
#endif
}

/* method: AddMasked of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_AddMasked00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"Graphics::TBitmap",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  Graphics::TBitmap* Image = ((Graphics::TBitmap*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  TColor MaskColor = ((TColor) (int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddMasked'",NULL);
#endif
  {
   int tolua_ret = (int)  self->AddMasked(Image,MaskColor);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddMasked'.",&tolua_err);
 return 0;
#endif
}

/* method: Clear of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_Clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Clear'",NULL);
#endif
  {
   self->Clear();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clear'.",&tolua_err);
 return 0;
#endif
}

/* method: Delete of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_Delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Delete'",NULL);
#endif
  {
   self->Delete(Index);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Delete'.",&tolua_err);
 return 0;
#endif
}

/* method: Draw of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_Draw00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TCanvas",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,6,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TCanvas* Canvas = ((TCanvas*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  int X = ((int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  int Y = ((int)  tolua_tonumber(tolua_S,4,0));
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,5,0));
/*declare*/
  bool Enabled = ((bool)  tolua_toboolean(tolua_S,6,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Draw'",NULL);
#endif
  {
   self->Draw(Canvas,X,Y,Index,Enabled);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Draw'.",&tolua_err);
 return 0;
#endif
}

/* method: Draw of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_Draw01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TCanvas",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,8,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,9,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TCanvas* Canvas = ((TCanvas*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  int X = ((int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  int Y = ((int)  tolua_tonumber(tolua_S,4,0));
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,5,0));
/*declare*/
  TDrawingStyle ADrawingStyle = ((TDrawingStyle) (int)  tolua_tonumber(tolua_S,6,0));
/*declare*/
  TImageType AImageType = ((TImageType) (int)  tolua_tonumber(tolua_S,7,0));
/*declare*/
  bool Enabled = ((bool)  tolua_toboolean(tolua_S,8,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Draw'",NULL);
#endif
  {
   self->Draw(Canvas,X,Y,Index,ADrawingStyle,AImageType,Enabled);
  }
 }
 return 0;
tolua_lerror:
 return tolua_z_VCL_TCustomImageList_Draw00(tolua_S);
}

/* method: DrawOverlay of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_DrawOverlay00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TCanvas",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,6,"Shortint",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,7,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TCanvas* Canvas = ((TCanvas*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  int X = ((int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  int Y = ((int)  tolua_tonumber(tolua_S,4,0));
/*declare*/
  int ImageIndex = ((int)  tolua_tonumber(tolua_S,5,0));
/*declare*/
   Shortint Overlay = *((  Shortint*)  tolua_tousertype(tolua_S,6,0));
/*declare*/
  bool Enabled = ((bool)  tolua_toboolean(tolua_S,7,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DrawOverlay'",NULL);
#endif
  {
   self->DrawOverlay(Canvas,X,Y,ImageIndex,Overlay,Enabled);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DrawOverlay'.",&tolua_err);
 return 0;
#endif
}

/* method: DrawOverlay of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_DrawOverlay01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TCanvas",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,6,"Shortint",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,9,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,10,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TCanvas* Canvas = ((TCanvas*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  int X = ((int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  int Y = ((int)  tolua_tonumber(tolua_S,4,0));
/*declare*/
  int ImageIndex = ((int)  tolua_tonumber(tolua_S,5,0));
/*declare*/
   Shortint Overlay = *((  Shortint*)  tolua_tousertype(tolua_S,6,0));
/*declare*/
  TDrawingStyle ADrawingStyle = ((TDrawingStyle) (int)  tolua_tonumber(tolua_S,7,0));
/*declare*/
  TImageType AImageType = ((TImageType) (int)  tolua_tonumber(tolua_S,8,0));
/*declare*/
  bool Enabled = ((bool)  tolua_toboolean(tolua_S,9,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DrawOverlay'",NULL);
#endif
  {
   self->DrawOverlay(Canvas,X,Y,ImageIndex,Overlay,ADrawingStyle,AImageType,Enabled);
  }
 }
 return 0;
tolua_lerror:
 return tolua_z_VCL_TCustomImageList_DrawOverlay00(tolua_S);
}

/* method: FileLoad of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_FileLoad00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isansi(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TResType ResType = ((TResType) (int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  const AnsiString Name = ((const AnsiString)  tolua_toansi(tolua_S,3,0));
/*declare*/
  TColor MaskColor = ((TColor) (int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'FileLoad'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->FileLoad(ResType,Name,MaskColor);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'FileLoad'.",&tolua_err);
 return 0;
#endif
}

/* method: GetBitmap of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_GetBitmap00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"Graphics::TBitmap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  Graphics::TBitmap* Image = ((Graphics::TBitmap*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetBitmap'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->GetBitmap(Index,Image);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetBitmap'.",&tolua_err);
 return 0;
#endif
}

/* method: GetHotSpot of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_GetHotSpot00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetHotSpot'",NULL);
#endif
  {
   TPoint tolua_ret = (TPoint)  self->GetHotSpot();
   {
#ifdef __cplusplus
    void* tolua_obj = new TPoint(tolua_ret);

/* getting type */
  char* lua_type = "TPoint";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(TPoint));

/* getting type */
  char* lua_type = "TPoint";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetHotSpot'.",&tolua_err);
 return 0;
#endif
}

/* method: GetIcon of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_GetIcon00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"TIcon",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  TIcon* Image = ((TIcon*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetIcon'",NULL);
#endif
  {
   self->GetIcon(Index,Image);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetIcon'.",&tolua_err);
 return 0;
#endif
}

/* method: GetIcon of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_GetIcon01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"TIcon",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  TIcon* Image = ((TIcon*)  tolua_tousertype(tolua_S,3,0));
/*declare*/
  TDrawingStyle ADrawingStyle = ((TDrawingStyle) (int)  tolua_tonumber(tolua_S,4,0));
/*declare*/
  TImageType AImageType = ((TImageType) (int)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetIcon'",NULL);
#endif
  {
   self->GetIcon(Index,Image,ADrawingStyle,AImageType);
  }
 }
 return 0;
tolua_lerror:
 return tolua_z_VCL_TCustomImageList_GetIcon00(tolua_S);
}

/* method: GetResource of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_GetResource00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isansi(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,5,"TLoadResources",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TResType ResType = ((TResType) (int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  const AnsiString Name = ((const AnsiString)  tolua_toansi(tolua_S,3,0));
/*declare*/
  int Width = ((int)  tolua_tonumber(tolua_S,4,0));
/*declare*/
  TLoadResources LoadFlags = *((TLoadResources*)  tolua_tousertype(tolua_S,5,0));
/*declare*/
  TColor MaskColor = ((TColor) (int)  tolua_tonumber(tolua_S,6,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetResource'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->GetResource(ResType,Name,Width,LoadFlags,MaskColor);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetResource'.",&tolua_err);
 return 0;
#endif
}

/* method: GetInstRes of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_GetInstRes00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isansi(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,6,"TLoadResources",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  unsigned Instance = ((unsigned)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  TResType ResType = ((TResType) (int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  const AnsiString Name = ((const AnsiString)  tolua_toansi(tolua_S,4,0));
/*declare*/
  int Width = ((int)  tolua_tonumber(tolua_S,5,0));
/*declare*/
  TLoadResources LoadFlags = *((TLoadResources*)  tolua_tousertype(tolua_S,6,0));
/*declare*/
  TColor MaskColor = ((TColor) (int)  tolua_tonumber(tolua_S,7,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetInstRes'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->GetInstRes(Instance,ResType,Name,Width,LoadFlags,MaskColor);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetInstRes'.",&tolua_err);
 return 0;
#endif
}

/* method: GetInstRes of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_GetInstRes01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,6,"TLoadResources",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  unsigned Instance = ((unsigned)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  TResType ResType = ((TResType) (int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  unsigned ResID = ((unsigned)  tolua_tonumber(tolua_S,4,0));
/*declare*/
  int Width = ((int)  tolua_tonumber(tolua_S,5,0));
/*declare*/
  TLoadResources LoadFlags = *((TLoadResources*)  tolua_tousertype(tolua_S,6,0));
/*declare*/
  TColor MaskColor = ((TColor) (int)  tolua_tonumber(tolua_S,7,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetInstRes'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->GetInstRes(Instance,ResType,ResID,Width,LoadFlags,MaskColor);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_TCustomImageList_GetInstRes00(tolua_S);
}

/* method: HandleAllocated of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_HandleAllocated00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'HandleAllocated'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->HandleAllocated();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'HandleAllocated'.",&tolua_err);
 return 0;
#endif
}

/* method: Insert of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_Insert00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"Graphics::TBitmap",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,4,"Graphics::TBitmap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  Graphics::TBitmap* Image = ((Graphics::TBitmap*)  tolua_tousertype(tolua_S,3,0));
/*declare*/
  Graphics::TBitmap* Mask = ((Graphics::TBitmap*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Insert'",NULL);
#endif
  {
   self->Insert(Index,Image,Mask);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Insert'.",&tolua_err);
 return 0;
#endif
}

/* method: InsertIcon of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_InsertIcon00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"TIcon",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  TIcon* Image = ((TIcon*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'InsertIcon'",NULL);
#endif
  {
   self->InsertIcon(Index,Image);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'InsertIcon'.",&tolua_err);
 return 0;
#endif
}

/* method: InsertMasked of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_InsertMasked00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"Graphics::TBitmap",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  Graphics::TBitmap* Image = ((Graphics::TBitmap*)  tolua_tousertype(tolua_S,3,0));
/*declare*/
  TColor MaskColor = ((TColor) (int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'InsertMasked'",NULL);
#endif
  {
   self->InsertMasked(Index,Image,MaskColor);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'InsertMasked'.",&tolua_err);
 return 0;
#endif
}

/* method: Move of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_Move00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int CurIndex = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int NewIndex = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Move'",NULL);
#endif
  {
   self->Move(CurIndex,NewIndex);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Move'.",&tolua_err);
 return 0;
#endif
}

/* method: Overlay of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_Overlay00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"Shortint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int ImageIndex = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
   Shortint Overlay = *((  Shortint*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Overlay'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Overlay(ImageIndex,Overlay);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Overlay'.",&tolua_err);
 return 0;
#endif
}

/* method: RegisterChanges of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_RegisterChanges00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TChangeLink",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TChangeLink* Value = ((TChangeLink*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RegisterChanges'",NULL);
#endif
  {
   self->RegisterChanges(Value);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RegisterChanges'.",&tolua_err);
 return 0;
#endif
}

/* method: ResourceLoad of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_ResourceLoad00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isansi(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TResType ResType = ((TResType) (int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  const AnsiString Name = ((const AnsiString)  tolua_toansi(tolua_S,3,0));
/*declare*/
  TColor MaskColor = ((TColor) (int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ResourceLoad'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->ResourceLoad(ResType,Name,MaskColor);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ResourceLoad'.",&tolua_err);
 return 0;
#endif
}

/* method: ResInstLoad of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_ResInstLoad00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isansi(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  unsigned Instance = ((unsigned)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  TResType ResType = ((TResType) (int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  const AnsiString Name = ((const AnsiString)  tolua_toansi(tolua_S,4,0));
/*declare*/
  TColor MaskColor = ((TColor) (int)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ResInstLoad'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->ResInstLoad(Instance,ResType,Name,MaskColor);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ResInstLoad'.",&tolua_err);
 return 0;
#endif
}

/* method: Replace of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_Replace00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"Graphics::TBitmap",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,4,"Graphics::TBitmap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  Graphics::TBitmap* Image = ((Graphics::TBitmap*)  tolua_tousertype(tolua_S,3,0));
/*declare*/
  Graphics::TBitmap* Mask = ((Graphics::TBitmap*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Replace'",NULL);
#endif
  {
   self->Replace(Index,Image,Mask);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Replace'.",&tolua_err);
 return 0;
#endif
}

/* method: ReplaceIcon of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_ReplaceIcon00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"TIcon",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  TIcon* Image = ((TIcon*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReplaceIcon'",NULL);
#endif
  {
   self->ReplaceIcon(Index,Image);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReplaceIcon'.",&tolua_err);
 return 0;
#endif
}

/* method: ReplaceMasked of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_ReplaceMasked00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"Graphics::TBitmap",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  Graphics::TBitmap* NewImage = ((Graphics::TBitmap*)  tolua_tousertype(tolua_S,3,0));
/*declare*/
  TColor MaskColor = ((TColor) (int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReplaceMasked'",NULL);
#endif
  {
   self->ReplaceMasked(Index,NewImage,MaskColor);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReplaceMasked'.",&tolua_err);
 return 0;
#endif
}

/* method: UnRegisterChanges of class  TCustomImageList */
static int tolua_z_VCL_TCustomImageList_UnRegisterChanges00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomImageList",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TChangeLink",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TChangeLink* Value = ((TChangeLink*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'UnRegisterChanges'",NULL);
#endif
  {
   self->UnRegisterChanges(Value);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'UnRegisterChanges'.",&tolua_err);
 return 0;
#endif
}

/* get function: Count of class  TCustomImageList */
static int tolua_get_TCustomImageList_Count(lua_State* tolua_S)
{
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Count'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Count);
 return 1;
}

/* get function: Handle of class  TCustomImageList */
static int tolua_get_TCustomImageList_Handle(lua_State* tolua_S)
{
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Handle'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Handle);
 return 1;
}

/* set function: Handle of class  TCustomImageList */
static int tolua_set_TCustomImageList_Handle(lua_State* tolua_S)
{
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Handle'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Handle = ((unsigned)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: AllocBy of class  TCustomImageList */
static int tolua_get_TCustomImageList_AllocBy(lua_State* tolua_S)
{
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AllocBy'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->AllocBy);
 return 1;
}

/* set function: AllocBy of class  TCustomImageList */
static int tolua_set_TCustomImageList_AllocBy(lua_State* tolua_S)
{
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AllocBy'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AllocBy = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: BlendColor of class  TCustomImageList */
static int tolua_get_TCustomImageList_BlendColor(lua_State* tolua_S)
{
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BlendColor'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BlendColor);
 return 1;
}

/* set function: BlendColor of class  TCustomImageList */
static int tolua_set_TCustomImageList_BlendColor(lua_State* tolua_S)
{
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BlendColor'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BlendColor = ((TColor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: BkColor of class  TCustomImageList */
static int tolua_get_TCustomImageList_BkColor(lua_State* tolua_S)
{
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BkColor'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BkColor);
 return 1;
}

/* set function: BkColor of class  TCustomImageList */
static int tolua_set_TCustomImageList_BkColor(lua_State* tolua_S)
{
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BkColor'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BkColor = ((TColor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DrawingStyle of class  TCustomImageList */
static int tolua_get_TCustomImageList_DrawingStyle(lua_State* tolua_S)
{
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DrawingStyle'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DrawingStyle);
 return 1;
}

/* set function: DrawingStyle of class  TCustomImageList */
static int tolua_set_TCustomImageList_DrawingStyle(lua_State* tolua_S)
{
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DrawingStyle'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DrawingStyle = ((TDrawingStyle) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Height of class  TCustomImageList */
static int tolua_get_TCustomImageList_Height(lua_State* tolua_S)
{
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Height'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Height);
 return 1;
}

/* set function: Height of class  TCustomImageList */
static int tolua_set_TCustomImageList_Height(lua_State* tolua_S)
{
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Height'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Height = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: ImageType of class  TCustomImageList */
static int tolua_get_TCustomImageList_ImageType(lua_State* tolua_S)
{
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ImageType'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ImageType);
 return 1;
}

/* set function: ImageType of class  TCustomImageList */
static int tolua_set_TCustomImageList_ImageType(lua_State* tolua_S)
{
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ImageType'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ImageType = ((TImageType) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Masked of class  TCustomImageList */
static int tolua_get_TCustomImageList_Masked(lua_State* tolua_S)
{
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Masked'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Masked);
 return 1;
}

/* set function: Masked of class  TCustomImageList */
static int tolua_set_TCustomImageList_Masked(lua_State* tolua_S)
{
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Masked'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Masked = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ShareImages of class  TCustomImageList */
static int tolua_get_TCustomImageList_ShareImages(lua_State* tolua_S)
{
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ShareImages'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ShareImages);
 return 1;
}

/* set function: ShareImages of class  TCustomImageList */
static int tolua_set_TCustomImageList_ShareImages(lua_State* tolua_S)
{
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ShareImages'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ShareImages = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Width of class  TCustomImageList */
static int tolua_get_TCustomImageList_Width(lua_State* tolua_S)
{
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Width'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Width);
 return 1;
}

/* set function: Width of class  TCustomImageList */
static int tolua_set_TCustomImageList_Width(lua_State* tolua_S)
{
  TCustomImageList* self = (TCustomImageList*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Width'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Width = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* method: new of class  TBasicAction */
static int tolua_z_VCL_TBasicAction_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TBasicAction",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TBasicAction* tolua_ret = (TBasicAction*)  new TBasicAction(AOwner);

/* getting type */
  char* lua_type = "TBasicAction";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TBasicAction */
static int tolua_z_VCL_TBasicAction_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TBasicAction",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TBasicAction* tolua_ret = (TBasicAction*)  new TBasicAction(AOwner);

/* getting type */
  char* lua_type = "TBasicAction";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TBasicAction */
static int tolua_z_VCL_TBasicAction_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TBasicAction",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TBasicAction* self = (TBasicAction*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: HandlesTarget of class  TBasicAction */
static int tolua_z_VCL_TBasicAction_HandlesTarget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TBasicAction",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TBasicAction* self = (TBasicAction*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TObject* Target = ((TObject*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'HandlesTarget'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->HandlesTarget(Target);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'HandlesTarget'.",&tolua_err);
 return 0;
#endif
}

/* method: UpdateTarget of class  TBasicAction */
static int tolua_z_VCL_TBasicAction_UpdateTarget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TBasicAction",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TBasicAction* self = (TBasicAction*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TObject* Target = ((TObject*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'UpdateTarget'",NULL);
#endif
  {
   self->UpdateTarget(Target);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'UpdateTarget'.",&tolua_err);
 return 0;
#endif
}

/* method: ExecuteTarget of class  TBasicAction */
static int tolua_z_VCL_TBasicAction_ExecuteTarget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TBasicAction",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TBasicAction* self = (TBasicAction*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TObject* Target = ((TObject*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ExecuteTarget'",NULL);
#endif
  {
   self->ExecuteTarget(Target);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ExecuteTarget'.",&tolua_err);
 return 0;
#endif
}

/* method: Execute of class  TBasicAction */
static int tolua_z_VCL_TBasicAction_Execute00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TBasicAction",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TBasicAction* self = (TBasicAction*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Execute'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Execute();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Execute'.",&tolua_err);
 return 0;
#endif
}

/* method: RegisterChanges of class  TBasicAction */
static int tolua_z_VCL_TBasicAction_RegisterChanges00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TBasicAction",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TBasicActionLink",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TBasicAction* self = (TBasicAction*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TBasicActionLink* Value = ((TBasicActionLink*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RegisterChanges'",NULL);
#endif
  {
   self->RegisterChanges(Value);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RegisterChanges'.",&tolua_err);
 return 0;
#endif
}

/* method: UnRegisterChanges of class  TBasicAction */
static int tolua_z_VCL_TBasicAction_UnRegisterChanges00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TBasicAction",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TBasicActionLink",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TBasicAction* self = (TBasicAction*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TBasicActionLink* Value = ((TBasicActionLink*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'UnRegisterChanges'",NULL);
#endif
  {
   self->UnRegisterChanges(Value);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'UnRegisterChanges'.",&tolua_err);
 return 0;
#endif
}

/* method: Update of class  TBasicAction */
static int tolua_z_VCL_TBasicAction_Update00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TBasicAction",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TBasicAction* self = (TBasicAction*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Update'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Update();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Update'.",&tolua_err);
 return 0;
#endif
}

/* get function: ActionComponent of class  TBasicAction */
static int tolua_get_TBasicAction_ActionComponent_ptr(lua_State* tolua_S)
{
  TBasicAction* self = (TBasicAction*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ActionComponent'",NULL);
#endif

/* getting type */
  char* lua_type = "TComponent";
   tolua_pushusertype(tolua_S,(void*)(self->ActionComponent),lua_type);
 return 1;
}

/* set function: ActionComponent of class  TBasicAction */
static int tolua_set_TBasicAction_ActionComponent_ptr(lua_State* tolua_S)
{
  TBasicAction* self = (TBasicAction*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ActionComponent'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ActionComponent = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: Left of class  TControl */
static int tolua_get_TControl_Left(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Left'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Left);
 return 1;
}

/* set function: Left of class  TControl */
static int tolua_set_TControl_Left(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Left'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Left = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Top of class  TControl */
static int tolua_get_TControl_Top(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Top'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Top);
 return 1;
}

/* set function: Top of class  TControl */
static int tolua_set_TControl_Top(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Top'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Top = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Width of class  TControl */
static int tolua_get_TControl_Width(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Width'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Width);
 return 1;
}

/* set function: Width of class  TControl */
static int tolua_set_TControl_Width(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Width'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Width = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Height of class  TControl */
static int tolua_get_TControl_Height(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Height'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Height);
 return 1;
}

/* set function: Height of class  TControl */
static int tolua_set_TControl_Height(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Height'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Height = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Cursor of class  TControl */
static int tolua_get_TControl_Cursor(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Cursor'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Cursor);
 return 1;
}

/* set function: Cursor of class  TControl */
static int tolua_set_TControl_Cursor(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Cursor'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Cursor = ((TCursor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Hint of class  TControl */
static int tolua_get_TControl_Hint(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Hint'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->Hint);
 return 1;
}

/* set function: Hint of class  TControl */
static int tolua_set_TControl_Hint(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Hint'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Hint = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* get function: HelpType of class  TControl */
static int tolua_get_TControl_HelpType(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HelpType'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->HelpType);
 return 1;
}

/* set function: HelpType of class  TControl */
static int tolua_set_TControl_HelpType(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HelpType'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->HelpType = ((THelpType) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: HelpKeyword of class  TControl */
static int tolua_get_TControl_HelpKeyword(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HelpKeyword'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->HelpKeyword);
 return 1;
}

/* set function: HelpKeyword of class  TControl */
static int tolua_set_TControl_HelpKeyword(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HelpKeyword'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->HelpKeyword = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* get function: HelpContext of class  TControl */
static int tolua_get_TControl_HelpContext(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HelpContext'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->HelpContext);
 return 1;
}

/* set function: HelpContext of class  TControl */
static int tolua_set_TControl_HelpContext(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HelpContext'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->HelpContext = ((  int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* method: new of class  TControl */
static int tolua_z_VCL_TControl_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TControl* tolua_ret = (TControl*)  new TControl(AOwner);

/* getting type */
  char* lua_type = "TControl";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TControl */
static int tolua_z_VCL_TControl_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TControl* tolua_ret = (TControl*)  new TControl(AOwner);

/* getting type */
  char* lua_type = "TControl";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TControl */
static int tolua_z_VCL_TControl_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: BeginDrag of class  TControl */
static int tolua_z_VCL_TControl_BeginDrag00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  bool Immediate = ((bool)  tolua_toboolean(tolua_S,2,0));
/*declare*/
  int Threshold = ((int)  tolua_tonumber(tolua_S,3,0xffffffff));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'BeginDrag'",NULL);
#endif
  {
   self->BeginDrag(Immediate,Threshold);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'BeginDrag'.",&tolua_err);
 return 0;
#endif
}

/* method: BringToFront of class  TControl */
static int tolua_z_VCL_TControl_BringToFront00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'BringToFront'",NULL);
#endif
  {
   self->BringToFront();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'BringToFront'.",&tolua_err);
 return 0;
#endif
}

/* method: ClientToScreen of class  TControl */
static int tolua_z_VCL_TControl_ClientToScreen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TPoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TPoint* Point = ((const TPoint*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ClientToScreen'",NULL);
#endif
  {
   TPoint tolua_ret = (TPoint)  self->ClientToScreen(*Point);
   {
#ifdef __cplusplus
    void* tolua_obj = new TPoint(tolua_ret);

/* getting type */
  char* lua_type = "TPoint";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(TPoint));

/* getting type */
  char* lua_type = "TPoint";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ClientToScreen'.",&tolua_err);
 return 0;
#endif
}

/* method: ClientToParent of class  TControl */
static int tolua_z_VCL_TControl_ClientToParent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TPoint",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"TWinControl",1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TPoint* Point = ((const TPoint*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  TWinControl* AParent = ((TWinControl*)  tolua_tousertype(tolua_S,3,(TWinControl*)(0x0)));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ClientToParent'",NULL);
#endif
  {
   TPoint tolua_ret = (TPoint)  self->ClientToParent(*Point,AParent);
   {
#ifdef __cplusplus
    void* tolua_obj = new TPoint(tolua_ret);

/* getting type */
  char* lua_type = "TPoint";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(TPoint));

/* getting type */
  char* lua_type = "TPoint";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ClientToParent'.",&tolua_err);
 return 0;
#endif
}

/* method: Dock of class  TControl */
static int tolua_z_VCL_TControl_Dock00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TWinControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"const TRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TWinControl* NewDockSite = ((TWinControl*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  const TRect* ARect = ((const TRect*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Dock'",NULL);
#endif
  {
   self->Dock(NewDockSite,*ARect);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Dock'.",&tolua_err);
 return 0;
#endif
}

/* method: DefaultHandler of class  TControl */
static int tolua_z_VCL_TControl_DefaultHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isuserdata(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  void* Message = ((void*)  tolua_touserdata(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DefaultHandler'",NULL);
#endif
  {
   self->DefaultHandler(Message);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DefaultHandler'.",&tolua_err);
 return 0;
#endif
}

/* method: Dragging of class  TControl */
static int tolua_z_VCL_TControl_Dragging00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Dragging'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Dragging();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Dragging'.",&tolua_err);
 return 0;
#endif
}

/* method: DragDrop of class  TControl */
static int tolua_z_VCL_TControl_DragDrop00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TObject",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TObject* Source = ((TObject*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  int X = ((int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  int Y = ((int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DragDrop'",NULL);
#endif
  {
   self->DragDrop(Source,X,Y);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DragDrop'.",&tolua_err);
 return 0;
#endif
}

/* method: DrawTextBiDiModeFlags of class  TControl */
static int tolua_z_VCL_TControl_DrawTextBiDiModeFlags00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Flags = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DrawTextBiDiModeFlags'",NULL);
#endif
  {
   int tolua_ret = (int)  self->DrawTextBiDiModeFlags(Flags);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DrawTextBiDiModeFlags'.",&tolua_err);
 return 0;
#endif
}

/* method: DrawTextBiDiModeFlagsReadingOnly of class  TControl */
static int tolua_z_VCL_TControl_DrawTextBiDiModeFlagsReadingOnly00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DrawTextBiDiModeFlagsReadingOnly'",NULL);
#endif
  {
   int tolua_ret = (int)  self->DrawTextBiDiModeFlagsReadingOnly();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DrawTextBiDiModeFlagsReadingOnly'.",&tolua_err);
 return 0;
#endif
}

/* get function: Enabled of class  TControl */
static int tolua_get_TControl_Enabled(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Enabled);
 return 1;
}

/* set function: Enabled of class  TControl */
static int tolua_set_TControl_Enabled(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* method: EndDrag of class  TControl */
static int tolua_z_VCL_TControl_EndDrag00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  bool Drop = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'EndDrag'",NULL);
#endif
  {
   self->EndDrag(Drop);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'EndDrag'.",&tolua_err);
 return 0;
#endif
}

/* method: GetControlsAlignment of class  TControl */
static int tolua_z_VCL_TControl_GetControlsAlignment00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetControlsAlignment'",NULL);
#endif
  {
   TAlignment tolua_ret = (TAlignment)  self->GetControlsAlignment();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetControlsAlignment'.",&tolua_err);
 return 0;
#endif
}

/* method: GetParentComponent of class  TControl */
static int tolua_z_VCL_TControl_GetParentComponent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetParentComponent'",NULL);
#endif
  {
   TComponent* tolua_ret = (TComponent*)  self->GetParentComponent();

/* getting type */
  char* lua_type = "TComponent";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetParentComponent'.",&tolua_err);
 return 0;
#endif
}

/* method: GetTextBuf of class  TControl */
static int tolua_z_VCL_TControl_GetTextBuf00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  char* Buffer = ((char*)  tolua_tostring(tolua_S,2,0));
/*declare*/
  int BufSize = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetTextBuf'",NULL);
#endif
  {
   int tolua_ret = (int)  self->GetTextBuf(Buffer,BufSize);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetTextBuf'.",&tolua_err);
 return 0;
#endif
}

/* method: GetTextLen of class  TControl */
static int tolua_z_VCL_TControl_GetTextLen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetTextLen'",NULL);
#endif
  {
   int tolua_ret = (int)  self->GetTextLen();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetTextLen'.",&tolua_err);
 return 0;
#endif
}

/* method: HasParent of class  TControl */
static int tolua_z_VCL_TControl_HasParent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'HasParent'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->HasParent();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'HasParent'.",&tolua_err);
 return 0;
#endif
}

/* method: Hide of class  TControl */
static int tolua_z_VCL_TControl_Hide00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Hide'",NULL);
#endif
  {
   self->Hide();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Hide'.",&tolua_err);
 return 0;
#endif
}

/* method: InitiateAction of class  TControl */
static int tolua_z_VCL_TControl_InitiateAction00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'InitiateAction'",NULL);
#endif
  {
   self->InitiateAction();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'InitiateAction'.",&tolua_err);
 return 0;
#endif
}

/* method: Invalidate of class  TControl */
static int tolua_z_VCL_TControl_Invalidate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Invalidate'",NULL);
#endif
  {
   self->Invalidate();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Invalidate'.",&tolua_err);
 return 0;
#endif
}

/* method: MouseWheelHandler of class  TControl */
static int tolua_z_VCL_TControl_MouseWheelHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TMessage",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TMessage* Message = ((TMessage*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'MouseWheelHandler'",NULL);
#endif
  {
   self->MouseWheelHandler(*Message);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'MouseWheelHandler'.",&tolua_err);
 return 0;
#endif
}

/* method: IsRightToLeft of class  TControl */
static int tolua_z_VCL_TControl_IsRightToLeft00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsRightToLeft'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->IsRightToLeft();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsRightToLeft'.",&tolua_err);
 return 0;
#endif
}

/* method: ManualDock of class  TControl */
static int tolua_z_VCL_TControl_ManualDock00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TWinControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"TControl",1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TWinControl* NewDockSite = ((TWinControl*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  TControl* DropControl = ((TControl*)  tolua_tousertype(tolua_S,3,(TControl*)(0x0)));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ManualDock'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->ManualDock(NewDockSite,DropControl);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ManualDock'.",&tolua_err);
 return 0;
#endif
}

/* method: ManualDock of class  TControl */
static int tolua_z_VCL_TControl_ManualDock01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TWinControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"TControl",1,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TWinControl* NewDockSite = ((TWinControl*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  TControl* DropControl = ((TControl*)  tolua_tousertype(tolua_S,3,(TControl*)(0x0)));
/*declare*/
  TAlign ControlSide = ((TAlign) (int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ManualDock'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->ManualDock(NewDockSite,DropControl,ControlSide);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_TControl_ManualDock00(tolua_S);
}

/* method: ManualFloat of class  TControl */
static int tolua_z_VCL_TControl_ManualFloat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TRect* ScreenPos = ((const TRect*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ManualFloat'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->ManualFloat(*ScreenPos);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ManualFloat'.",&tolua_err);
 return 0;
#endif
}

/* method: Perform of class  TControl */
static int tolua_z_VCL_TControl_Perform00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  unsigned Msg = ((unsigned)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int WParam = ((int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  int LParam = ((int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Perform'",NULL);
#endif
  {
   int tolua_ret = (int)  self->Perform(Msg,WParam,LParam);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Perform'.",&tolua_err);
 return 0;
#endif
}

/* method: Refresh of class  TControl */
static int tolua_z_VCL_TControl_Refresh00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Refresh'",NULL);
#endif
  {
   self->Refresh();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Refresh'.",&tolua_err);
 return 0;
#endif
}

/* method: Repaint of class  TControl */
static int tolua_z_VCL_TControl_Repaint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Repaint'",NULL);
#endif
  {
   self->Repaint();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Repaint'.",&tolua_err);
 return 0;
#endif
}

/* method: ReplaceDockedControl of class  TControl */
static int tolua_z_VCL_TControl_ReplaceDockedControl00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"TWinControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,4,"TControl",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TControl* Control = ((TControl*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  TWinControl* NewDockSite = ((TWinControl*)  tolua_tousertype(tolua_S,3,0));
/*declare*/
  TControl* DropControl = ((TControl*)  tolua_tousertype(tolua_S,4,0));
/*declare*/
  TAlign ControlSide = ((TAlign) (int)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReplaceDockedControl'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->ReplaceDockedControl(Control,NewDockSite,DropControl,ControlSide);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReplaceDockedControl'.",&tolua_err);
 return 0;
#endif
}

/* method: ScreenToClient of class  TControl */
static int tolua_z_VCL_TControl_ScreenToClient00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TPoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TPoint* Point = ((const TPoint*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ScreenToClient'",NULL);
#endif
  {
   TPoint tolua_ret = (TPoint)  self->ScreenToClient(*Point);
   {
#ifdef __cplusplus
    void* tolua_obj = new TPoint(tolua_ret);

/* getting type */
  char* lua_type = "TPoint";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(TPoint));

/* getting type */
  char* lua_type = "TPoint";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ScreenToClient'.",&tolua_err);
 return 0;
#endif
}

/* method: ParentToClient of class  TControl */
static int tolua_z_VCL_TControl_ParentToClient00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TPoint",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"TWinControl",1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TPoint* Point = ((const TPoint*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  TWinControl* AParent = ((TWinControl*)  tolua_tousertype(tolua_S,3,(TWinControl*)(0x0)));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ParentToClient'",NULL);
#endif
  {
   TPoint tolua_ret = (TPoint)  self->ParentToClient(*Point,AParent);
   {
#ifdef __cplusplus
    void* tolua_obj = new TPoint(tolua_ret);

/* getting type */
  char* lua_type = "TPoint";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(TPoint));

/* getting type */
  char* lua_type = "TPoint";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ParentToClient'.",&tolua_err);
 return 0;
#endif
}

/* method: SendToBack of class  TControl */
static int tolua_z_VCL_TControl_SendToBack00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SendToBack'",NULL);
#endif
  {
   self->SendToBack();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SendToBack'.",&tolua_err);
 return 0;
#endif
}

/* method: SetBounds of class  TControl */
static int tolua_z_VCL_TControl_SetBounds00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int ALeft = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int ATop = ((int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  int AWidth = ((int)  tolua_tonumber(tolua_S,4,0));
/*declare*/
  int AHeight = ((int)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetBounds'",NULL);
#endif
  {
   self->SetBounds(ALeft,ATop,AWidth,AHeight);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetBounds'.",&tolua_err);
 return 0;
#endif
}

/* method: SetTextBuf of class  TControl */
static int tolua_z_VCL_TControl_SetTextBuf00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  char* Buffer = ((char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetTextBuf'",NULL);
#endif
  {
   self->SetTextBuf(Buffer);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetTextBuf'.",&tolua_err);
 return 0;
#endif
}

/* method: Show of class  TControl */
static int tolua_z_VCL_TControl_Show00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Show'",NULL);
#endif
  {
   self->Show();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Show'.",&tolua_err);
 return 0;
#endif
}

/* method: Update of class  TControl */
static int tolua_z_VCL_TControl_Update00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Update'",NULL);
#endif
  {
   self->Update();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Update'.",&tolua_err);
 return 0;
#endif
}

/* method: UseRightToLeftAlignment of class  TControl */
static int tolua_z_VCL_TControl_UseRightToLeftAlignment00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'UseRightToLeftAlignment'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->UseRightToLeftAlignment();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'UseRightToLeftAlignment'.",&tolua_err);
 return 0;
#endif
}

/* method: UseRightToLeftReading of class  TControl */
static int tolua_z_VCL_TControl_UseRightToLeftReading00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'UseRightToLeftReading'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->UseRightToLeftReading();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'UseRightToLeftReading'.",&tolua_err);
 return 0;
#endif
}

/* method: UseRightToLeftScrollBar of class  TControl */
static int tolua_z_VCL_TControl_UseRightToLeftScrollBar00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'UseRightToLeftScrollBar'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->UseRightToLeftScrollBar();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'UseRightToLeftScrollBar'.",&tolua_err);
 return 0;
#endif
}

/* get function: Action of class  TControl */
static int tolua_get_TControl_Action_ptr(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Action'",NULL);
#endif

/* getting type */
  char* lua_type = "TBasicAction";
   tolua_pushusertype(tolua_S,(void*)(self->Action),lua_type);
 return 1;
}

/* set function: Action of class  TControl */
static int tolua_set_TControl_Action_ptr(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Action'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TBasicAction",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Action = ((TBasicAction*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: Align of class  TControl */
static int tolua_get_TControl_Align(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Align'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Align);
 return 1;
}

/* set function: Align of class  TControl */
static int tolua_set_TControl_Align(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Align'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Align = ((TAlign) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Anchors of class  TControl */
static int tolua_get_TControl_Anchors(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Anchors'",NULL);
#endif

/* getting type */
  char* lua_type = "Set<TAnchorKind, akLeft, akBottom>";
   tolua_pushusertype(tolua_S,(void*)(&(self->Anchors)),lua_type);
 return 1;
}

/* set function: Anchors of class  TControl */
static int tolua_set_TControl_Anchors(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Anchors'",NULL);
  if (!tolua_isusertype(tolua_S,2,"Set<TAnchorKind, akLeft, akBottom>",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Anchors = *((  Set<TAnchorKind, akLeft, akBottom>*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: BiDiMode of class  TControl */
static int tolua_get_TControl_BiDiMode(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BiDiMode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BiDiMode);
 return 1;
}

/* set function: BiDiMode of class  TControl */
static int tolua_set_TControl_BiDiMode(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BiDiMode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BiDiMode = ((TBiDiMode) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: BoundsRect of class  TControl */
static int tolua_get_TControl_BoundsRect(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BoundsRect'",NULL);
#endif

/* getting type */
  char* lua_type = "TRect";
   tolua_pushusertype(tolua_S,(void*)(&(self->BoundsRect)),lua_type);
 return 1;
}

/* set function: BoundsRect of class  TControl */
static int tolua_set_TControl_BoundsRect(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BoundsRect'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TRect",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BoundsRect = *((TRect*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: ClientHeight of class  TControl */
static int tolua_get_TControl_ClientHeight(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ClientHeight'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ClientHeight);
 return 1;
}

/* set function: ClientHeight of class  TControl */
static int tolua_set_TControl_ClientHeight(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ClientHeight'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ClientHeight = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: ClientOrigin of class  TControl */
static int tolua_get_TControl_ClientOrigin(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ClientOrigin'",NULL);
#endif

/* getting type */
  char* lua_type = "TPoint";
   tolua_pushusertype(tolua_S,(void*)(&(self->ClientOrigin)),lua_type);
 return 1;
}

/* get function: ClientRect of class  TControl */
static int tolua_get_TControl_ClientRect(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ClientRect'",NULL);
#endif

/* getting type */
  char* lua_type = "TRect";
   tolua_pushusertype(tolua_S,(void*)(&(self->ClientRect)),lua_type);
 return 1;
}

/* get function: ClientWidth of class  TControl */
static int tolua_get_TControl_ClientWidth(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ClientWidth'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ClientWidth);
 return 1;
}

/* set function: ClientWidth of class  TControl */
static int tolua_set_TControl_ClientWidth(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ClientWidth'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ClientWidth = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Constraints of class  TControl */
static int tolua_get_TControl_Constraints_ptr(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Constraints'",NULL);
#endif

/* getting type */
  char* lua_type = "TSizeConstraints";
   tolua_pushusertype(tolua_S,(void*)(self->Constraints),lua_type);
 return 1;
}

/* set function: Constraints of class  TControl */
static int tolua_set_TControl_Constraints_ptr(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Constraints'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TSizeConstraints",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Constraints = ((TSizeConstraints*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: ControlState of class  TControl */
static int tolua_get_TControl_ControlState(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ControlState'",NULL);
#endif

/* getting type */
  char* lua_type = "Set<Controls__01, csLButtonDown, csDocking>";
   tolua_pushusertype(tolua_S,(void*)(&(self->ControlState)),lua_type);
 return 1;
}

/* set function: ControlState of class  TControl */
static int tolua_set_TControl_ControlState(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ControlState'",NULL);
  if (!tolua_isusertype(tolua_S,2,"Set<Controls__01, csLButtonDown, csDocking>",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ControlState = *((  Set<Controls__01, csLButtonDown, csDocking>*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: ControlStyle of class  TControl */
static int tolua_get_TControl_ControlStyle(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ControlStyle'",NULL);
#endif

/* getting type */
  char* lua_type = "Set<Controls__11, csAcceptsControls, csMenuEvents>";
   tolua_pushusertype(tolua_S,(void*)(&(self->ControlStyle)),lua_type);
 return 1;
}

/* set function: ControlStyle of class  TControl */
static int tolua_set_TControl_ControlStyle(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ControlStyle'",NULL);
  if (!tolua_isusertype(tolua_S,2,"Set<Controls__11, csAcceptsControls, csMenuEvents>",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ControlStyle = *((  Set<Controls__11, csAcceptsControls, csMenuEvents>*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: DockOrientation of class  TControl */
static int tolua_get_TControl_DockOrientation(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DockOrientation'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DockOrientation);
 return 1;
}

/* set function: DockOrientation of class  TControl */
static int tolua_set_TControl_DockOrientation(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DockOrientation'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DockOrientation = ((TDockOrientation) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Floating of class  TControl */
static int tolua_get_TControl_Floating(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Floating'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Floating);
 return 1;
}

/* get function: FloatingDockSiteClass of class  TControl */
static int tolua_get_TControl_FloatingDockSiteClass_ptr(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FloatingDockSiteClass'",NULL);
#endif

/* getting type */
  char* lua_type = "TMetaClass";
   tolua_pushusertype(tolua_S,(void*)(self->FloatingDockSiteClass),lua_type);
 return 1;
}

/* set function: FloatingDockSiteClass of class  TControl */
static int tolua_set_TControl_FloatingDockSiteClass_ptr(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FloatingDockSiteClass'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TMetaClass",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->FloatingDockSiteClass = ((TMetaClass*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: HostDockSite of class  TControl */
static int tolua_get_TControl_HostDockSite_ptr(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HostDockSite'",NULL);
#endif

/* getting type */
  char* lua_type = "TWinControl";
   tolua_pushusertype(tolua_S,(void*)(self->HostDockSite),lua_type);
 return 1;
}

/* set function: HostDockSite of class  TControl */
static int tolua_set_TControl_HostDockSite_ptr(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HostDockSite'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TWinControl",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->HostDockSite = ((TWinControl*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: LRDockWidth of class  TControl */
static int tolua_get_TControl_LRDockWidth(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'LRDockWidth'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->LRDockWidth);
 return 1;
}

/* set function: LRDockWidth of class  TControl */
static int tolua_set_TControl_LRDockWidth(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'LRDockWidth'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->LRDockWidth = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Parent of class  TControl */
static int tolua_get_TControl_Parent_ptr(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Parent'",NULL);
#endif

/* getting type */
  char* lua_type = "TWinControl";
   tolua_pushusertype(tolua_S,(void*)(self->Parent),lua_type);
 return 1;
}

/* set function: Parent of class  TControl */
static int tolua_set_TControl_Parent_ptr(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Parent'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TWinControl",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Parent = ((TWinControl*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: ShowHint of class  TControl */
static int tolua_get_TControl_ShowHint(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ShowHint'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ShowHint);
 return 1;
}

/* set function: ShowHint of class  TControl */
static int tolua_set_TControl_ShowHint(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ShowHint'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ShowHint = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: TBDockHeight of class  TControl */
static int tolua_get_TControl_TBDockHeight(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TBDockHeight'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->TBDockHeight);
 return 1;
}

/* set function: TBDockHeight of class  TControl */
static int tolua_set_TControl_TBDockHeight(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TBDockHeight'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->TBDockHeight = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: UndockHeight of class  TControl */
static int tolua_get_TControl_UndockHeight(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'UndockHeight'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->UndockHeight);
 return 1;
}

/* set function: UndockHeight of class  TControl */
static int tolua_set_TControl_UndockHeight(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'UndockHeight'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->UndockHeight = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: UndockWidth of class  TControl */
static int tolua_get_TControl_UndockWidth(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'UndockWidth'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->UndockWidth);
 return 1;
}

/* set function: UndockWidth of class  TControl */
static int tolua_set_TControl_UndockWidth(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'UndockWidth'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->UndockWidth = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Visible of class  TControl */
static int tolua_get_TControl_Visible(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Visible'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Visible);
 return 1;
}

/* set function: Visible of class  TControl */
static int tolua_set_TControl_Visible(lua_State* tolua_S)
{
  TControl* self = (TControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Visible'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Visible = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* method: new of class  TGraphicControl */
static int tolua_z_VCL_TGraphicControl_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TGraphicControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TGraphicControl* tolua_ret = (TGraphicControl*)  new TGraphicControl(AOwner);

/* getting type */
  char* lua_type = "TGraphicControl";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TGraphicControl */
static int tolua_z_VCL_TGraphicControl_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TGraphicControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TGraphicControl* tolua_ret = (TGraphicControl*)  new TGraphicControl(AOwner);

/* getting type */
  char* lua_type = "TGraphicControl";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TGraphicControl */
static int tolua_z_VCL_TGraphicControl_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TGraphicControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TGraphicControl* self = (TGraphicControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TImage */
static int tolua_z_VCL_TImage_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TImage",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TImage* tolua_ret = (TImage*)  new TImage(AOwner);

/* getting type */
  char* lua_type = "TImage";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TImage */
static int tolua_z_VCL_TImage_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TImage",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TImage* tolua_ret = (TImage*)  new TImage(AOwner);

/* getting type */
  char* lua_type = "TImage";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TImage */
static int tolua_z_VCL_TImage_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TImage",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TImage* self = (TImage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* get function: Canvas of class  TImage */
static int tolua_get_TImage_Canvas_ptr(lua_State* tolua_S)
{
  TImage* self = (TImage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Canvas'",NULL);
#endif

/* getting type */
  char* lua_type = "TCanvas";
   tolua_pushusertype(tolua_S,(void*)(self->Canvas),lua_type);
 return 1;
}

/* get function: Center of class  TImage */
static int tolua_get_TImage_Center(lua_State* tolua_S)
{
  TImage* self = (TImage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Center'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Center);
 return 1;
}

/* set function: Center of class  TImage */
static int tolua_set_TImage_Center(lua_State* tolua_S)
{
  TImage* self = (TImage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Center'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Center = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: IncrementalDisplay of class  TImage */
static int tolua_get_TImage_IncrementalDisplay(lua_State* tolua_S)
{
  TImage* self = (TImage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'IncrementalDisplay'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->IncrementalDisplay);
 return 1;
}

/* set function: IncrementalDisplay of class  TImage */
static int tolua_set_TImage_IncrementalDisplay(lua_State* tolua_S)
{
  TImage* self = (TImage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'IncrementalDisplay'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->IncrementalDisplay = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Picture of class  TImage */
static int tolua_get_TImage_Picture_ptr(lua_State* tolua_S)
{
  TImage* self = (TImage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Picture'",NULL);
#endif

/* getting type */
  char* lua_type = "TPicture";
   tolua_pushusertype(tolua_S,(void*)(self->Picture),lua_type);
 return 1;
}

/* set function: Picture of class  TImage */
static int tolua_set_TImage_Picture_ptr(lua_State* tolua_S)
{
  TImage* self = (TImage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Picture'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TPicture",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Picture = ((TPicture*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: Proportional of class  TImage */
static int tolua_get_TImage_Proportional(lua_State* tolua_S)
{
  TImage* self = (TImage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Proportional'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Proportional);
 return 1;
}

/* set function: Proportional of class  TImage */
static int tolua_set_TImage_Proportional(lua_State* tolua_S)
{
  TImage* self = (TImage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Proportional'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Proportional = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Stretch of class  TImage */
static int tolua_get_TImage_Stretch(lua_State* tolua_S)
{
  TImage* self = (TImage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Stretch'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Stretch);
 return 1;
}

/* set function: Stretch of class  TImage */
static int tolua_set_TImage_Stretch(lua_State* tolua_S)
{
  TImage* self = (TImage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Stretch'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Stretch = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Transparent of class  TImage */
static int tolua_get_TImage_Transparent(lua_State* tolua_S)
{
  TImage* self = (TImage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Transparent'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Transparent);
 return 1;
}

/* set function: Transparent of class  TImage */
static int tolua_set_TImage_Transparent(lua_State* tolua_S)
{
  TImage* self = (TImage*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Transparent'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Transparent = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* method: new of class  TWinControl */
static int tolua_z_VCL_TWinControl_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TWinControl* tolua_ret = (TWinControl*)  new TWinControl(AOwner);

/* getting type */
  char* lua_type = "TWinControl";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TWinControl */
static int tolua_z_VCL_TWinControl_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TWinControl* tolua_ret = (TWinControl*)  new TWinControl(AOwner);

/* getting type */
  char* lua_type = "TWinControl";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TWinControl */
static int tolua_z_VCL_TWinControl_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: Broadcast of class  TWinControl */
static int tolua_z_VCL_TWinControl_Broadcast00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isuserdata(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  void* Message = ((void*)  tolua_touserdata(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Broadcast'",NULL);
#endif
  {
   self->Broadcast(Message);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Broadcast'.",&tolua_err);
 return 0;
#endif
}

/* method: CanFocus of class  TWinControl */
static int tolua_z_VCL_TWinControl_CanFocus00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'CanFocus'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->CanFocus();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CanFocus'.",&tolua_err);
 return 0;
#endif
}

/* method: ContainsControl of class  TWinControl */
static int tolua_z_VCL_TWinControl_ContainsControl00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TControl* Control = ((TControl*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ContainsControl'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->ContainsControl(Control);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ContainsControl'.",&tolua_err);
 return 0;
#endif
}

/* method: ControlAtPos of class  TWinControl */
static int tolua_z_VCL_TWinControl_ControlAtPos00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TPoint",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TPoint* Pos = ((const TPoint*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  bool AllowDisabled = ((bool)  tolua_toboolean(tolua_S,3,0));
/*declare*/
  bool AllowWinControls = ((bool)  tolua_toboolean(tolua_S,4,false));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ControlAtPos'",NULL);
#endif
  {
   TControl* tolua_ret = (TControl*)  self->ControlAtPos(*Pos,AllowDisabled,AllowWinControls);

/* getting type */
  char* lua_type = "TControl";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ControlAtPos'.",&tolua_err);
 return 0;
#endif
}

/* method: DefaultHandler of class  TWinControl */
static int tolua_z_VCL_TWinControl_DefaultHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isuserdata(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  void* Message = ((void*)  tolua_touserdata(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DefaultHandler'",NULL);
#endif
  {
   self->DefaultHandler(Message);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DefaultHandler'.",&tolua_err);
 return 0;
#endif
}

/* method: DisableAlign of class  TWinControl */
static int tolua_z_VCL_TWinControl_DisableAlign00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DisableAlign'",NULL);
#endif
  {
   self->DisableAlign();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DisableAlign'.",&tolua_err);
 return 0;
#endif
}

/* get function: DockClientCount of class  TWinControl */
static int tolua_get_TWinControl_DockClientCount(lua_State* tolua_S)
{
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DockClientCount'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DockClientCount);
 return 1;
}

/* get function: DockClients of class  TWinControl */
static int tolua_get_z_VCL_TWinControl_DockClients(lua_State* tolua_S)
{
 int tolua_index;
  TWinControl* self;
 lua_pushstring(tolua_S,".self");
 lua_rawget(tolua_S,1);
 self = (TWinControl*)  lua_touserdata(tolua_S,-1);
 tolua_index = (int)tolua_tonumber(tolua_S,2,0);

/* getting type */
  char* lua_type = "TControl";
   tolua_pushusertype(tolua_S,(void*)(self->DockClients[tolua_index]),lua_type);
 return 1;
}

/* method: DockDrop of class  TWinControl */
static int tolua_z_VCL_TWinControl_DockDrop00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TDragDockObject",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TDragDockObject* Source = ((TDragDockObject*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  int X = ((int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  int Y = ((int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DockDrop'",NULL);
#endif
  {
   self->DockDrop(Source,X,Y);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DockDrop'.",&tolua_err);
 return 0;
#endif
}

/* get function: DoubleBuffered of class  TWinControl */
static int tolua_get_TWinControl_DoubleBuffered(lua_State* tolua_S)
{
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DoubleBuffered'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->DoubleBuffered);
 return 1;
}

/* set function: DoubleBuffered of class  TWinControl */
static int tolua_set_TWinControl_DoubleBuffered(lua_State* tolua_S)
{
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DoubleBuffered'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DoubleBuffered = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* method: EnableAlign of class  TWinControl */
static int tolua_z_VCL_TWinControl_EnableAlign00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'EnableAlign'",NULL);
#endif
  {
   self->EnableAlign();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'EnableAlign'.",&tolua_err);
 return 0;
#endif
}

/* method: FindChildControl of class  TWinControl */
static int tolua_z_VCL_TWinControl_FindChildControl00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isansi(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const AnsiString ControlName = ((const AnsiString)  tolua_toansi(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'FindChildControl'",NULL);
#endif
  {
   TControl* tolua_ret = (TControl*)  self->FindChildControl(ControlName);

/* getting type */
  char* lua_type = "TControl";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'FindChildControl'.",&tolua_err);
 return 0;
#endif
}

/* method: FlipChildren of class  TWinControl */
static int tolua_z_VCL_TWinControl_FlipChildren00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  bool AllLevels = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'FlipChildren'",NULL);
#endif
  {
   self->FlipChildren(AllLevels);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'FlipChildren'.",&tolua_err);
 return 0;
#endif
}

/* method: Focused of class  TWinControl */
static int tolua_z_VCL_TWinControl_Focused00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Focused'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Focused();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Focused'.",&tolua_err);
 return 0;
#endif
}

/* method: InsertControl of class  TWinControl */
static int tolua_z_VCL_TWinControl_InsertControl00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TControl* AControl = ((TControl*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'InsertControl'",NULL);
#endif
  {
   self->InsertControl(AControl);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'InsertControl'.",&tolua_err);
 return 0;
#endif
}

/* method: Invalidate of class  TWinControl */
static int tolua_z_VCL_TWinControl_Invalidate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Invalidate'",NULL);
#endif
  {
   self->Invalidate();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Invalidate'.",&tolua_err);
 return 0;
#endif
}

/* method: PaintTo of class  TWinControl */
static int tolua_z_VCL_TWinControl_PaintTo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TCanvas",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TCanvas* Canvas = ((TCanvas*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  int X = ((int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  int Y = ((int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'PaintTo'",NULL);
#endif
  {
   self->PaintTo(Canvas,X,Y);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'PaintTo'.",&tolua_err);
 return 0;
#endif
}

/* method: RemoveControl of class  TWinControl */
static int tolua_z_VCL_TWinControl_RemoveControl00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TControl* AControl = ((TControl*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveControl'",NULL);
#endif
  {
   self->RemoveControl(AControl);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveControl'.",&tolua_err);
 return 0;
#endif
}

/* method: Realign of class  TWinControl */
static int tolua_z_VCL_TWinControl_Realign00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Realign'",NULL);
#endif
  {
   self->Realign();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Realign'.",&tolua_err);
 return 0;
#endif
}

/* method: Repaint of class  TWinControl */
static int tolua_z_VCL_TWinControl_Repaint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Repaint'",NULL);
#endif
  {
   self->Repaint();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Repaint'.",&tolua_err);
 return 0;
#endif
}

/* method: ScaleBy of class  TWinControl */
static int tolua_z_VCL_TWinControl_ScaleBy00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int M = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int D = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ScaleBy'",NULL);
#endif
  {
   self->ScaleBy(M,D);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ScaleBy'.",&tolua_err);
 return 0;
#endif
}

/* method: ScrollBy of class  TWinControl */
static int tolua_z_VCL_TWinControl_ScrollBy00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int DeltaX = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int DeltaY = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ScrollBy'",NULL);
#endif
  {
   self->ScrollBy(DeltaX,DeltaY);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ScrollBy'.",&tolua_err);
 return 0;
#endif
}

/* method: SetBounds of class  TWinControl */
static int tolua_z_VCL_TWinControl_SetBounds00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int ALeft = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int ATop = ((int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  int AWidth = ((int)  tolua_tonumber(tolua_S,4,0));
/*declare*/
  int AHeight = ((int)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetBounds'",NULL);
#endif
  {
   self->SetBounds(ALeft,ATop,AWidth,AHeight);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetBounds'.",&tolua_err);
 return 0;
#endif
}

/* method: SetFocus of class  TWinControl */
static int tolua_z_VCL_TWinControl_SetFocus00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetFocus'",NULL);
#endif
  {
   self->SetFocus();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetFocus'.",&tolua_err);
 return 0;
#endif
}

/* method: Update of class  TWinControl */
static int tolua_z_VCL_TWinControl_Update00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Update'",NULL);
#endif
  {
   self->Update();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Update'.",&tolua_err);
 return 0;
#endif
}

/* method: UpdateControlState of class  TWinControl */
static int tolua_z_VCL_TWinControl_UpdateControlState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TWinControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'UpdateControlState'",NULL);
#endif
  {
   self->UpdateControlState();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'UpdateControlState'.",&tolua_err);
 return 0;
#endif
}

/* get function: AlignDisabled of class  TWinControl */
static int tolua_get_TWinControl_AlignDisabled(lua_State* tolua_S)
{
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AlignDisabled'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->AlignDisabled);
 return 1;
}

/* get function: VisibleDockClientCount of class  TWinControl */
static int tolua_get_TWinControl_VisibleDockClientCount(lua_State* tolua_S)
{
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'VisibleDockClientCount'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->VisibleDockClientCount);
 return 1;
}

/* get function: Brush of class  TWinControl */
static int tolua_get_TWinControl_Brush_ptr(lua_State* tolua_S)
{
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Brush'",NULL);
#endif

/* getting type */
  char* lua_type = "TBrush";
   tolua_pushusertype(tolua_S,(void*)(self->Brush),lua_type);
 return 1;
}

/* get function: Controls of class  TWinControl */
static int tolua_get_z_VCL_TWinControl_Controls(lua_State* tolua_S)
{
 int tolua_index;
  TWinControl* self;
 lua_pushstring(tolua_S,".self");
 lua_rawget(tolua_S,1);
 self = (TWinControl*)  lua_touserdata(tolua_S,-1);
 tolua_index = (int)tolua_tonumber(tolua_S,2,0);

/* getting type */
  char* lua_type = "TControl";
   tolua_pushusertype(tolua_S,(void*)(self->Controls[tolua_index]),lua_type);
 return 1;
}

/* get function: ControlCount of class  TWinControl */
static int tolua_get_TWinControl_ControlCount(lua_State* tolua_S)
{
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ControlCount'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ControlCount);
 return 1;
}

/* get function: Showing of class  TWinControl */
static int tolua_get_TWinControl_Showing(lua_State* tolua_S)
{
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Showing'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Showing);
 return 1;
}

/* get function: TabOrder of class  TWinControl */
static int tolua_get_TWinControl_TabOrder(lua_State* tolua_S)
{
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TabOrder'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->TabOrder);
 return 1;
}

/* set function: TabOrder of class  TWinControl */
static int tolua_set_TWinControl_TabOrder(lua_State* tolua_S)
{
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TabOrder'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->TabOrder = ((  short)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: TabStop of class  TWinControl */
static int tolua_get_TWinControl_TabStop(lua_State* tolua_S)
{
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TabStop'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->TabStop);
 return 1;
}

/* set function: TabStop of class  TWinControl */
static int tolua_set_TWinControl_TabStop(lua_State* tolua_S)
{
  TWinControl* self = (TWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TabStop'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->TabStop = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* method: AddItem of class  TCustomListControl */
static int tolua_z_VCL_TCustomListControl_AddItem00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomListControl",0,&tolua_err) ||
     !tolua_isansi(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"TObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomListControl* self = (TCustomListControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  AnsiString Item = ((AnsiString)  tolua_toansi(tolua_S,2,0));
/*declare*/
  TObject* AObject = ((TObject*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddItem'",NULL);
#endif
  {
   self->AddItem(Item,AObject);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddItem'.",&tolua_err);
 return 0;
#endif
}

/* method: Clear of class  TCustomListControl */
static int tolua_z_VCL_TCustomListControl_Clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomListControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomListControl* self = (TCustomListControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Clear'",NULL);
#endif
  {
   self->Clear();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clear'.",&tolua_err);
 return 0;
#endif
}

/* method: ClearSelection of class  TCustomListControl */
static int tolua_z_VCL_TCustomListControl_ClearSelection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomListControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomListControl* self = (TCustomListControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ClearSelection'",NULL);
#endif
  {
   self->ClearSelection();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ClearSelection'.",&tolua_err);
 return 0;
#endif
}

/* method: CopySelection of class  TCustomListControl */
static int tolua_z_VCL_TCustomListControl_CopySelection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomListControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TCustomListControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomListControl* self = (TCustomListControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TCustomListControl* Destination = ((TCustomListControl*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'CopySelection'",NULL);
#endif
  {
   self->CopySelection(Destination);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CopySelection'.",&tolua_err);
 return 0;
#endif
}

/* method: DeleteSelected of class  TCustomListControl */
static int tolua_z_VCL_TCustomListControl_DeleteSelected00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomListControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomListControl* self = (TCustomListControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DeleteSelected'",NULL);
#endif
  {
   self->DeleteSelected();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DeleteSelected'.",&tolua_err);
 return 0;
#endif
}

/* method: MoveSelection of class  TCustomListControl */
static int tolua_z_VCL_TCustomListControl_MoveSelection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomListControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TCustomListControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomListControl* self = (TCustomListControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TCustomListControl* Destination = ((TCustomListControl*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'MoveSelection'",NULL);
#endif
  {
   self->MoveSelection(Destination);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'MoveSelection'.",&tolua_err);
 return 0;
#endif
}

/* method: SelectAll of class  TCustomListControl */
static int tolua_z_VCL_TCustomListControl_SelectAll00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomListControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomListControl* self = (TCustomListControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SelectAll'",NULL);
#endif
  {
   self->SelectAll();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SelectAll'.",&tolua_err);
 return 0;
#endif
}

/* get function: ItemIndex of class  TCustomListControl */
static int tolua_get_TCustomListControl_ItemIndex(lua_State* tolua_S)
{
  TCustomListControl* self = (TCustomListControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ItemIndex'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ItemIndex);
 return 1;
}

/* set function: ItemIndex of class  TCustomListControl */
static int tolua_set_TCustomListControl_ItemIndex(lua_State* tolua_S)
{
  TCustomListControl* self = (TCustomListControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ItemIndex'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ItemIndex = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* method: new of class  TCustomListControl */
static int tolua_z_VCL_TCustomListControl_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TCustomListControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TCustomListControl* tolua_ret = (TCustomListControl*)NULL;//  new TCustomListControl(AOwner);

/* getting type */
  char* lua_type = "TCustomListControl";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TCustomListControl */
static int tolua_z_VCL_TCustomListControl_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TCustomListControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TCustomListControl* tolua_ret = (TCustomListControl*)NULL;//  new TCustomListControl(AOwner);

/* getting type */
  char* lua_type = "TCustomListControl";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TCustomListControl */
static int tolua_z_VCL_TCustomListControl_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomListControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomListControl* self = (TCustomListControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TCustomCombo */
static int tolua_z_VCL_TCustomCombo_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TCustomCombo",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TCustomCombo* tolua_ret = (TCustomCombo*)NULL;//  new TCustomCombo(AOwner);

/* getting type */
  char* lua_type = "TCustomCombo";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TCustomCombo */
static int tolua_z_VCL_TCustomCombo_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TCustomCombo",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TCustomCombo* tolua_ret = (TCustomCombo*)NULL;//  new TCustomCombo(AOwner);

/* getting type */
  char* lua_type = "TCustomCombo";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TCustomCombo */
static int tolua_z_VCL_TCustomCombo_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomCombo",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomCombo* self = (TCustomCombo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: AddItem of class  TCustomCombo */
static int tolua_z_VCL_TCustomCombo_AddItem00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomCombo",0,&tolua_err) ||
     !tolua_isansi(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"TObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomCombo* self = (TCustomCombo*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  AnsiString Item = ((AnsiString)  tolua_toansi(tolua_S,2,0));
/*declare*/
  TObject* AObject = ((TObject*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddItem'",NULL);
#endif
  {
   self->AddItem(Item,AObject);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddItem'.",&tolua_err);
 return 0;
#endif
}

/* method: Clear of class  TCustomCombo */
static int tolua_z_VCL_TCustomCombo_Clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomCombo",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomCombo* self = (TCustomCombo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Clear'",NULL);
#endif
  {
   self->Clear();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clear'.",&tolua_err);
 return 0;
#endif
}

/* method: ClearSelection of class  TCustomCombo */
static int tolua_z_VCL_TCustomCombo_ClearSelection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomCombo",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomCombo* self = (TCustomCombo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ClearSelection'",NULL);
#endif
  {
   self->ClearSelection();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ClearSelection'.",&tolua_err);
 return 0;
#endif
}

/* method: CopySelection of class  TCustomCombo */
static int tolua_z_VCL_TCustomCombo_CopySelection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomCombo",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TCustomListControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomCombo* self = (TCustomCombo*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TCustomListControl* Destination = ((TCustomListControl*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'CopySelection'",NULL);
#endif
  {
   self->CopySelection(Destination);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CopySelection'.",&tolua_err);
 return 0;
#endif
}

/* method: DeleteSelected of class  TCustomCombo */
static int tolua_z_VCL_TCustomCombo_DeleteSelected00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomCombo",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomCombo* self = (TCustomCombo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DeleteSelected'",NULL);
#endif
  {
   self->DeleteSelected();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DeleteSelected'.",&tolua_err);
 return 0;
#endif
}

/* method: Focused of class  TCustomCombo */
static int tolua_z_VCL_TCustomCombo_Focused00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomCombo",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomCombo* self = (TCustomCombo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Focused'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->Focused();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Focused'.",&tolua_err);
 return 0;
#endif
}

/* method: SelectAll of class  TCustomCombo */
static int tolua_z_VCL_TCustomCombo_SelectAll00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomCombo",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomCombo* self = (TCustomCombo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SelectAll'",NULL);
#endif
  {
   self->SelectAll();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SelectAll'.",&tolua_err);
 return 0;
#endif
}

/* get function: Canvas of class  TCustomCombo */
static int tolua_get_TCustomCombo_Canvas_ptr(lua_State* tolua_S)
{
  TCustomCombo* self = (TCustomCombo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Canvas'",NULL);
#endif

/* getting type */
  char* lua_type = "TCanvas";
   tolua_pushusertype(tolua_S,(void*)(self->Canvas),lua_type);
 return 1;
}

/* get function: DroppedDown of class  TCustomCombo */
static int tolua_get_TCustomCombo_DroppedDown(lua_State* tolua_S)
{
  TCustomCombo* self = (TCustomCombo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DroppedDown'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->DroppedDown);
 return 1;
}

/* set function: DroppedDown of class  TCustomCombo */
static int tolua_set_TCustomCombo_DroppedDown(lua_State* tolua_S)
{
  TCustomCombo* self = (TCustomCombo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DroppedDown'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DroppedDown = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Items of class  TCustomCombo */
static int tolua_get_TCustomCombo_Items_ptr(lua_State* tolua_S)
{
  TCustomCombo* self = (TCustomCombo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Items'",NULL);
#endif

/* getting type */
  char* lua_type = "TStrings";
   tolua_pushusertype(tolua_S,(void*)(self->Items),lua_type);
 return 1;
}

/* get function: SelLength of class  TCustomCombo */
static int tolua_get_TCustomCombo_SelLength(lua_State* tolua_S)
{
  TCustomCombo* self = (TCustomCombo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'SelLength'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->SelLength);
 return 1;
}

/* set function: SelLength of class  TCustomCombo */
static int tolua_set_TCustomCombo_SelLength(lua_State* tolua_S)
{
  TCustomCombo* self = (TCustomCombo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'SelLength'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SelLength = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: SelStart of class  TCustomCombo */
static int tolua_get_TCustomCombo_SelStart(lua_State* tolua_S)
{
  TCustomCombo* self = (TCustomCombo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'SelStart'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->SelStart);
 return 1;
}

/* set function: SelStart of class  TCustomCombo */
static int tolua_set_TCustomCombo_SelStart(lua_State* tolua_S)
{
  TCustomCombo* self = (TCustomCombo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'SelStart'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SelStart = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: MultiSelect of class  TCustomMultiSelectListControl */
static int tolua_get_TCustomMultiSelectListControl_MultiSelect(lua_State* tolua_S)
{
  TCustomMultiSelectListControl* self = (TCustomMultiSelectListControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MultiSelect'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->MultiSelect);
 return 1;
}

/* set function: MultiSelect of class  TCustomMultiSelectListControl */
static int tolua_set_TCustomMultiSelectListControl_MultiSelect(lua_State* tolua_S)
{
  TCustomMultiSelectListControl* self = (TCustomMultiSelectListControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MultiSelect'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MultiSelect = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: SelCount of class  TCustomMultiSelectListControl */
static int tolua_get_TCustomMultiSelectListControl_SelCount(lua_State* tolua_S)
{
  TCustomMultiSelectListControl* self = (TCustomMultiSelectListControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'SelCount'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->SelCount);
 return 1;
}

/* method: new of class  TCustomMultiSelectListControl */
static int tolua_z_VCL_TCustomMultiSelectListControl_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TCustomMultiSelectListControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TCustomMultiSelectListControl* tolua_ret = (TCustomMultiSelectListControl*)NULL;//  new TCustomMultiSelectListControl(AOwner);

/* getting type */
  char* lua_type = "TCustomMultiSelectListControl";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TCustomMultiSelectListControl */
static int tolua_z_VCL_TCustomMultiSelectListControl_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TCustomMultiSelectListControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TCustomMultiSelectListControl* tolua_ret = (TCustomMultiSelectListControl*)NULL;//  new TCustomMultiSelectListControl(AOwner);

/* getting type */
  char* lua_type = "TCustomMultiSelectListControl";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TCustomMultiSelectListControl */
static int tolua_z_VCL_TCustomMultiSelectListControl_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomMultiSelectListControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomMultiSelectListControl* self = (TCustomMultiSelectListControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* get function: HorzScrollBar of class  TScrollingWinControl */
static int tolua_get_TScrollingWinControl_HorzScrollBar_ptr(lua_State* tolua_S)
{
  TScrollingWinControl* self = (TScrollingWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HorzScrollBar'",NULL);
#endif

/* getting type */
  char* lua_type = "TControlScrollBar";
   tolua_pushusertype(tolua_S,(void*)(self->HorzScrollBar),lua_type);
 return 1;
}

/* set function: HorzScrollBar of class  TScrollingWinControl */
static int tolua_set_TScrollingWinControl_HorzScrollBar_ptr(lua_State* tolua_S)
{
  TScrollingWinControl* self = (TScrollingWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HorzScrollBar'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TControlScrollBar",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->HorzScrollBar = ((TControlScrollBar*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: VertScrollBar of class  TScrollingWinControl */
static int tolua_get_TScrollingWinControl_VertScrollBar_ptr(lua_State* tolua_S)
{
  TScrollingWinControl* self = (TScrollingWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'VertScrollBar'",NULL);
#endif

/* getting type */
  char* lua_type = "TControlScrollBar";
   tolua_pushusertype(tolua_S,(void*)(self->VertScrollBar),lua_type);
 return 1;
}

/* set function: VertScrollBar of class  TScrollingWinControl */
static int tolua_set_TScrollingWinControl_VertScrollBar_ptr(lua_State* tolua_S)
{
  TScrollingWinControl* self = (TScrollingWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'VertScrollBar'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TControlScrollBar",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->VertScrollBar = ((TControlScrollBar*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* method: new of class  TScrollingWinControl */
static int tolua_z_VCL_TScrollingWinControl_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TScrollingWinControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TScrollingWinControl* tolua_ret = (TScrollingWinControl*)  new TScrollingWinControl(AOwner);

/* getting type */
  char* lua_type = "TScrollingWinControl";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TScrollingWinControl */
static int tolua_z_VCL_TScrollingWinControl_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TScrollingWinControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TScrollingWinControl* tolua_ret = (TScrollingWinControl*)  new TScrollingWinControl(AOwner);

/* getting type */
  char* lua_type = "TScrollingWinControl";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TScrollingWinControl */
static int tolua_z_VCL_TScrollingWinControl_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TScrollingWinControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TScrollingWinControl* self = (TScrollingWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: DisableAutoRange of class  TScrollingWinControl */
static int tolua_z_VCL_TScrollingWinControl_DisableAutoRange00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TScrollingWinControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TScrollingWinControl* self = (TScrollingWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DisableAutoRange'",NULL);
#endif
  {
   self->DisableAutoRange();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DisableAutoRange'.",&tolua_err);
 return 0;
#endif
}

/* method: EnableAutoRange of class  TScrollingWinControl */
static int tolua_z_VCL_TScrollingWinControl_EnableAutoRange00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TScrollingWinControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TScrollingWinControl* self = (TScrollingWinControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'EnableAutoRange'",NULL);
#endif
  {
   self->EnableAutoRange();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'EnableAutoRange'.",&tolua_err);
 return 0;
#endif
}

/* method: ScrollInView of class  TScrollingWinControl */
static int tolua_z_VCL_TScrollingWinControl_ScrollInView00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TScrollingWinControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TScrollingWinControl* self = (TScrollingWinControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TControl* AControl = ((TControl*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ScrollInView'",NULL);
#endif
  {
   self->ScrollInView(AControl);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ScrollInView'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TButtonControl */
static int tolua_z_VCL_TButtonControl_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TButtonControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TButtonControl* tolua_ret = (TButtonControl*)  new TButtonControl(AOwner);

/* getting type */
  char* lua_type = "TButtonControl";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TButtonControl */
static int tolua_z_VCL_TButtonControl_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TButtonControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TButtonControl* tolua_ret = (TButtonControl*)  new TButtonControl(AOwner);

/* getting type */
  char* lua_type = "TButtonControl";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TButtonControl */
static int tolua_z_VCL_TButtonControl_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TButtonControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TButtonControl* self = (TButtonControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TCustomControl */
static int tolua_z_VCL_TCustomControl_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TCustomControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TCustomControl* tolua_ret = (TCustomControl*)  new TCustomControl(AOwner);

/* getting type */
  char* lua_type = "TCustomControl";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TCustomControl */
static int tolua_z_VCL_TCustomControl_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TCustomControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TCustomControl* tolua_ret = (TCustomControl*)  new TCustomControl(AOwner);

/* getting type */
  char* lua_type = "TCustomControl";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TCustomControl */
static int tolua_z_VCL_TCustomControl_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomControl* self = (TCustomControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* get function: ParentCtl3D of class  TEdit */
static int tolua_get_TEdit_ParentCtl3D(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentCtl3D'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentCtl3D);
 return 1;
}

/* set function: ParentCtl3D of class  TEdit */
static int tolua_set_TEdit_ParentCtl3D(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentCtl3D'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentCtl3D = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Ctl3D of class  TEdit */
static int tolua_get_TEdit_Ctl3D(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Ctl3D'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Ctl3D);
 return 1;
}

/* set function: Ctl3D of class  TEdit */
static int tolua_set_TEdit_Ctl3D(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Ctl3D'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Ctl3D = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Enabled of class  TEdit */
static int tolua_get_TEdit_Enabled(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Enabled);
 return 1;
}

/* set function: Enabled of class  TEdit */
static int tolua_set_TEdit_Enabled(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentBiDiMode of class  TEdit */
static int tolua_get_TEdit_ParentBiDiMode(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentBiDiMode);
 return 1;
}

/* set function: ParentBiDiMode of class  TEdit */
static int tolua_set_TEdit_ParentBiDiMode(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentBiDiMode = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentColor of class  TEdit */
static int tolua_get_TEdit_ParentColor(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentColor'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentColor);
 return 1;
}

/* set function: ParentColor of class  TEdit */
static int tolua_set_TEdit_ParentColor(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentColor'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentColor = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentFont of class  TEdit */
static int tolua_get_TEdit_ParentFont(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentFont'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentFont);
 return 1;
}

/* set function: ParentFont of class  TEdit */
static int tolua_set_TEdit_ParentFont(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentFont'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentFont = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentShowHint of class  TEdit */
static int tolua_get_TEdit_ParentShowHint(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentShowHint'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentShowHint);
 return 1;
}

/* set function: ParentShowHint of class  TEdit */
static int tolua_set_TEdit_ParentShowHint(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentShowHint'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentShowHint = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: AutoSelect of class  TEdit */
static int tolua_get_TEdit_AutoSelect(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoSelect'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->AutoSelect);
 return 1;
}

/* set function: AutoSelect of class  TEdit */
static int tolua_set_TEdit_AutoSelect(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoSelect'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AutoSelect = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: AutoSize of class  TEdit */
static int tolua_get_TEdit_AutoSize(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoSize'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->AutoSize);
 return 1;
}

/* set function: AutoSize of class  TEdit */
static int tolua_set_TEdit_AutoSize(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoSize'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AutoSize = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: HideSelection of class  TEdit */
static int tolua_get_TEdit_HideSelection(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HideSelection'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->HideSelection);
 return 1;
}

/* set function: HideSelection of class  TEdit */
static int tolua_set_TEdit_HideSelection(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HideSelection'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->HideSelection = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: OEMConvert of class  TEdit */
static int tolua_get_TEdit_OEMConvert(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'OEMConvert'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->OEMConvert);
 return 1;
}

/* set function: OEMConvert of class  TEdit */
static int tolua_set_TEdit_OEMConvert(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'OEMConvert'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->OEMConvert = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ReadOnly of class  TEdit */
static int tolua_get_TEdit_ReadOnly(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ReadOnly'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ReadOnly);
 return 1;
}

/* set function: ReadOnly of class  TEdit */
static int tolua_set_TEdit_ReadOnly(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ReadOnly'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ReadOnly = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Modified of class  TEdit */
static int tolua_get_TEdit_Modified(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Modified'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Modified);
 return 1;
}

/* set function: Modified of class  TEdit */
static int tolua_set_TEdit_Modified(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Modified'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Modified = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: PasswordChar of class  TEdit */
static int tolua_get_TEdit_PasswordChar(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PasswordChar'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->PasswordChar);
 return 1;
}

/* set function: PasswordChar of class  TEdit */
static int tolua_set_TEdit_PasswordChar(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PasswordChar'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->PasswordChar = ((char)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: MaxLength of class  TEdit */
static int tolua_get_TEdit_MaxLength(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MaxLength'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->MaxLength);
 return 1;
}

/* set function: MaxLength of class  TEdit */
static int tolua_set_TEdit_MaxLength(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MaxLength'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MaxLength = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: CharCase of class  TEdit */
static int tolua_get_TEdit_CharCase(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'CharCase'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->CharCase);
 return 1;
}

/* set function: CharCase of class  TEdit */
static int tolua_set_TEdit_CharCase(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'CharCase'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->CharCase = ((TEditCharCase) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: SelText of class  TEdit */
static int tolua_get_TEdit_SelText(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'SelText'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->SelText);
 return 1;
}

/* set function: SelText of class  TEdit */
static int tolua_set_TEdit_SelText(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'SelText'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SelText = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* get function: Text of class  TEdit */
static int tolua_get_TEdit_Text(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Text'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->Text);
 return 1;
}

/* set function: Text of class  TEdit */
static int tolua_set_TEdit_Text(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Text'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Text = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* get function: Font of class  TEdit */
static int tolua_get_TEdit_Font_ptr(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Font'",NULL);
#endif

/* getting type */
  char* lua_type = "TFont";
   tolua_pushusertype(tolua_S,(void*)(self->Font),lua_type);
 return 1;
}

/* set function: Font of class  TEdit */
static int tolua_set_TEdit_Font_ptr(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Font'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TFont",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Font = ((TFont*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: PopupMenu of class  TEdit */
static int tolua_get_TEdit_PopupMenu_ptr(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PopupMenu'",NULL);
#endif

/* getting type */
  char* lua_type = "TPopupMenu";
   tolua_pushusertype(tolua_S,(void*)(self->PopupMenu),lua_type);
 return 1;
}

/* set function: PopupMenu of class  TEdit */
static int tolua_set_TEdit_PopupMenu_ptr(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PopupMenu'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TPopupMenu",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->PopupMenu = ((TPopupMenu*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: Color of class  TEdit */
static int tolua_get_TEdit_Color(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Color);
 return 1;
}

/* set function: Color of class  TEdit */
static int tolua_set_TEdit_Color(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Color = ((TColor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragKind of class  TEdit */
static int tolua_get_TEdit_DragKind(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragKind);
 return 1;
}

/* set function: DragKind of class  TEdit */
static int tolua_set_TEdit_DragKind(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragKind = ((TDragKind) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragCursor of class  TEdit */
static int tolua_get_TEdit_DragCursor(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragCursor'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragCursor);
 return 1;
}

/* set function: DragCursor of class  TEdit */
static int tolua_set_TEdit_DragCursor(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragCursor'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragCursor = ((TCursor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragMode of class  TEdit */
static int tolua_get_TEdit_DragMode(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragMode);
 return 1;
}

/* set function: DragMode of class  TEdit */
static int tolua_set_TEdit_DragMode(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragMode = ((TDragMode) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: BevelEdges of class  TEdit */
static int tolua_get_TEdit_BevelEdges(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelEdges'",NULL);
#endif

/* getting type */
  char* lua_type = "Set<TBevelEdge, beLeft, beBottom>";
   tolua_pushusertype(tolua_S,(void*)(&(self->BevelEdges)),lua_type);
 return 1;
}

/* set function: BevelEdges of class  TEdit */
static int tolua_set_TEdit_BevelEdges(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelEdges'",NULL);
  if (!tolua_isusertype(tolua_S,2,"Set<TBevelEdge, beLeft, beBottom>",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BevelEdges = *((  Set<TBevelEdge, beLeft, beBottom>*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: BevelInner of class  TEdit */
static int tolua_get_TEdit_BevelInner(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelInner'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BevelInner);
 return 1;
}

/* set function: BevelInner of class  TEdit */
static int tolua_set_TEdit_BevelInner(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelInner'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BevelInner = ((TBevelCut) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: BevelOuter of class  TEdit */
static int tolua_get_TEdit_BevelOuter(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelOuter'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BevelOuter);
 return 1;
}

/* set function: BevelOuter of class  TEdit */
static int tolua_set_TEdit_BevelOuter(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelOuter'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BevelOuter = ((TBevelCut) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: BevelKind of class  TEdit */
static int tolua_get_TEdit_BevelKind(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelKind'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BevelKind);
 return 1;
}

/* set function: BevelKind of class  TEdit */
static int tolua_set_TEdit_BevelKind(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelKind'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BevelKind = ((TBevelKind) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: ImeMode of class  TEdit */
static int tolua_get_TEdit_ImeMode(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ImeMode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ImeMode);
 return 1;
}

/* set function: ImeMode of class  TEdit */
static int tolua_set_TEdit_ImeMode(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ImeMode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ImeMode = ((TImeMode) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: ImeName of class  TEdit */
static int tolua_get_TEdit_ImeName(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ImeName'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->ImeName);
 return 1;
}

/* set function: ImeName of class  TEdit */
static int tolua_set_TEdit_ImeName(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ImeName'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ImeName = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* get function: CanUndo of class  TEdit */
static int tolua_get_TEdit_CanUndo(lua_State* tolua_S)
{
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'CanUndo'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->CanUndo);
 return 1;
}

/* method: new of class  TEdit */
static int tolua_z_VCL_TEdit_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TEdit",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TEdit* tolua_ret = (TEdit*)  new TEdit(AOwner);

/* getting type */
  char* lua_type = "TEdit";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TEdit */
static int tolua_z_VCL_TEdit_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TEdit",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TEdit* tolua_ret = (TEdit*)  new TEdit(AOwner);

/* getting type */
  char* lua_type = "TEdit";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TEdit */
static int tolua_z_VCL_TEdit_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TEdit",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: Clear of class  TEdit */
static int tolua_z_VCL_TEdit_Clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TEdit",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Clear'",NULL);
#endif
  {
   self->Clear();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clear'.",&tolua_err);
 return 0;
#endif
}

/* method: ClearSelection of class  TEdit */
static int tolua_z_VCL_TEdit_ClearSelection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TEdit",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ClearSelection'",NULL);
#endif
  {
   self->ClearSelection();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ClearSelection'.",&tolua_err);
 return 0;
#endif
}

/* method: CopyToClipboard of class  TEdit */
static int tolua_z_VCL_TEdit_CopyToClipboard00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TEdit",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'CopyToClipboard'",NULL);
#endif
  {
   self->CopyToClipboard();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CopyToClipboard'.",&tolua_err);
 return 0;
#endif
}

/* method: CutToClipboard of class  TEdit */
static int tolua_z_VCL_TEdit_CutToClipboard00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TEdit",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'CutToClipboard'",NULL);
#endif
  {
   self->CutToClipboard();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CutToClipboard'.",&tolua_err);
 return 0;
#endif
}

/* method: DefaultHandler of class  TEdit */
static int tolua_z_VCL_TEdit_DefaultHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TEdit",0,&tolua_err) ||
     !tolua_isuserdata(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  void* Message = ((void*)  tolua_touserdata(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DefaultHandler'",NULL);
#endif
  {
   self->DefaultHandler(Message);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DefaultHandler'.",&tolua_err);
 return 0;
#endif
}

/* method: PasteFromClipboard of class  TEdit */
static int tolua_z_VCL_TEdit_PasteFromClipboard00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TEdit",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'PasteFromClipboard'",NULL);
#endif
  {
   self->PasteFromClipboard();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'PasteFromClipboard'.",&tolua_err);
 return 0;
#endif
}

/* method: Undo of class  TEdit */
static int tolua_z_VCL_TEdit_Undo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TEdit",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Undo'",NULL);
#endif
  {
   self->Undo();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Undo'.",&tolua_err);
 return 0;
#endif
}

/* method: ClearUndo of class  TEdit */
static int tolua_z_VCL_TEdit_ClearUndo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TEdit",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ClearUndo'",NULL);
#endif
  {
   self->ClearUndo();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ClearUndo'.",&tolua_err);
 return 0;
#endif
}

/* method: GetSelTextBuf of class  TEdit */
static int tolua_z_VCL_TEdit_GetSelTextBuf00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TEdit",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  char* Buffer = ((char*)  tolua_tostring(tolua_S,2,0));
/*declare*/
  int BufSize = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSelTextBuf'",NULL);
#endif
  {
   int tolua_ret = (int)  self->GetSelTextBuf(Buffer,BufSize);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSelTextBuf'.",&tolua_err);
 return 0;
#endif
}

/* method: SelectAll of class  TEdit */
static int tolua_z_VCL_TEdit_SelectAll00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TEdit",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SelectAll'",NULL);
#endif
  {
   self->SelectAll();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SelectAll'.",&tolua_err);
 return 0;
#endif
}

/* method: SetSelTextBuf of class  TEdit */
static int tolua_z_VCL_TEdit_SetSelTextBuf00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TEdit",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TEdit* self = (TEdit*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  char* Buffer = ((char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSelTextBuf'",NULL);
#endif
  {
   self->SetSelTextBuf(Buffer);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSelTextBuf'.",&tolua_err);
 return 0;
#endif
}

/* get function: MaxLength of class  TMemo */
static int tolua_get_TMemo_MaxLength(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MaxLength'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->MaxLength);
 return 1;
}

/* set function: MaxLength of class  TMemo */
static int tolua_set_TMemo_MaxLength(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MaxLength'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MaxLength = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: OEMConvert of class  TMemo */
static int tolua_get_TMemo_OEMConvert(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'OEMConvert'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->OEMConvert);
 return 1;
}

/* set function: OEMConvert of class  TMemo */
static int tolua_set_TMemo_OEMConvert(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'OEMConvert'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->OEMConvert = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentBiDiMode of class  TMemo */
static int tolua_get_TMemo_ParentBiDiMode(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentBiDiMode);
 return 1;
}

/* set function: ParentBiDiMode of class  TMemo */
static int tolua_set_TMemo_ParentBiDiMode(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentBiDiMode = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentColor of class  TMemo */
static int tolua_get_TMemo_ParentColor(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentColor'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentColor);
 return 1;
}

/* set function: ParentColor of class  TMemo */
static int tolua_set_TMemo_ParentColor(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentColor'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentColor = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentFont of class  TMemo */
static int tolua_get_TMemo_ParentFont(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentFont'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentFont);
 return 1;
}

/* set function: ParentFont of class  TMemo */
static int tolua_set_TMemo_ParentFont(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentFont'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentFont = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentShowHint of class  TMemo */
static int tolua_get_TMemo_ParentShowHint(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentShowHint'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentShowHint);
 return 1;
}

/* set function: ParentShowHint of class  TMemo */
static int tolua_set_TMemo_ParentShowHint(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentShowHint'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentShowHint = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentCtl3D of class  TMemo */
static int tolua_get_TMemo_ParentCtl3D(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentCtl3D'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentCtl3D);
 return 1;
}

/* set function: ParentCtl3D of class  TMemo */
static int tolua_set_TMemo_ParentCtl3D(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentCtl3D'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentCtl3D = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ReadOnly of class  TMemo */
static int tolua_get_TMemo_ReadOnly(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ReadOnly'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ReadOnly);
 return 1;
}

/* set function: ReadOnly of class  TMemo */
static int tolua_set_TMemo_ReadOnly(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ReadOnly'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ReadOnly = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Ctl3D of class  TMemo */
static int tolua_get_TMemo_Ctl3D(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Ctl3D'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Ctl3D);
 return 1;
}

/* set function: Ctl3D of class  TMemo */
static int tolua_set_TMemo_Ctl3D(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Ctl3D'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Ctl3D = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Enabled of class  TMemo */
static int tolua_get_TMemo_Enabled(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Enabled);
 return 1;
}

/* set function: Enabled of class  TMemo */
static int tolua_set_TMemo_Enabled(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: HideSelection of class  TMemo */
static int tolua_get_TMemo_HideSelection(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HideSelection'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->HideSelection);
 return 1;
}

/* set function: HideSelection of class  TMemo */
static int tolua_set_TMemo_HideSelection(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HideSelection'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->HideSelection = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: WantReturns of class  TMemo */
static int tolua_get_TMemo_WantReturns(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'WantReturns'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->WantReturns);
 return 1;
}

/* set function: WantReturns of class  TMemo */
static int tolua_set_TMemo_WantReturns(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'WantReturns'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->WantReturns = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: WantTabs of class  TMemo */
static int tolua_get_TMemo_WantTabs(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'WantTabs'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->WantTabs);
 return 1;
}

/* set function: WantTabs of class  TMemo */
static int tolua_set_TMemo_WantTabs(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'WantTabs'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->WantTabs = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: WordWrap of class  TMemo */
static int tolua_get_TMemo_WordWrap(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'WordWrap'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->WordWrap);
 return 1;
}

/* set function: WordWrap of class  TMemo */
static int tolua_set_TMemo_WordWrap(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'WordWrap'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->WordWrap = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Align of class  TMemo */
static int tolua_get_TMemo_Align(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Align'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Align);
 return 1;
}

/* set function: Align of class  TMemo */
static int tolua_set_TMemo_Align(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Align'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Align = ((TAlign) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Alignment of class  TMemo */
static int tolua_get_TMemo_Alignment(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Alignment'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Alignment);
 return 1;
}

/* set function: Alignment of class  TMemo */
static int tolua_set_TMemo_Alignment(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Alignment'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Alignment = ((TAlignment) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: BevelEdges of class  TMemo */
static int tolua_get_TMemo_BevelEdges(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelEdges'",NULL);
#endif

/* getting type */
  char* lua_type = "Set<TBevelEdge, beLeft, beBottom>";
   tolua_pushusertype(tolua_S,(void*)(&(self->BevelEdges)),lua_type);
 return 1;
}

/* set function: BevelEdges of class  TMemo */
static int tolua_set_TMemo_BevelEdges(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelEdges'",NULL);
  if (!tolua_isusertype(tolua_S,2,"Set<TBevelEdge, beLeft, beBottom>",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BevelEdges = *((  Set<TBevelEdge, beLeft, beBottom>*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: BevelInner of class  TMemo */
static int tolua_get_TMemo_BevelInner(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelInner'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BevelInner);
 return 1;
}

/* set function: BevelInner of class  TMemo */
static int tolua_set_TMemo_BevelInner(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelInner'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BevelInner = ((TBevelCut) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: BevelOuter of class  TMemo */
static int tolua_get_TMemo_BevelOuter(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelOuter'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BevelOuter);
 return 1;
}

/* set function: BevelOuter of class  TMemo */
static int tolua_set_TMemo_BevelOuter(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelOuter'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BevelOuter = ((TBevelCut) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: BevelKind of class  TMemo */
static int tolua_get_TMemo_BevelKind(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelKind'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BevelKind);
 return 1;
}

/* set function: BevelKind of class  TMemo */
static int tolua_set_TMemo_BevelKind(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelKind'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BevelKind = ((TBevelKind) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Color of class  TMemo */
static int tolua_get_TMemo_Color(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Color);
 return 1;
}

/* set function: Color of class  TMemo */
static int tolua_set_TMemo_Color(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Color = ((TColor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragKind of class  TMemo */
static int tolua_get_TMemo_DragKind(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragKind);
 return 1;
}

/* set function: DragKind of class  TMemo */
static int tolua_set_TMemo_DragKind(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragKind = ((TDragKind) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragCursor of class  TMemo */
static int tolua_get_TMemo_DragCursor(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragCursor'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragCursor);
 return 1;
}

/* set function: DragCursor of class  TMemo */
static int tolua_set_TMemo_DragCursor(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragCursor'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragCursor = ((TCursor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragMode of class  TMemo */
static int tolua_get_TMemo_DragMode(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragMode);
 return 1;
}

/* set function: DragMode of class  TMemo */
static int tolua_set_TMemo_DragMode(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragMode = ((TDragMode) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Font of class  TMemo */
static int tolua_get_TMemo_Font_ptr(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Font'",NULL);
#endif

/* getting type */
  char* lua_type = "TFont";
   tolua_pushusertype(tolua_S,(void*)(self->Font),lua_type);
 return 1;
}

/* set function: Font of class  TMemo */
static int tolua_set_TMemo_Font_ptr(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Font'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TFont",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Font = ((TFont*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: ImeMode of class  TMemo */
static int tolua_get_TMemo_ImeMode(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ImeMode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ImeMode);
 return 1;
}

/* set function: ImeMode of class  TMemo */
static int tolua_set_TMemo_ImeMode(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ImeMode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ImeMode = ((TImeMode) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: ImeName of class  TMemo */
static int tolua_get_TMemo_ImeName(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ImeName'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->ImeName);
 return 1;
}

/* set function: ImeName of class  TMemo */
static int tolua_set_TMemo_ImeName(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ImeName'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ImeName = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* get function: CaretPos of class  TMemo */
static int tolua_get_TMemo_CaretPos(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'CaretPos'",NULL);
#endif

/* getting type */
  char* lua_type = "TPoint";
   tolua_pushusertype(tolua_S,(void*)(&(self->CaretPos)),lua_type);
 return 1;
}

/* set function: CaretPos of class  TMemo */
static int tolua_set_TMemo_CaretPos(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'CaretPos'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TPoint",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->CaretPos = *((TPoint*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: Lines of class  TMemo */
static int tolua_get_TMemo_Lines_ptr(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Lines'",NULL);
#endif

/* getting type */
  char* lua_type = "TStrings";
   tolua_pushusertype(tolua_S,(void*)(self->Lines),lua_type);
 return 1;
}

/* set function: Lines of class  TMemo */
static int tolua_set_TMemo_Lines_ptr(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Lines'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TStrings",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Lines = ((TStrings*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: ScrollBars of class  TMemo */
static int tolua_get_TMemo_ScrollBars(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ScrollBars'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ScrollBars);
 return 1;
}

/* set function: ScrollBars of class  TMemo */
static int tolua_set_TMemo_ScrollBars(lua_State* tolua_S)
{
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ScrollBars'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ScrollBars = ((TScrollStyle) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* method: new of class  TMemo */
static int tolua_z_VCL_TMemo_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TMemo",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TMemo* tolua_ret = (TMemo*)  new TMemo(AOwner);

/* getting type */
  char* lua_type = "TMemo";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TMemo */
static int tolua_z_VCL_TMemo_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TMemo",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TMemo* tolua_ret = (TMemo*)  new TMemo(AOwner);

/* getting type */
  char* lua_type = "TMemo";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TMemo */
static int tolua_z_VCL_TMemo_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMemo",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: GetControlsAlignment of class  TMemo */
static int tolua_z_VCL_TMemo_GetControlsAlignment00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TMemo",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TMemo* self = (TMemo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetControlsAlignment'",NULL);
#endif
  {
   TAlignment tolua_ret = (TAlignment)  self->GetControlsAlignment();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetControlsAlignment'.",&tolua_err);
 return 0;
#endif
}

/* get function: Cancel of class  TButton */
static int tolua_get_TButton_Cancel(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Cancel'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Cancel);
 return 1;
}

/* set function: Cancel of class  TButton */
static int tolua_set_TButton_Cancel(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Cancel'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Cancel = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Default of class  TButton */
static int tolua_get_TButton_Default(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Default'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Default);
 return 1;
}

/* set function: Default of class  TButton */
static int tolua_set_TButton_Default(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Default'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Default = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Enabled of class  TButton */
static int tolua_get_TButton_Enabled(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Enabled);
 return 1;
}

/* set function: Enabled of class  TButton */
static int tolua_set_TButton_Enabled(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentBiDiMode of class  TButton */
static int tolua_get_TButton_ParentBiDiMode(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentBiDiMode);
 return 1;
}

/* set function: ParentBiDiMode of class  TButton */
static int tolua_set_TButton_ParentBiDiMode(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentBiDiMode = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentFont of class  TButton */
static int tolua_get_TButton_ParentFont(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentFont'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentFont);
 return 1;
}

/* set function: ParentFont of class  TButton */
static int tolua_set_TButton_ParentFont(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentFont'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentFont = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentShowHint of class  TButton */
static int tolua_get_TButton_ParentShowHint(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentShowHint'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentShowHint);
 return 1;
}

/* set function: ParentShowHint of class  TButton */
static int tolua_set_TButton_ParentShowHint(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentShowHint'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentShowHint = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Caption of class  TButton */
static int tolua_get_TButton_Caption(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Caption'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->Caption);
 return 1;
}

/* set function: Caption of class  TButton */
static int tolua_set_TButton_Caption(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Caption'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Caption = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* get function: Action of class  TButton */
static int tolua_get_TButton_Action_ptr(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Action'",NULL);
#endif

/* getting type */
  char* lua_type = "TBasicAction";
   tolua_pushusertype(tolua_S,(void*)(self->Action),lua_type);
 return 1;
}

/* set function: Action of class  TButton */
static int tolua_set_TButton_Action_ptr(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Action'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TBasicAction",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Action = ((TBasicAction*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: DragKind of class  TButton */
static int tolua_get_TButton_DragKind(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragKind);
 return 1;
}

/* set function: DragKind of class  TButton */
static int tolua_set_TButton_DragKind(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragKind = ((TDragKind) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragCursor of class  TButton */
static int tolua_get_TButton_DragCursor(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragCursor'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragCursor);
 return 1;
}

/* set function: DragCursor of class  TButton */
static int tolua_set_TButton_DragCursor(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragCursor'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragCursor = ((TCursor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragMode of class  TButton */
static int tolua_get_TButton_DragMode(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragMode);
 return 1;
}

/* set function: DragMode of class  TButton */
static int tolua_set_TButton_DragMode(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragMode = ((TDragMode) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: ModalResult of class  TButton */
static int tolua_get_TButton_ModalResult(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ModalResult'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ModalResult);
 return 1;
}

/* set function: ModalResult of class  TButton */
static int tolua_set_TButton_ModalResult(lua_State* tolua_S)
{
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ModalResult'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ModalResult = ((  int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* method: new of class  TButton */
static int tolua_z_VCL_TButton_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TButton",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TButton* tolua_ret = (TButton*)  new TButton(AOwner);

/* getting type */
  char* lua_type = "TButton";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TButton */
static int tolua_z_VCL_TButton_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TButton",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TButton* tolua_ret = (TButton*)  new TButton(AOwner);

/* getting type */
  char* lua_type = "TButton";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: Click of class  TButton */
static int tolua_z_VCL_TButton_Click00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Click'",NULL);
#endif
  {
   self->Click();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Click'.",&tolua_err);
 return 0;
#endif
}

/* method: UseRightToLeftAlignment of class  TButton */
static int tolua_z_VCL_TButton_UseRightToLeftAlignment00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'UseRightToLeftAlignment'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->UseRightToLeftAlignment();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'UseRightToLeftAlignment'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TButton */
static int tolua_z_VCL_TButton_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TButton* self = (TButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* get function: AllowGrayed of class  TCheckBox */
static int tolua_get_TCheckBox_AllowGrayed(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AllowGrayed'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->AllowGrayed);
 return 1;
}

/* set function: AllowGrayed of class  TCheckBox */
static int tolua_set_TCheckBox_AllowGrayed(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AllowGrayed'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AllowGrayed = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Checked of class  TCheckBox */
static int tolua_get_TCheckBox_Checked(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Checked'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Checked);
 return 1;
}

/* set function: Checked of class  TCheckBox */
static int tolua_set_TCheckBox_Checked(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Checked'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Checked = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Ctl3D of class  TCheckBox */
static int tolua_get_TCheckBox_Ctl3D(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Ctl3D'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Ctl3D);
 return 1;
}

/* set function: Ctl3D of class  TCheckBox */
static int tolua_set_TCheckBox_Ctl3D(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Ctl3D'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Ctl3D = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Enabled of class  TCheckBox */
static int tolua_get_TCheckBox_Enabled(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Enabled);
 return 1;
}

/* set function: Enabled of class  TCheckBox */
static int tolua_set_TCheckBox_Enabled(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentBiDiMode of class  TCheckBox */
static int tolua_get_TCheckBox_ParentBiDiMode(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentBiDiMode);
 return 1;
}

/* set function: ParentBiDiMode of class  TCheckBox */
static int tolua_set_TCheckBox_ParentBiDiMode(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentBiDiMode = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentColor of class  TCheckBox */
static int tolua_get_TCheckBox_ParentColor(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentColor'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentColor);
 return 1;
}

/* set function: ParentColor of class  TCheckBox */
static int tolua_set_TCheckBox_ParentColor(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentColor'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentColor = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentFont of class  TCheckBox */
static int tolua_get_TCheckBox_ParentFont(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentFont'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentFont);
 return 1;
}

/* set function: ParentFont of class  TCheckBox */
static int tolua_set_TCheckBox_ParentFont(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentFont'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentFont = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentShowHint of class  TCheckBox */
static int tolua_get_TCheckBox_ParentShowHint(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentShowHint'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentShowHint);
 return 1;
}

/* set function: ParentShowHint of class  TCheckBox */
static int tolua_set_TCheckBox_ParentShowHint(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentShowHint'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentShowHint = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentCtl3D of class  TCheckBox */
static int tolua_get_TCheckBox_ParentCtl3D(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentCtl3D'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentCtl3D);
 return 1;
}

/* set function: ParentCtl3D of class  TCheckBox */
static int tolua_set_TCheckBox_ParentCtl3D(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentCtl3D'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentCtl3D = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Action of class  TCheckBox */
static int tolua_get_TCheckBox_Action_ptr(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Action'",NULL);
#endif

/* getting type */
  char* lua_type = "TBasicAction";
   tolua_pushusertype(tolua_S,(void*)(self->Action),lua_type);
 return 1;
}

/* set function: Action of class  TCheckBox */
static int tolua_set_TCheckBox_Action_ptr(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Action'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TBasicAction",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Action = ((TBasicAction*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: Alignment of class  TCheckBox */
static int tolua_get_TCheckBox_Alignment(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Alignment'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Alignment);
 return 1;
}

/* set function: Alignment of class  TCheckBox */
static int tolua_set_TCheckBox_Alignment(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Alignment'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Alignment = ((TAlignment) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Caption of class  TCheckBox */
static int tolua_get_TCheckBox_Caption(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Caption'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->Caption);
 return 1;
}

/* set function: Caption of class  TCheckBox */
static int tolua_set_TCheckBox_Caption(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Caption'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Caption = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* get function: Color of class  TCheckBox */
static int tolua_get_TCheckBox_Color(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Color);
 return 1;
}

/* set function: Color of class  TCheckBox */
static int tolua_set_TCheckBox_Color(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Color = ((TColor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragKind of class  TCheckBox */
static int tolua_get_TCheckBox_DragKind(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragKind);
 return 1;
}

/* set function: DragKind of class  TCheckBox */
static int tolua_set_TCheckBox_DragKind(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragKind = ((TDragKind) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragCursor of class  TCheckBox */
static int tolua_get_TCheckBox_DragCursor(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragCursor'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragCursor);
 return 1;
}

/* set function: DragCursor of class  TCheckBox */
static int tolua_set_TCheckBox_DragCursor(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragCursor'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragCursor = ((TCursor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragMode of class  TCheckBox */
static int tolua_get_TCheckBox_DragMode(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragMode);
 return 1;
}

/* set function: DragMode of class  TCheckBox */
static int tolua_set_TCheckBox_DragMode(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragMode = ((TDragMode) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Font of class  TCheckBox */
static int tolua_get_TCheckBox_Font_ptr(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Font'",NULL);
#endif

/* getting type */
  char* lua_type = "TFont";
   tolua_pushusertype(tolua_S,(void*)(self->Font),lua_type);
 return 1;
}

/* set function: Font of class  TCheckBox */
static int tolua_set_TCheckBox_Font_ptr(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Font'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TFont",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Font = ((TFont*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: State of class  TCheckBox */
static int tolua_get_TCheckBox_State(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'State'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->State);
 return 1;
}

/* set function: State of class  TCheckBox */
static int tolua_set_TCheckBox_State(lua_State* tolua_S)
{
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'State'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->State = ((TCheckBoxState) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* method: new of class  TCheckBox */
static int tolua_z_VCL_TCheckBox_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TCheckBox",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TCheckBox* tolua_ret = (TCheckBox*)  new TCheckBox(AOwner);

/* getting type */
  char* lua_type = "TCheckBox";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TCheckBox */
static int tolua_z_VCL_TCheckBox_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TCheckBox",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TCheckBox* tolua_ret = (TCheckBox*)  new TCheckBox(AOwner);

/* getting type */
  char* lua_type = "TCheckBox";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TCheckBox */
static int tolua_z_VCL_TCheckBox_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCheckBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: GetControlsAlignment of class  TCheckBox */
static int tolua_z_VCL_TCheckBox_GetControlsAlignment00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCheckBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCheckBox* self = (TCheckBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetControlsAlignment'",NULL);
#endif
  {
   TAlignment tolua_ret = (TAlignment)  self->GetControlsAlignment();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetControlsAlignment'.",&tolua_err);
 return 0;
#endif
}

/* get function: ParentBiDiMode of class  TRadioButton */
static int tolua_get_TRadioButton_ParentBiDiMode(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentBiDiMode);
 return 1;
}

/* set function: ParentBiDiMode of class  TRadioButton */
static int tolua_set_TRadioButton_ParentBiDiMode(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentBiDiMode = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentColor of class  TRadioButton */
static int tolua_get_TRadioButton_ParentColor(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentColor'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentColor);
 return 1;
}

/* set function: ParentColor of class  TRadioButton */
static int tolua_set_TRadioButton_ParentColor(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentColor'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentColor = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentFont of class  TRadioButton */
static int tolua_get_TRadioButton_ParentFont(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentFont'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentFont);
 return 1;
}

/* set function: ParentFont of class  TRadioButton */
static int tolua_set_TRadioButton_ParentFont(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentFont'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentFont = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentShowHint of class  TRadioButton */
static int tolua_get_TRadioButton_ParentShowHint(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentShowHint'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentShowHint);
 return 1;
}

/* set function: ParentShowHint of class  TRadioButton */
static int tolua_set_TRadioButton_ParentShowHint(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentShowHint'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentShowHint = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentCtl3D of class  TRadioButton */
static int tolua_get_TRadioButton_ParentCtl3D(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentCtl3D'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentCtl3D);
 return 1;
}

/* set function: ParentCtl3D of class  TRadioButton */
static int tolua_set_TRadioButton_ParentCtl3D(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentCtl3D'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentCtl3D = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Checked of class  TRadioButton */
static int tolua_get_TRadioButton_Checked(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Checked'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Checked);
 return 1;
}

/* set function: Checked of class  TRadioButton */
static int tolua_set_TRadioButton_Checked(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Checked'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Checked = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Ctl3D of class  TRadioButton */
static int tolua_get_TRadioButton_Ctl3D(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Ctl3D'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Ctl3D);
 return 1;
}

/* set function: Ctl3D of class  TRadioButton */
static int tolua_set_TRadioButton_Ctl3D(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Ctl3D'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Ctl3D = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Enabled of class  TRadioButton */
static int tolua_get_TRadioButton_Enabled(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Enabled);
 return 1;
}

/* set function: Enabled of class  TRadioButton */
static int tolua_set_TRadioButton_Enabled(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Action of class  TRadioButton */
static int tolua_get_TRadioButton_Action_ptr(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Action'",NULL);
#endif

/* getting type */
  char* lua_type = "TBasicAction";
   tolua_pushusertype(tolua_S,(void*)(self->Action),lua_type);
 return 1;
}

/* set function: Action of class  TRadioButton */
static int tolua_set_TRadioButton_Action_ptr(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Action'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TBasicAction",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Action = ((TBasicAction*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: Alignment of class  TRadioButton */
static int tolua_get_TRadioButton_Alignment(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Alignment'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Alignment);
 return 1;
}

/* set function: Alignment of class  TRadioButton */
static int tolua_set_TRadioButton_Alignment(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Alignment'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Alignment = ((   int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Caption of class  TRadioButton */
static int tolua_get_TRadioButton_Caption(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Caption'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->Caption);
 return 1;
}

/* set function: Caption of class  TRadioButton */
static int tolua_set_TRadioButton_Caption(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Caption'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Caption = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* get function: Color of class  TRadioButton */
static int tolua_get_TRadioButton_Color(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Color);
 return 1;
}

/* set function: Color of class  TRadioButton */
static int tolua_set_TRadioButton_Color(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Color = ((TColor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragKind of class  TRadioButton */
static int tolua_get_TRadioButton_DragKind(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragKind);
 return 1;
}

/* set function: DragKind of class  TRadioButton */
static int tolua_set_TRadioButton_DragKind(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragKind = ((TDragKind) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragCursor of class  TRadioButton */
static int tolua_get_TRadioButton_DragCursor(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragCursor'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragCursor);
 return 1;
}

/* set function: DragCursor of class  TRadioButton */
static int tolua_set_TRadioButton_DragCursor(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragCursor'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragCursor = ((TCursor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragMode of class  TRadioButton */
static int tolua_get_TRadioButton_DragMode(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragMode);
 return 1;
}

/* set function: DragMode of class  TRadioButton */
static int tolua_set_TRadioButton_DragMode(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragMode = ((TDragMode) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Font of class  TRadioButton */
static int tolua_get_TRadioButton_Font_ptr(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Font'",NULL);
#endif

/* getting type */
  char* lua_type = "TFont";
   tolua_pushusertype(tolua_S,(void*)(self->Font),lua_type);
 return 1;
}

/* set function: Font of class  TRadioButton */
static int tolua_set_TRadioButton_Font_ptr(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Font'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TFont",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Font = ((TFont*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: PopupMenu of class  TRadioButton */
static int tolua_get_TRadioButton_PopupMenu_ptr(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PopupMenu'",NULL);
#endif

/* getting type */
  char* lua_type = "TPopupMenu";
   tolua_pushusertype(tolua_S,(void*)(self->PopupMenu),lua_type);
 return 1;
}

/* set function: PopupMenu of class  TRadioButton */
static int tolua_set_TRadioButton_PopupMenu_ptr(lua_State* tolua_S)
{
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PopupMenu'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TPopupMenu",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->PopupMenu = ((TPopupMenu*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* method: new of class  TRadioButton */
static int tolua_z_VCL_TRadioButton_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TRadioButton",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TRadioButton* tolua_ret = (TRadioButton*)  new TRadioButton(AOwner);

/* getting type */
  char* lua_type = "TRadioButton";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TRadioButton */
static int tolua_z_VCL_TRadioButton_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TRadioButton",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TRadioButton* tolua_ret = (TRadioButton*)  new TRadioButton(AOwner);

/* getting type */
  char* lua_type = "TRadioButton";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: GetControlsAlignment of class  TRadioButton */
static int tolua_z_VCL_TRadioButton_GetControlsAlignment00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TRadioButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetControlsAlignment'",NULL);
#endif
  {
   TAlignment tolua_ret = (TAlignment)  self->GetControlsAlignment();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetControlsAlignment'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TRadioButton */
static int tolua_z_VCL_TRadioButton_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TRadioButton",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TRadioButton* self = (TRadioButton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* get function: TabWidth of class  TListBox */
static int tolua_get_TListBox_TabWidth(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TabWidth'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->TabWidth);
 return 1;
}

/* set function: TabWidth of class  TListBox */
static int tolua_set_TListBox_TabWidth(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TabWidth'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->TabWidth = ((short)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Columns of class  TListBox */
static int tolua_get_TListBox_Columns(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Columns'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Columns);
 return 1;
}

/* set function: Columns of class  TListBox */
static int tolua_set_TListBox_Columns(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Columns'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Columns = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Count of class  TListBox */
static int tolua_get_TListBox_Count(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Count'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Count);
 return 1;
}

/* set function: Count of class  TListBox */
static int tolua_set_TListBox_Count(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Count'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Count = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: ItemHeight of class  TListBox */
static int tolua_get_TListBox_ItemHeight(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ItemHeight'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ItemHeight);
 return 1;
}

/* set function: ItemHeight of class  TListBox */
static int tolua_set_TListBox_ItemHeight(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ItemHeight'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ItemHeight = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: ScrollWidth of class  TListBox */
static int tolua_get_TListBox_ScrollWidth(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ScrollWidth'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ScrollWidth);
 return 1;
}

/* set function: ScrollWidth of class  TListBox */
static int tolua_set_TListBox_ScrollWidth(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ScrollWidth'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ScrollWidth = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: TopIndex of class  TListBox */
static int tolua_get_TListBox_TopIndex(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TopIndex'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->TopIndex);
 return 1;
}

/* set function: TopIndex of class  TListBox */
static int tolua_set_TListBox_TopIndex(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TopIndex'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->TopIndex = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Ctl3D of class  TListBox */
static int tolua_get_TListBox_Ctl3D(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Ctl3D'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Ctl3D);
 return 1;
}

/* set function: Ctl3D of class  TListBox */
static int tolua_set_TListBox_Ctl3D(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Ctl3D'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Ctl3D = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentBiDiMode of class  TListBox */
static int tolua_get_TListBox_ParentBiDiMode(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentBiDiMode);
 return 1;
}

/* set function: ParentBiDiMode of class  TListBox */
static int tolua_set_TListBox_ParentBiDiMode(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentBiDiMode = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentColor of class  TListBox */
static int tolua_get_TListBox_ParentColor(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentColor'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentColor);
 return 1;
}

/* set function: ParentColor of class  TListBox */
static int tolua_set_TListBox_ParentColor(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentColor'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentColor = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentFont of class  TListBox */
static int tolua_get_TListBox_ParentFont(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentFont'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentFont);
 return 1;
}

/* set function: ParentFont of class  TListBox */
static int tolua_set_TListBox_ParentFont(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentFont'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentFont = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentShowHint of class  TListBox */
static int tolua_get_TListBox_ParentShowHint(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentShowHint'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentShowHint);
 return 1;
}

/* set function: ParentShowHint of class  TListBox */
static int tolua_set_TListBox_ParentShowHint(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentShowHint'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentShowHint = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ExtendedSelect of class  TListBox */
static int tolua_get_TListBox_ExtendedSelect(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ExtendedSelect'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ExtendedSelect);
 return 1;
}

/* set function: ExtendedSelect of class  TListBox */
static int tolua_set_TListBox_ExtendedSelect(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ExtendedSelect'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ExtendedSelect = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: IntegralHeight of class  TListBox */
static int tolua_get_TListBox_IntegralHeight(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'IntegralHeight'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->IntegralHeight);
 return 1;
}

/* set function: IntegralHeight of class  TListBox */
static int tolua_set_TListBox_IntegralHeight(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'IntegralHeight'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->IntegralHeight = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentCtl3D of class  TListBox */
static int tolua_get_TListBox_ParentCtl3D(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentCtl3D'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentCtl3D);
 return 1;
}

/* set function: ParentCtl3D of class  TListBox */
static int tolua_set_TListBox_ParentCtl3D(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentCtl3D'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentCtl3D = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Sorted of class  TListBox */
static int tolua_get_TListBox_Sorted(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Sorted'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Sorted);
 return 1;
}

/* set function: Sorted of class  TListBox */
static int tolua_set_TListBox_Sorted(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Sorted'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Sorted = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: AutoComplete of class  TListBox */
static int tolua_get_TListBox_AutoComplete(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoComplete'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->AutoComplete);
 return 1;
}

/* set function: AutoComplete of class  TListBox */
static int tolua_set_TListBox_AutoComplete(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoComplete'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AutoComplete = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Selected of class  TListBox */
static int tolua_get_z_VCL_TListBox_Selected(lua_State* tolua_S)
{
 int tolua_index;
  TListBox* self;
 lua_pushstring(tolua_S,".self");
 lua_rawget(tolua_S,1);
 self = (TListBox*)  lua_touserdata(tolua_S,-1);
 tolua_index = (int)tolua_tonumber(tolua_S,2,0);
 tolua_pushboolean(tolua_S,(bool)self->Selected[tolua_index]);
 return 1;
}

/* set function: Selected of class  TListBox */
static int tolua_set_z_VCL_TListBox_Selected(lua_State* tolua_S)
{
 int tolua_index;
  TListBox* self;
 lua_pushstring(tolua_S,".self");
 lua_rawget(tolua_S,1);
 self = (TListBox*)  lua_touserdata(tolua_S,-1);
 tolua_index = (int)tolua_tonumber(tolua_S,2,0);
  self->Selected[tolua_index] = ((bool)  tolua_toboolean(tolua_S,3,0));
 return 0;
}

/* get function: Style of class  TListBox */
static int tolua_get_TListBox_Style(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Style'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Style);
 return 1;
}

/* set function: Style of class  TListBox */
static int tolua_set_TListBox_Style(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Style'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Style = ((TListBoxStyle) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Align of class  TListBox */
static int tolua_get_TListBox_Align(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Align'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Align);
 return 1;
}

/* set function: Align of class  TListBox */
static int tolua_set_TListBox_Align(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Align'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Align = ((TAlign) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: BevelEdges of class  TListBox */
static int tolua_get_TListBox_BevelEdges(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelEdges'",NULL);
#endif

/* getting type */
  char* lua_type = "Set<TBevelEdge, beLeft, beBottom>";
   tolua_pushusertype(tolua_S,(void*)(&(self->BevelEdges)),lua_type);
 return 1;
}

/* set function: BevelEdges of class  TListBox */
static int tolua_set_TListBox_BevelEdges(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelEdges'",NULL);
  if (!tolua_isusertype(tolua_S,2,"Set<TBevelEdge, beLeft, beBottom>",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BevelEdges = *((  Set<TBevelEdge, beLeft, beBottom>*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: BevelInner of class  TListBox */
static int tolua_get_TListBox_BevelInner(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelInner'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BevelInner);
 return 1;
}

/* set function: BevelInner of class  TListBox */
static int tolua_set_TListBox_BevelInner(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelInner'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BevelInner = ((TBevelCut) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: BevelOuter of class  TListBox */
static int tolua_get_TListBox_BevelOuter(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelOuter'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BevelOuter);
 return 1;
}

/* set function: BevelOuter of class  TListBox */
static int tolua_set_TListBox_BevelOuter(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelOuter'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BevelOuter = ((TBevelCut) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: BevelKind of class  TListBox */
static int tolua_get_TListBox_BevelKind(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelKind'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BevelKind);
 return 1;
}

/* set function: BevelKind of class  TListBox */
static int tolua_set_TListBox_BevelKind(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelKind'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BevelKind = ((TBevelKind) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: BorderStyle of class  TListBox */
static int tolua_get_TListBox_BorderStyle(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BorderStyle'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BorderStyle);
 return 1;
}

/* set function: BorderStyle of class  TListBox */
static int tolua_set_TListBox_BorderStyle(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BorderStyle'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BorderStyle = ((   int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Color of class  TListBox */
static int tolua_get_TListBox_Color(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Color);
 return 1;
}

/* set function: Color of class  TListBox */
static int tolua_set_TListBox_Color(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Color = ((TColor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragKind of class  TListBox */
static int tolua_get_TListBox_DragKind(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragKind);
 return 1;
}

/* set function: DragKind of class  TListBox */
static int tolua_set_TListBox_DragKind(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragKind = ((TDragKind) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragCursor of class  TListBox */
static int tolua_get_TListBox_DragCursor(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragCursor'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragCursor);
 return 1;
}

/* set function: DragCursor of class  TListBox */
static int tolua_set_TListBox_DragCursor(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragCursor'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragCursor = ((TCursor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragMode of class  TListBox */
static int tolua_get_TListBox_DragMode(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragMode);
 return 1;
}

/* set function: DragMode of class  TListBox */
static int tolua_set_TListBox_DragMode(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragMode = ((TDragMode) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Font of class  TListBox */
static int tolua_get_TListBox_Font_ptr(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Font'",NULL);
#endif

/* getting type */
  char* lua_type = "TFont";
   tolua_pushusertype(tolua_S,(void*)(self->Font),lua_type);
 return 1;
}

/* set function: Font of class  TListBox */
static int tolua_set_TListBox_Font_ptr(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Font'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TFont",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Font = ((TFont*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: PopupMenu of class  TListBox */
static int tolua_get_TListBox_PopupMenu_ptr(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PopupMenu'",NULL);
#endif

/* getting type */
  char* lua_type = "TPopupMenu";
   tolua_pushusertype(tolua_S,(void*)(self->PopupMenu),lua_type);
 return 1;
}

/* set function: PopupMenu of class  TListBox */
static int tolua_set_TListBox_PopupMenu_ptr(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PopupMenu'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TPopupMenu",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->PopupMenu = ((TPopupMenu*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: ImeMode of class  TListBox */
static int tolua_get_TListBox_ImeMode(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ImeMode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ImeMode);
 return 1;
}

/* set function: ImeMode of class  TListBox */
static int tolua_set_TListBox_ImeMode(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ImeMode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ImeMode = ((TImeMode) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: ImeName of class  TListBox */
static int tolua_get_TListBox_ImeName(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ImeName'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->ImeName);
 return 1;
}

/* set function: ImeName of class  TListBox */
static int tolua_set_TListBox_ImeName(lua_State* tolua_S)
{
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ImeName'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ImeName = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* method: new of class  TListBox */
static int tolua_z_VCL_TListBox_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TListBox",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TListBox* tolua_ret = (TListBox*)  new TListBox(AOwner);

/* getting type */
  char* lua_type = "TListBox";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TListBox */
static int tolua_z_VCL_TListBox_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TListBox",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TListBox* tolua_ret = (TListBox*)  new TListBox(AOwner);

/* getting type */
  char* lua_type = "TListBox";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TListBox */
static int tolua_z_VCL_TListBox_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TListBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: AddItem of class  TListBox */
static int tolua_z_VCL_TListBox_AddItem00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TListBox",0,&tolua_err) ||
     !tolua_isansi(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"TObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  AnsiString Item = ((AnsiString)  tolua_toansi(tolua_S,2,0));
/*declare*/
  TObject* AObject = ((TObject*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddItem'",NULL);
#endif
  {
   self->AddItem(Item,AObject);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddItem'.",&tolua_err);
 return 0;
#endif
}

/* method: Clear of class  TListBox */
static int tolua_z_VCL_TListBox_Clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TListBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Clear'",NULL);
#endif
  {
   self->Clear();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clear'.",&tolua_err);
 return 0;
#endif
}

/* method: ClearSelection of class  TListBox */
static int tolua_z_VCL_TListBox_ClearSelection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TListBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ClearSelection'",NULL);
#endif
  {
   self->ClearSelection();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ClearSelection'.",&tolua_err);
 return 0;
#endif
}

/* method: CopySelection of class  TListBox */
static int tolua_z_VCL_TListBox_CopySelection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TListBox",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TCustomListControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TCustomListControl* Destination = ((TCustomListControl*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'CopySelection'",NULL);
#endif
  {
   self->CopySelection(Destination);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CopySelection'.",&tolua_err);
 return 0;
#endif
}

/* method: DeleteSelected of class  TListBox */
static int tolua_z_VCL_TListBox_DeleteSelected00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TListBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DeleteSelected'",NULL);
#endif
  {
   self->DeleteSelected();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DeleteSelected'.",&tolua_err);
 return 0;
#endif
}

/* method: ItemAtPos of class  TListBox */
static int tolua_z_VCL_TListBox_ItemAtPos00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TListBox",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const TPoint",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  const TPoint* Pos = ((const TPoint*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  bool Existing = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ItemAtPos'",NULL);
#endif
  {
   int tolua_ret = (int)  self->ItemAtPos(*Pos,Existing);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ItemAtPos'.",&tolua_err);
 return 0;
#endif
}

/* method: ItemRect of class  TListBox */
static int tolua_z_VCL_TListBox_ItemRect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TListBox",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ItemRect'",NULL);
#endif
  {
   TRect tolua_ret = (TRect)  self->ItemRect(Index);
   {
#ifdef __cplusplus
    void* tolua_obj = new TRect(tolua_ret);

/* getting type */
  char* lua_type = "TRect";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(TRect));

/* getting type */
  char* lua_type = "TRect";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ItemRect'.",&tolua_err);
 return 0;
#endif
}

/* method: SelectAll of class  TListBox */
static int tolua_z_VCL_TListBox_SelectAll00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TListBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TListBox* self = (TListBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SelectAll'",NULL);
#endif
  {
   self->SelectAll();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SelectAll'.",&tolua_err);
 return 0;
#endif
}

/* get function: Max of class  TScrollBar */
static int tolua_get_TScrollBar_Max(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Max'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Max);
 return 1;
}

/* set function: Max of class  TScrollBar */
static int tolua_set_TScrollBar_Max(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Max'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Max = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Min of class  TScrollBar */
static int tolua_get_TScrollBar_Min(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Min'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Min);
 return 1;
}

/* set function: Min of class  TScrollBar */
static int tolua_set_TScrollBar_Min(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Min'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Min = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: PageSize of class  TScrollBar */
static int tolua_get_TScrollBar_PageSize(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PageSize'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->PageSize);
 return 1;
}

/* set function: PageSize of class  TScrollBar */
static int tolua_set_TScrollBar_PageSize(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PageSize'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->PageSize = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Position of class  TScrollBar */
static int tolua_get_TScrollBar_Position(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Position'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Position);
 return 1;
}

/* set function: Position of class  TScrollBar */
static int tolua_set_TScrollBar_Position(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Position'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Position = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: ParentCtl3D of class  TScrollBar */
static int tolua_get_TScrollBar_ParentCtl3D(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentCtl3D'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentCtl3D);
 return 1;
}

/* set function: ParentCtl3D of class  TScrollBar */
static int tolua_set_TScrollBar_ParentCtl3D(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentCtl3D'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentCtl3D = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Ctl3D of class  TScrollBar */
static int tolua_get_TScrollBar_Ctl3D(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Ctl3D'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Ctl3D);
 return 1;
}

/* set function: Ctl3D of class  TScrollBar */
static int tolua_set_TScrollBar_Ctl3D(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Ctl3D'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Ctl3D = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Enabled of class  TScrollBar */
static int tolua_get_TScrollBar_Enabled(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Enabled);
 return 1;
}

/* set function: Enabled of class  TScrollBar */
static int tolua_set_TScrollBar_Enabled(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentBiDiMode of class  TScrollBar */
static int tolua_get_TScrollBar_ParentBiDiMode(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentBiDiMode);
 return 1;
}

/* set function: ParentBiDiMode of class  TScrollBar */
static int tolua_set_TScrollBar_ParentBiDiMode(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentBiDiMode = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentShowHint of class  TScrollBar */
static int tolua_get_TScrollBar_ParentShowHint(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentShowHint'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentShowHint);
 return 1;
}

/* set function: ParentShowHint of class  TScrollBar */
static int tolua_set_TScrollBar_ParentShowHint(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentShowHint'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentShowHint = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Align of class  TScrollBar */
static int tolua_get_TScrollBar_Align(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Align'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Align);
 return 1;
}

/* set function: Align of class  TScrollBar */
static int tolua_set_TScrollBar_Align(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Align'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Align = ((TAlign) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragKind of class  TScrollBar */
static int tolua_get_TScrollBar_DragKind(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragKind);
 return 1;
}

/* set function: DragKind of class  TScrollBar */
static int tolua_set_TScrollBar_DragKind(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragKind = ((TDragKind) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragCursor of class  TScrollBar */
static int tolua_get_TScrollBar_DragCursor(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragCursor'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragCursor);
 return 1;
}

/* set function: DragCursor of class  TScrollBar */
static int tolua_set_TScrollBar_DragCursor(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragCursor'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragCursor = ((TCursor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragMode of class  TScrollBar */
static int tolua_get_TScrollBar_DragMode(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragMode);
 return 1;
}

/* set function: DragMode of class  TScrollBar */
static int tolua_set_TScrollBar_DragMode(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragMode = ((TDragMode) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Kind of class  TScrollBar */
static int tolua_get_TScrollBar_Kind(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Kind'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Kind);
 return 1;
}

/* set function: Kind of class  TScrollBar */
static int tolua_set_TScrollBar_Kind(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Kind'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Kind = ((TScrollBarKind) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: LargeChange of class  TScrollBar */
static int tolua_get_TScrollBar_LargeChange(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'LargeChange'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->LargeChange);
 return 1;
}

/* set function: LargeChange of class  TScrollBar */
static int tolua_set_TScrollBar_LargeChange(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'LargeChange'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->LargeChange = ((  Word)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: PopupMenu of class  TScrollBar */
static int tolua_get_TScrollBar_PopupMenu_ptr(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PopupMenu'",NULL);
#endif

/* getting type */
  char* lua_type = "TPopupMenu";
   tolua_pushusertype(tolua_S,(void*)(self->PopupMenu),lua_type);
 return 1;
}

/* set function: PopupMenu of class  TScrollBar */
static int tolua_set_TScrollBar_PopupMenu_ptr(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PopupMenu'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TPopupMenu",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->PopupMenu = ((TPopupMenu*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: SmallChange of class  TScrollBar */
static int tolua_get_TScrollBar_SmallChange(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'SmallChange'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->SmallChange);
 return 1;
}

/* set function: SmallChange of class  TScrollBar */
static int tolua_set_TScrollBar_SmallChange(lua_State* tolua_S)
{
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'SmallChange'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SmallChange = ((  Word)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* method: new of class  TScrollBar */
static int tolua_z_VCL_TScrollBar_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TScrollBar",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TScrollBar* tolua_ret = (TScrollBar*)  new TScrollBar(AOwner);

/* getting type */
  char* lua_type = "TScrollBar";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TScrollBar */
static int tolua_z_VCL_TScrollBar_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TScrollBar",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TScrollBar* tolua_ret = (TScrollBar*)  new TScrollBar(AOwner);

/* getting type */
  char* lua_type = "TScrollBar";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: SetParams of class  TScrollBar */
static int tolua_z_VCL_TScrollBar_SetParams00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TScrollBar",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int APosition = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int AMin = ((int)  tolua_tonumber(tolua_S,3,0));
/*declare*/
  int AMax = ((int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetParams'",NULL);
#endif
  {
   self->SetParams(APosition,AMin,AMax);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetParams'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TScrollBar */
static int tolua_z_VCL_TScrollBar_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TScrollBar",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TScrollBar* self = (TScrollBar*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* get function: ItemHeight of class  TComboBox */
static int tolua_get_TComboBox_ItemHeight(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ItemHeight'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ItemHeight);
 return 1;
}

/* set function: ItemHeight of class  TComboBox */
static int tolua_set_TComboBox_ItemHeight(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ItemHeight'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ItemHeight = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DropDownCount of class  TComboBox */
static int tolua_get_TComboBox_DropDownCount(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DropDownCount'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DropDownCount);
 return 1;
}

/* set function: DropDownCount of class  TComboBox */
static int tolua_set_TComboBox_DropDownCount(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DropDownCount'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DropDownCount = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: ItemIndex of class  TComboBox */
static int tolua_get_TComboBox_ItemIndex(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ItemIndex'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ItemIndex);
 return 1;
}

/* set function: ItemIndex of class  TComboBox */
static int tolua_set_TComboBox_ItemIndex(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ItemIndex'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ItemIndex = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: MaxLength of class  TComboBox */
static int tolua_get_TComboBox_MaxLength(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MaxLength'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->MaxLength);
 return 1;
}

/* set function: MaxLength of class  TComboBox */
static int tolua_set_TComboBox_MaxLength(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MaxLength'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MaxLength = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: ParentCtl3D of class  TComboBox */
static int tolua_get_TComboBox_ParentCtl3D(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentCtl3D'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentCtl3D);
 return 1;
}

/* set function: ParentCtl3D of class  TComboBox */
static int tolua_set_TComboBox_ParentCtl3D(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentCtl3D'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentCtl3D = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Sorted of class  TComboBox */
static int tolua_get_TComboBox_Sorted(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Sorted'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Sorted);
 return 1;
}

/* set function: Sorted of class  TComboBox */
static int tolua_set_TComboBox_Sorted(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Sorted'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Sorted = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: AutoComplete of class  TComboBox */
static int tolua_get_TComboBox_AutoComplete(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoComplete'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->AutoComplete);
 return 1;
}

/* set function: AutoComplete of class  TComboBox */
static int tolua_set_TComboBox_AutoComplete(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoComplete'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AutoComplete = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: AutoDropDown of class  TComboBox */
static int tolua_get_TComboBox_AutoDropDown(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoDropDown'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->AutoDropDown);
 return 1;
}

/* set function: AutoDropDown of class  TComboBox */
static int tolua_set_TComboBox_AutoDropDown(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoDropDown'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AutoDropDown = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Ctl3D of class  TComboBox */
static int tolua_get_TComboBox_Ctl3D(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Ctl3D'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Ctl3D);
 return 1;
}

/* set function: Ctl3D of class  TComboBox */
static int tolua_set_TComboBox_Ctl3D(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Ctl3D'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Ctl3D = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Enabled of class  TComboBox */
static int tolua_get_TComboBox_Enabled(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Enabled);
 return 1;
}

/* set function: Enabled of class  TComboBox */
static int tolua_set_TComboBox_Enabled(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentBiDiMode of class  TComboBox */
static int tolua_get_TComboBox_ParentBiDiMode(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentBiDiMode);
 return 1;
}

/* set function: ParentBiDiMode of class  TComboBox */
static int tolua_set_TComboBox_ParentBiDiMode(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentBiDiMode = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentColor of class  TComboBox */
static int tolua_get_TComboBox_ParentColor(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentColor'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentColor);
 return 1;
}

/* set function: ParentColor of class  TComboBox */
static int tolua_set_TComboBox_ParentColor(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentColor'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentColor = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentFont of class  TComboBox */
static int tolua_get_TComboBox_ParentFont(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentFont'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentFont);
 return 1;
}

/* set function: ParentFont of class  TComboBox */
static int tolua_set_TComboBox_ParentFont(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentFont'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentFont = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentShowHint of class  TComboBox */
static int tolua_get_TComboBox_ParentShowHint(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentShowHint'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentShowHint);
 return 1;
}

/* set function: ParentShowHint of class  TComboBox */
static int tolua_set_TComboBox_ParentShowHint(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentShowHint'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentShowHint = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: CharCase of class  TComboBox */
static int tolua_get_TComboBox_CharCase(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'CharCase'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->CharCase);
 return 1;
}

/* set function: CharCase of class  TComboBox */
static int tolua_set_TComboBox_CharCase(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'CharCase'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->CharCase = ((TEditCharCase) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: SelText of class  TComboBox */
static int tolua_get_TComboBox_SelText(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'SelText'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->SelText);
 return 1;
}

/* set function: SelText of class  TComboBox */
static int tolua_set_TComboBox_SelText(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'SelText'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SelText = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* get function: BevelEdges of class  TComboBox */
static int tolua_get_TComboBox_BevelEdges(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelEdges'",NULL);
#endif

/* getting type */
  char* lua_type = "Set<TBevelEdge, beLeft, beBottom>";
   tolua_pushusertype(tolua_S,(void*)(&(self->BevelEdges)),lua_type);
 return 1;
}

/* set function: BevelEdges of class  TComboBox */
static int tolua_set_TComboBox_BevelEdges(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelEdges'",NULL);
  if (!tolua_isusertype(tolua_S,2,"Set<TBevelEdge, beLeft, beBottom>",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BevelEdges = *((  Set<TBevelEdge, beLeft, beBottom>*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: BevelInner of class  TComboBox */
static int tolua_get_TComboBox_BevelInner(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelInner'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BevelInner);
 return 1;
}

/* set function: BevelInner of class  TComboBox */
static int tolua_set_TComboBox_BevelInner(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelInner'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BevelInner = ((TBevelCut) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: BevelOuter of class  TComboBox */
static int tolua_get_TComboBox_BevelOuter(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelOuter'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BevelOuter);
 return 1;
}

/* set function: BevelOuter of class  TComboBox */
static int tolua_set_TComboBox_BevelOuter(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelOuter'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BevelOuter = ((TBevelCut) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: BevelKind of class  TComboBox */
static int tolua_get_TComboBox_BevelKind(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelKind'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BevelKind);
 return 1;
}

/* set function: BevelKind of class  TComboBox */
static int tolua_set_TComboBox_BevelKind(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelKind'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BevelKind = ((TBevelKind) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Style of class  TComboBox */
static int tolua_get_TComboBox_Style(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Style'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Style);
 return 1;
}

/* set function: Style of class  TComboBox */
static int tolua_set_TComboBox_Style(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Style'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Style = ((TComboBoxStyle) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Color of class  TComboBox */
static int tolua_get_TComboBox_Color(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Color);
 return 1;
}

/* set function: Color of class  TComboBox */
static int tolua_set_TComboBox_Color(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Color = ((TColor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragKind of class  TComboBox */
static int tolua_get_TComboBox_DragKind(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragKind);
 return 1;
}

/* set function: DragKind of class  TComboBox */
static int tolua_set_TComboBox_DragKind(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragKind = ((TDragKind) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragCursor of class  TComboBox */
static int tolua_get_TComboBox_DragCursor(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragCursor'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragCursor);
 return 1;
}

/* set function: DragCursor of class  TComboBox */
static int tolua_set_TComboBox_DragCursor(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragCursor'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragCursor = ((TCursor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragMode of class  TComboBox */
static int tolua_get_TComboBox_DragMode(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragMode);
 return 1;
}

/* set function: DragMode of class  TComboBox */
static int tolua_set_TComboBox_DragMode(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragMode = ((TDragMode) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Font of class  TComboBox */
static int tolua_get_TComboBox_Font_ptr(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Font'",NULL);
#endif

/* getting type */
  char* lua_type = "TFont";
   tolua_pushusertype(tolua_S,(void*)(self->Font),lua_type);
 return 1;
}

/* set function: Font of class  TComboBox */
static int tolua_set_TComboBox_Font_ptr(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Font'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TFont",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Font = ((TFont*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: PopupMenu of class  TComboBox */
static int tolua_get_TComboBox_PopupMenu_ptr(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PopupMenu'",NULL);
#endif

/* getting type */
  char* lua_type = "TPopupMenu";
   tolua_pushusertype(tolua_S,(void*)(self->PopupMenu),lua_type);
 return 1;
}

/* set function: PopupMenu of class  TComboBox */
static int tolua_set_TComboBox_PopupMenu_ptr(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PopupMenu'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TPopupMenu",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->PopupMenu = ((TPopupMenu*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: ImeMode of class  TComboBox */
static int tolua_get_TComboBox_ImeMode(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ImeMode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ImeMode);
 return 1;
}

/* set function: ImeMode of class  TComboBox */
static int tolua_set_TComboBox_ImeMode(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ImeMode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ImeMode = ((TImeMode) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: ImeName of class  TComboBox */
static int tolua_get_TComboBox_ImeName(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ImeName'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->ImeName);
 return 1;
}

/* set function: ImeName of class  TComboBox */
static int tolua_set_TComboBox_ImeName(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ImeName'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ImeName = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* get function: Text of class  TComboBox */
static int tolua_get_TComboBox_Text(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Text'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->Text);
 return 1;
}

/* set function: Text of class  TComboBox */
static int tolua_set_TComboBox_Text(lua_State* tolua_S)
{
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Text'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Text = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* method: new of class  TComboBox */
static int tolua_z_VCL_TComboBox_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TComboBox",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TComboBox* tolua_ret = (TComboBox*)  new TComboBox(AOwner);

/* getting type */
  char* lua_type = "TComboBox";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TComboBox */
static int tolua_z_VCL_TComboBox_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TComboBox",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TComboBox* tolua_ret = (TComboBox*)  new TComboBox(AOwner);

/* getting type */
  char* lua_type = "TComboBox";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TComboBox */
static int tolua_z_VCL_TComboBox_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TComboBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TComboBox* self = (TComboBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* get function: Ctl3D of class  TGroupBox */
static int tolua_get_TGroupBox_Ctl3D(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Ctl3D'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Ctl3D);
 return 1;
}

/* set function: Ctl3D of class  TGroupBox */
static int tolua_set_TGroupBox_Ctl3D(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Ctl3D'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Ctl3D = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: DockSite of class  TGroupBox */
static int tolua_get_TGroupBox_DockSite(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DockSite'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->DockSite);
 return 1;
}

/* set function: DockSite of class  TGroupBox */
static int tolua_set_TGroupBox_DockSite(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DockSite'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DockSite = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Enabled of class  TGroupBox */
static int tolua_get_TGroupBox_Enabled(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Enabled);
 return 1;
}

/* set function: Enabled of class  TGroupBox */
static int tolua_set_TGroupBox_Enabled(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentBiDiMode of class  TGroupBox */
static int tolua_get_TGroupBox_ParentBiDiMode(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentBiDiMode);
 return 1;
}

/* set function: ParentBiDiMode of class  TGroupBox */
static int tolua_set_TGroupBox_ParentBiDiMode(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentBiDiMode = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentColor of class  TGroupBox */
static int tolua_get_TGroupBox_ParentColor(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentColor'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentColor);
 return 1;
}

/* set function: ParentColor of class  TGroupBox */
static int tolua_set_TGroupBox_ParentColor(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentColor'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentColor = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentFont of class  TGroupBox */
static int tolua_get_TGroupBox_ParentFont(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentFont'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentFont);
 return 1;
}

/* set function: ParentFont of class  TGroupBox */
static int tolua_set_TGroupBox_ParentFont(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentFont'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentFont = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentShowHint of class  TGroupBox */
static int tolua_get_TGroupBox_ParentShowHint(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentShowHint'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentShowHint);
 return 1;
}

/* set function: ParentShowHint of class  TGroupBox */
static int tolua_set_TGroupBox_ParentShowHint(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentShowHint'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentShowHint = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentCtl3D of class  TGroupBox */
static int tolua_get_TGroupBox_ParentCtl3D(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentCtl3D'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentCtl3D);
 return 1;
}

/* set function: ParentCtl3D of class  TGroupBox */
static int tolua_set_TGroupBox_ParentCtl3D(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentCtl3D'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentCtl3D = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Align of class  TGroupBox */
static int tolua_get_TGroupBox_Align(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Align'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Align);
 return 1;
}

/* set function: Align of class  TGroupBox */
static int tolua_set_TGroupBox_Align(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Align'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Align = ((TAlign) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Caption of class  TGroupBox */
static int tolua_get_TGroupBox_Caption(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Caption'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->Caption);
 return 1;
}

/* set function: Caption of class  TGroupBox */
static int tolua_set_TGroupBox_Caption(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Caption'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Caption = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* get function: Color of class  TGroupBox */
static int tolua_get_TGroupBox_Color(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Color);
 return 1;
}

/* set function: Color of class  TGroupBox */
static int tolua_set_TGroupBox_Color(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Color = ((TColor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragKind of class  TGroupBox */
static int tolua_get_TGroupBox_DragKind(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragKind);
 return 1;
}

/* set function: DragKind of class  TGroupBox */
static int tolua_set_TGroupBox_DragKind(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragKind = ((TDragKind) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragCursor of class  TGroupBox */
static int tolua_get_TGroupBox_DragCursor(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragCursor'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragCursor);
 return 1;
}

/* set function: DragCursor of class  TGroupBox */
static int tolua_set_TGroupBox_DragCursor(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragCursor'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragCursor = ((TCursor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragMode of class  TGroupBox */
static int tolua_get_TGroupBox_DragMode(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragMode);
 return 1;
}

/* set function: DragMode of class  TGroupBox */
static int tolua_set_TGroupBox_DragMode(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragMode = ((TDragMode) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Font of class  TGroupBox */
static int tolua_get_TGroupBox_Font_ptr(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Font'",NULL);
#endif

/* getting type */
  char* lua_type = "TFont";
   tolua_pushusertype(tolua_S,(void*)(self->Font),lua_type);
 return 1;
}

/* set function: Font of class  TGroupBox */
static int tolua_set_TGroupBox_Font_ptr(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Font'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TFont",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Font = ((TFont*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: PopupMenu of class  TGroupBox */
static int tolua_get_TGroupBox_PopupMenu_ptr(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PopupMenu'",NULL);
#endif

/* getting type */
  char* lua_type = "TPopupMenu";
   tolua_pushusertype(tolua_S,(void*)(self->PopupMenu),lua_type);
 return 1;
}

/* set function: PopupMenu of class  TGroupBox */
static int tolua_set_TGroupBox_PopupMenu_ptr(lua_State* tolua_S)
{
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PopupMenu'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TPopupMenu",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->PopupMenu = ((TPopupMenu*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* method: new of class  TGroupBox */
static int tolua_z_VCL_TGroupBox_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TGroupBox",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TGroupBox* tolua_ret = (TGroupBox*)  new TGroupBox(AOwner);

/* getting type */
  char* lua_type = "TGroupBox";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TGroupBox */
static int tolua_z_VCL_TGroupBox_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TGroupBox",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TGroupBox* tolua_ret = (TGroupBox*)  new TGroupBox(AOwner);

/* getting type */
  char* lua_type = "TGroupBox";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TGroupBox */
static int tolua_z_VCL_TGroupBox_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TGroupBox",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TGroupBox* self = (TGroupBox*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* get function: Columns of class  TRadioGroup */
static int tolua_get_TRadioGroup_Columns(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Columns'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Columns);
 return 1;
}

/* set function: Columns of class  TRadioGroup */
static int tolua_set_TRadioGroup_Columns(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Columns'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Columns = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Ctl3D of class  TRadioGroup */
static int tolua_get_TRadioGroup_Ctl3D(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Ctl3D'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Ctl3D);
 return 1;
}

/* set function: Ctl3D of class  TRadioGroup */
static int tolua_set_TRadioGroup_Ctl3D(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Ctl3D'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Ctl3D = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Enabled of class  TRadioGroup */
static int tolua_get_TRadioGroup_Enabled(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Enabled);
 return 1;
}

/* set function: Enabled of class  TRadioGroup */
static int tolua_set_TRadioGroup_Enabled(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentBiDiMode of class  TRadioGroup */
static int tolua_get_TRadioGroup_ParentBiDiMode(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentBiDiMode);
 return 1;
}

/* set function: ParentBiDiMode of class  TRadioGroup */
static int tolua_set_TRadioGroup_ParentBiDiMode(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentBiDiMode = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentColor of class  TRadioGroup */
static int tolua_get_TRadioGroup_ParentColor(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentColor'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentColor);
 return 1;
}

/* set function: ParentColor of class  TRadioGroup */
static int tolua_set_TRadioGroup_ParentColor(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentColor'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentColor = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentFont of class  TRadioGroup */
static int tolua_get_TRadioGroup_ParentFont(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentFont'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentFont);
 return 1;
}

/* set function: ParentFont of class  TRadioGroup */
static int tolua_set_TRadioGroup_ParentFont(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentFont'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentFont = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentShowHint of class  TRadioGroup */
static int tolua_get_TRadioGroup_ParentShowHint(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentShowHint'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentShowHint);
 return 1;
}

/* set function: ParentShowHint of class  TRadioGroup */
static int tolua_set_TRadioGroup_ParentShowHint(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentShowHint'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentShowHint = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentCtl3D of class  TRadioGroup */
static int tolua_get_TRadioGroup_ParentCtl3D(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentCtl3D'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentCtl3D);
 return 1;
}

/* set function: ParentCtl3D of class  TRadioGroup */
static int tolua_set_TRadioGroup_ParentCtl3D(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentCtl3D'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentCtl3D = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Align of class  TRadioGroup */
static int tolua_get_TRadioGroup_Align(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Align'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Align);
 return 1;
}

/* set function: Align of class  TRadioGroup */
static int tolua_set_TRadioGroup_Align(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Align'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Align = ((TAlign) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Caption of class  TRadioGroup */
static int tolua_get_TRadioGroup_Caption(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Caption'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->Caption);
 return 1;
}

/* set function: Caption of class  TRadioGroup */
static int tolua_set_TRadioGroup_Caption(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Caption'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Caption = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* get function: Color of class  TRadioGroup */
static int tolua_get_TRadioGroup_Color(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Color);
 return 1;
}

/* set function: Color of class  TRadioGroup */
static int tolua_set_TRadioGroup_Color(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Color = ((TColor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragKind of class  TRadioGroup */
static int tolua_get_TRadioGroup_DragKind(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragKind);
 return 1;
}

/* set function: DragKind of class  TRadioGroup */
static int tolua_set_TRadioGroup_DragKind(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragKind = ((TDragKind) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragCursor of class  TRadioGroup */
static int tolua_get_TRadioGroup_DragCursor(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragCursor'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragCursor);
 return 1;
}

/* set function: DragCursor of class  TRadioGroup */
static int tolua_set_TRadioGroup_DragCursor(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragCursor'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragCursor = ((TCursor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragMode of class  TRadioGroup */
static int tolua_get_TRadioGroup_DragMode(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragMode);
 return 1;
}

/* set function: DragMode of class  TRadioGroup */
static int tolua_set_TRadioGroup_DragMode(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragMode = ((TDragMode) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Font of class  TRadioGroup */
static int tolua_get_TRadioGroup_Font_ptr(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Font'",NULL);
#endif

/* getting type */
  char* lua_type = "TFont";
   tolua_pushusertype(tolua_S,(void*)(self->Font),lua_type);
 return 1;
}

/* set function: Font of class  TRadioGroup */
static int tolua_set_TRadioGroup_Font_ptr(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Font'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TFont",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Font = ((TFont*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: PopupMenu of class  TRadioGroup */
static int tolua_get_TRadioGroup_PopupMenu_ptr(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PopupMenu'",NULL);
#endif

/* getting type */
  char* lua_type = "TPopupMenu";
   tolua_pushusertype(tolua_S,(void*)(self->PopupMenu),lua_type);
 return 1;
}

/* set function: PopupMenu of class  TRadioGroup */
static int tolua_set_TRadioGroup_PopupMenu_ptr(lua_State* tolua_S)
{
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PopupMenu'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TPopupMenu",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->PopupMenu = ((TPopupMenu*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* method: new of class  TRadioGroup */
static int tolua_z_VCL_TRadioGroup_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TRadioGroup",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TRadioGroup* tolua_ret = (TRadioGroup*)  new TRadioGroup(AOwner);

/* getting type */
  char* lua_type = "TRadioGroup";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TRadioGroup */
static int tolua_z_VCL_TRadioGroup_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TRadioGroup",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TRadioGroup* tolua_ret = (TRadioGroup*)  new TRadioGroup(AOwner);

/* getting type */
  char* lua_type = "TRadioGroup";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TRadioGroup */
static int tolua_z_VCL_TRadioGroup_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TRadioGroup",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: FlipChildren of class  TRadioGroup */
static int tolua_z_VCL_TRadioGroup_FlipChildren00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TRadioGroup",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TRadioGroup* self = (TRadioGroup*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  bool AllLevels = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'FlipChildren'",NULL);
#endif
  {
   self->FlipChildren(AllLevels);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'FlipChildren'.",&tolua_err);
 return 0;
#endif
}

/* get function: AutoSize of class  TPanel */
static int tolua_get_TPanel_AutoSize(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoSize'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->AutoSize);
 return 1;
}

/* set function: AutoSize of class  TPanel */
static int tolua_set_TPanel_AutoSize(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoSize'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AutoSize = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentBiDiMode of class  TPanel */
static int tolua_get_TPanel_ParentBiDiMode(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentBiDiMode);
 return 1;
}

/* set function: ParentBiDiMode of class  TPanel */
static int tolua_set_TPanel_ParentBiDiMode(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentBiDiMode = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentColor of class  TPanel */
static int tolua_get_TPanel_ParentColor(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentColor'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentColor);
 return 1;
}

/* set function: ParentColor of class  TPanel */
static int tolua_set_TPanel_ParentColor(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentColor'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentColor = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentFont of class  TPanel */
static int tolua_get_TPanel_ParentFont(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentFont'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentFont);
 return 1;
}

/* set function: ParentFont of class  TPanel */
static int tolua_set_TPanel_ParentFont(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentFont'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentFont = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentShowHint of class  TPanel */
static int tolua_get_TPanel_ParentShowHint(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentShowHint'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentShowHint);
 return 1;
}

/* set function: ParentShowHint of class  TPanel */
static int tolua_set_TPanel_ParentShowHint(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentShowHint'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentShowHint = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: FullRepaint of class  TPanel */
static int tolua_get_TPanel_FullRepaint(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FullRepaint'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->FullRepaint);
 return 1;
}

/* set function: FullRepaint of class  TPanel */
static int tolua_set_TPanel_FullRepaint(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FullRepaint'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->FullRepaint = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Locked of class  TPanel */
static int tolua_get_TPanel_Locked(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Locked'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Locked);
 return 1;
}

/* set function: Locked of class  TPanel */
static int tolua_set_TPanel_Locked(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Locked'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Locked = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentCtl3D of class  TPanel */
static int tolua_get_TPanel_ParentCtl3D(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentCtl3D'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentCtl3D);
 return 1;
}

/* set function: ParentCtl3D of class  TPanel */
static int tolua_set_TPanel_ParentCtl3D(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentCtl3D'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentCtl3D = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Enabled of class  TPanel */
static int tolua_get_TPanel_Enabled(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Enabled);
 return 1;
}

/* set function: Enabled of class  TPanel */
static int tolua_set_TPanel_Enabled(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Ctl3D of class  TPanel */
static int tolua_get_TPanel_Ctl3D(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Ctl3D'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Ctl3D);
 return 1;
}

/* set function: Ctl3D of class  TPanel */
static int tolua_set_TPanel_Ctl3D(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Ctl3D'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Ctl3D = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: DockSite of class  TPanel */
static int tolua_get_TPanel_DockSite(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DockSite'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->DockSite);
 return 1;
}

/* set function: DockSite of class  TPanel */
static int tolua_set_TPanel_DockSite(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DockSite'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DockSite = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: UseDockManager of class  TPanel */
static int tolua_get_TPanel_UseDockManager(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'UseDockManager'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->UseDockManager);
 return 1;
}

/* set function: UseDockManager of class  TPanel */
static int tolua_set_TPanel_UseDockManager(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'UseDockManager'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->UseDockManager = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Align of class  TPanel */
static int tolua_get_TPanel_Align(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Align'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Align);
 return 1;
}

/* set function: Align of class  TPanel */
static int tolua_set_TPanel_Align(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Align'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Align = ((TAlign) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Alignment of class  TPanel */
static int tolua_get_TPanel_Alignment(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Alignment'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Alignment);
 return 1;
}

/* set function: Alignment of class  TPanel */
static int tolua_set_TPanel_Alignment(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Alignment'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Alignment = ((TAlignment) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: BevelInner of class  TPanel */
static int tolua_get_TPanel_BevelInner(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelInner'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BevelInner);
 return 1;
}

/* set function: BevelInner of class  TPanel */
static int tolua_set_TPanel_BevelInner(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelInner'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BevelInner = ((TBevelCut) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: BevelOuter of class  TPanel */
static int tolua_get_TPanel_BevelOuter(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelOuter'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BevelOuter);
 return 1;
}

/* set function: BevelOuter of class  TPanel */
static int tolua_set_TPanel_BevelOuter(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelOuter'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BevelOuter = ((TBevelCut) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: BevelWidth of class  TPanel */
static int tolua_get_TPanel_BevelWidth(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelWidth'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BevelWidth);
 return 1;
}

/* set function: BevelWidth of class  TPanel */
static int tolua_set_TPanel_BevelWidth(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BevelWidth'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BevelWidth = ((  int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: BorderWidth of class  TPanel */
static int tolua_get_TPanel_BorderWidth(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BorderWidth'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BorderWidth);
 return 1;
}

/* set function: BorderWidth of class  TPanel */
static int tolua_set_TPanel_BorderWidth(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BorderWidth'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BorderWidth = ((  int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: BorderStyle of class  TPanel */
static int tolua_get_TPanel_BorderStyle(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BorderStyle'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BorderStyle);
 return 1;
}

/* set function: BorderStyle of class  TPanel */
static int tolua_set_TPanel_BorderStyle(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BorderStyle'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BorderStyle = ((   int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Caption of class  TPanel */
static int tolua_get_TPanel_Caption(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Caption'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->Caption);
 return 1;
}

/* set function: Caption of class  TPanel */
static int tolua_set_TPanel_Caption(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Caption'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Caption = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* get function: Color of class  TPanel */
static int tolua_get_TPanel_Color(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Color);
 return 1;
}

/* set function: Color of class  TPanel */
static int tolua_set_TPanel_Color(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Color = ((TColor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragKind of class  TPanel */
static int tolua_get_TPanel_DragKind(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragKind);
 return 1;
}

/* set function: DragKind of class  TPanel */
static int tolua_set_TPanel_DragKind(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragKind = ((TDragKind) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragCursor of class  TPanel */
static int tolua_get_TPanel_DragCursor(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragCursor'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragCursor);
 return 1;
}

/* set function: DragCursor of class  TPanel */
static int tolua_set_TPanel_DragCursor(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragCursor'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragCursor = ((TCursor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragMode of class  TPanel */
static int tolua_get_TPanel_DragMode(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragMode);
 return 1;
}

/* set function: DragMode of class  TPanel */
static int tolua_set_TPanel_DragMode(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragMode = ((TDragMode) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Font of class  TPanel */
static int tolua_get_TPanel_Font_ptr(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Font'",NULL);
#endif

/* getting type */
  char* lua_type = "TFont";
   tolua_pushusertype(tolua_S,(void*)(self->Font),lua_type);
 return 1;
}

/* set function: Font of class  TPanel */
static int tolua_set_TPanel_Font_ptr(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Font'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TFont",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Font = ((TFont*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: PopupMenu of class  TPanel */
static int tolua_get_TPanel_PopupMenu_ptr(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PopupMenu'",NULL);
#endif

/* getting type */
  char* lua_type = "TPopupMenu";
   tolua_pushusertype(tolua_S,(void*)(self->PopupMenu),lua_type);
 return 1;
}

/* set function: PopupMenu of class  TPanel */
static int tolua_set_TPanel_PopupMenu_ptr(lua_State* tolua_S)
{
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PopupMenu'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TPopupMenu",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->PopupMenu = ((TPopupMenu*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* method: new of class  TPanel */
static int tolua_z_VCL_TPanel_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TPanel",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TPanel* tolua_ret = (TPanel*)  new TPanel(AOwner);

/* getting type */
  char* lua_type = "TPanel";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TPanel */
static int tolua_z_VCL_TPanel_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TPanel",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TPanel* tolua_ret = (TPanel*)  new TPanel(AOwner);

/* getting type */
  char* lua_type = "TPanel";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TPanel */
static int tolua_z_VCL_TPanel_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TPanel",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: GetControlsAlignment of class  TPanel */
static int tolua_z_VCL_TPanel_GetControlsAlignment00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TPanel",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TPanel* self = (TPanel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetControlsAlignment'",NULL);
#endif
  {
   TAlignment tolua_ret = (TAlignment)  self->GetControlsAlignment();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetControlsAlignment'.",&tolua_err);
 return 0;
#endif
}

/* get function: ClientHeight of class  TForm */
static int tolua_get_TForm_ClientHeight(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ClientHeight'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ClientHeight);
 return 1;
}

/* set function: ClientHeight of class  TForm */
static int tolua_set_TForm_ClientHeight(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ClientHeight'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ClientHeight = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: PixelsPerInch of class  TForm */
static int tolua_get_TForm_PixelsPerInch(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PixelsPerInch'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->PixelsPerInch);
 return 1;
}

/* set function: PixelsPerInch of class  TForm */
static int tolua_set_TForm_PixelsPerInch(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PixelsPerInch'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->PixelsPerInch = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: ClientWidth of class  TForm */
static int tolua_get_TForm_ClientWidth(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ClientWidth'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ClientWidth);
 return 1;
}

/* set function: ClientWidth of class  TForm */
static int tolua_set_TForm_ClientWidth(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ClientWidth'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ClientWidth = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DropTarget of class  TForm */
static int tolua_get_TForm_DropTarget(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DropTarget'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->DropTarget);
 return 1;
}

/* set function: DropTarget of class  TForm */
static int tolua_set_TForm_DropTarget(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DropTarget'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DropTarget = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: KeyPreview of class  TForm */
static int tolua_get_TForm_KeyPreview(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'KeyPreview'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->KeyPreview);
 return 1;
}

/* set function: KeyPreview of class  TForm */
static int tolua_set_TForm_KeyPreview(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'KeyPreview'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->KeyPreview = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: AlphaBlend of class  TForm */
static int tolua_get_TForm_AlphaBlend(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AlphaBlend'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->AlphaBlend);
 return 1;
}

/* set function: AlphaBlend of class  TForm */
static int tolua_set_TForm_AlphaBlend(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AlphaBlend'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AlphaBlend = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: AutoScroll of class  TForm */
static int tolua_get_TForm_AutoScroll(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoScroll'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->AutoScroll);
 return 1;
}

/* set function: AutoScroll of class  TForm */
static int tolua_set_TForm_AutoScroll(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoScroll'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AutoScroll = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: AutoSize of class  TForm */
static int tolua_get_TForm_AutoSize(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoSize'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->AutoSize);
 return 1;
}

/* set function: AutoSize of class  TForm */
static int tolua_set_TForm_AutoSize(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoSize'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AutoSize = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: TransparentColor of class  TForm */
static int tolua_get_TForm_TransparentColor(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TransparentColor'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->TransparentColor);
 return 1;
}

/* set function: TransparentColor of class  TForm */
static int tolua_set_TForm_TransparentColor(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TransparentColor'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->TransparentColor = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Ctl3D of class  TForm */
static int tolua_get_TForm_Ctl3D(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Ctl3D'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Ctl3D);
 return 1;
}

/* set function: Ctl3D of class  TForm */
static int tolua_set_TForm_Ctl3D(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Ctl3D'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Ctl3D = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: UseDockManager of class  TForm */
static int tolua_get_TForm_UseDockManager(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'UseDockManager'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->UseDockManager);
 return 1;
}

/* set function: UseDockManager of class  TForm */
static int tolua_set_TForm_UseDockManager(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'UseDockManager'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->UseDockManager = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: DockSite of class  TForm */
static int tolua_get_TForm_DockSite(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DockSite'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->DockSite);
 return 1;
}

/* set function: DockSite of class  TForm */
static int tolua_set_TForm_DockSite(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DockSite'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DockSite = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Enabled of class  TForm */
static int tolua_get_TForm_Enabled(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Enabled);
 return 1;
}

/* set function: Enabled of class  TForm */
static int tolua_set_TForm_Enabled(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Enabled'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentBiDiMode of class  TForm */
static int tolua_get_TForm_ParentBiDiMode(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentBiDiMode);
 return 1;
}

/* set function: ParentBiDiMode of class  TForm */
static int tolua_set_TForm_ParentBiDiMode(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentBiDiMode'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentBiDiMode = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ParentFont of class  TForm */
static int tolua_get_TForm_ParentFont(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentFont'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ParentFont);
 return 1;
}

/* set function: ParentFont of class  TForm */
static int tolua_set_TForm_ParentFont(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ParentFont'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ParentFont = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: OldCreateOrder of class  TForm */
static int tolua_get_TForm_OldCreateOrder(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'OldCreateOrder'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->OldCreateOrder);
 return 1;
}

/* set function: OldCreateOrder of class  TForm */
static int tolua_set_TForm_OldCreateOrder(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'OldCreateOrder'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->OldCreateOrder = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Scaled of class  TForm */
static int tolua_get_TForm_Scaled(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Scaled'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Scaled);
 return 1;
}

/* set function: Scaled of class  TForm */
static int tolua_set_TForm_Scaled(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Scaled'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Scaled = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: TileMode of class  TForm */
static int tolua_get_TForm_TileMode(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TileMode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->TileMode);
 return 1;
}

/* set function: TileMode of class  TForm */
static int tolua_set_TForm_TileMode(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TileMode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->TileMode = ((TTileMode) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Action of class  TForm */
static int tolua_get_TForm_Action_ptr(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Action'",NULL);
#endif

/* getting type */
  char* lua_type = "TBasicAction";
   tolua_pushusertype(tolua_S,(void*)(self->Action),lua_type);
 return 1;
}

/* set function: Action of class  TForm */
static int tolua_set_TForm_Action_ptr(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Action'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TBasicAction",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Action = ((TBasicAction*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: Align of class  TForm */
static int tolua_get_TForm_Align(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Align'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Align);
 return 1;
}

/* set function: Align of class  TForm */
static int tolua_set_TForm_Align(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Align'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Align = ((TAlign) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: AlphaBlendValue of class  TForm */
static int tolua_get_TForm_AlphaBlendValue(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AlphaBlendValue'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->AlphaBlendValue);
 return 1;
}

/* set function: AlphaBlendValue of class  TForm */
static int tolua_set_TForm_AlphaBlendValue(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AlphaBlendValue'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AlphaBlendValue = ((Byte)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: BorderIcons of class  TForm */
static int tolua_get_TForm_BorderIcons(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BorderIcons'",NULL);
#endif

/* getting type */
  char* lua_type = "Set<TBorderIcon, biSystemMenu, biHelp>";
   tolua_pushusertype(tolua_S,(void*)(&(self->BorderIcons)),lua_type);
 return 1;
}

/* set function: BorderIcons of class  TForm */
static int tolua_set_TForm_BorderIcons(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BorderIcons'",NULL);
  if (!tolua_isusertype(tolua_S,2,"Set<TBorderIcon, biSystemMenu, biHelp>",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BorderIcons = *((  Set<TBorderIcon, biSystemMenu, biHelp>*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: BorderStyle of class  TForm */
static int tolua_get_TForm_BorderStyle(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BorderStyle'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BorderStyle);
 return 1;
}

/* set function: BorderStyle of class  TForm */
static int tolua_set_TForm_BorderStyle(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BorderStyle'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BorderStyle = ((TFormBorderStyle) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: BorderWidth of class  TForm */
static int tolua_get_TForm_BorderWidth(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BorderWidth'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->BorderWidth);
 return 1;
}

/* set function: BorderWidth of class  TForm */
static int tolua_set_TForm_BorderWidth(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'BorderWidth'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->BorderWidth = ((  int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Caption of class  TForm */
static int tolua_get_TForm_Caption(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Caption'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->Caption);
 return 1;
}

/* set function: Caption of class  TForm */
static int tolua_set_TForm_Caption(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Caption'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Caption = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* get function: Color of class  TForm */
static int tolua_get_TForm_Color(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Color);
 return 1;
}

/* set function: Color of class  TForm */
static int tolua_set_TForm_Color(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Color'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Color = ((TColor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: TransparentColorValue of class  TForm */
static int tolua_get_TForm_TransparentColorValue(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TransparentColorValue'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->TransparentColorValue);
 return 1;
}

/* set function: TransparentColorValue of class  TForm */
static int tolua_set_TForm_TransparentColorValue(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TransparentColorValue'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->TransparentColorValue = ((TColor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DefaultMonitor of class  TForm */
static int tolua_get_TForm_DefaultMonitor(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DefaultMonitor'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DefaultMonitor);
 return 1;
}

/* set function: DefaultMonitor of class  TForm */
static int tolua_set_TForm_DefaultMonitor(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DefaultMonitor'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DefaultMonitor = ((TDefaultMonitor) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragKind of class  TForm */
static int tolua_get_TForm_DragKind(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragKind);
 return 1;
}

/* set function: DragKind of class  TForm */
static int tolua_set_TForm_DragKind(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragKind'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragKind = ((TDragKind) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: DragMode of class  TForm */
static int tolua_get_TForm_DragMode(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->DragMode);
 return 1;
}

/* set function: DragMode of class  TForm */
static int tolua_set_TForm_DragMode(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DragMode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DragMode = ((TDragMode) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: Font of class  TForm */
static int tolua_get_TForm_Font_ptr(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Font'",NULL);
#endif

/* getting type */
  char* lua_type = "TFont";
   tolua_pushusertype(tolua_S,(void*)(self->Font),lua_type);
 return 1;
}

/* set function: Font of class  TForm */
static int tolua_set_TForm_Font_ptr(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Font'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TFont",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Font = ((TFont*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: PopupMenu of class  TForm */
static int tolua_get_TForm_PopupMenu_ptr(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PopupMenu'",NULL);
#endif

/* getting type */
  char* lua_type = "TPopupMenu";
   tolua_pushusertype(tolua_S,(void*)(self->PopupMenu),lua_type);
 return 1;
}

/* set function: PopupMenu of class  TForm */
static int tolua_set_TForm_PopupMenu_ptr(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PopupMenu'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TPopupMenu",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->PopupMenu = ((TPopupMenu*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: FormStyle of class  TForm */
static int tolua_get_TForm_FormStyle(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FormStyle'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->FormStyle);
 return 1;
}

/* set function: FormStyle of class  TForm */
static int tolua_set_TForm_FormStyle(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FormStyle'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->FormStyle = ((TFormStyle) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: HorzScrollBar of class  TForm */
static int tolua_get_TForm_HorzScrollBar_ptr(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HorzScrollBar'",NULL);
#endif

/* getting type */
  char* lua_type = "TControlScrollBar";
   tolua_pushusertype(tolua_S,(void*)(self->HorzScrollBar),lua_type);
 return 1;
}

/* set function: HorzScrollBar of class  TForm */
static int tolua_set_TForm_HorzScrollBar_ptr(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HorzScrollBar'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TControlScrollBar",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->HorzScrollBar = ((TControlScrollBar*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: Icon of class  TForm */
static int tolua_get_TForm_Icon_ptr(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Icon'",NULL);
#endif

/* getting type */
  char* lua_type = "TIcon";
   tolua_pushusertype(tolua_S,(void*)(self->Icon),lua_type);
 return 1;
}

/* set function: Icon of class  TForm */
static int tolua_set_TForm_Icon_ptr(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Icon'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TIcon",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Icon = ((TIcon*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: Menu of class  TForm */
static int tolua_get_TForm_Menu_ptr(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Menu'",NULL);
#endif

/* getting type */
  char* lua_type = "TMainMenu";
   tolua_pushusertype(tolua_S,(void*)(self->Menu),lua_type);
 return 1;
}

/* set function: Menu of class  TForm */
static int tolua_set_TForm_Menu_ptr(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Menu'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TMainMenu",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Menu = ((TMainMenu*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: ObjectMenuItem of class  TForm */
static int tolua_get_TForm_ObjectMenuItem_ptr(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ObjectMenuItem'",NULL);
#endif

/* getting type */
  char* lua_type = "TMenuItem";
   tolua_pushusertype(tolua_S,(void*)(self->ObjectMenuItem),lua_type);
 return 1;
}

/* set function: ObjectMenuItem of class  TForm */
static int tolua_set_TForm_ObjectMenuItem_ptr(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ObjectMenuItem'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TMenuItem",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ObjectMenuItem = ((TMenuItem*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: HelpFile of class  TForm */
static int tolua_get_TForm_HelpFile(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HelpFile'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->HelpFile);
 return 1;
}

/* set function: HelpFile of class  TForm */
static int tolua_set_TForm_HelpFile(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HelpFile'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->HelpFile = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

/* get function: ModalResult of class  TForm */
static int tolua_get_TForm_ModalResult(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ModalResult'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ModalResult);
 return 1;
}

/* set function: ModalResult of class  TForm */
static int tolua_set_TForm_ModalResult(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ModalResult'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ModalResult = ((  int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: WindowState of class  TForm */
static int tolua_get_TForm_WindowState(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'WindowState'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->WindowState);
 return 1;
}

/* set function: WindowState of class  TForm */
static int tolua_set_TForm_WindowState(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'WindowState'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->WindowState = ((TWindowState) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: ActiveControl of class  TForm */
static int tolua_get_TForm_ActiveControl_ptr(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ActiveControl'",NULL);
#endif

/* getting type */
  char* lua_type = "TWinControl";
   tolua_pushusertype(tolua_S,(void*)(self->ActiveControl),lua_type);
 return 1;
}

/* set function: ActiveControl of class  TForm */
static int tolua_set_TForm_ActiveControl_ptr(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ActiveControl'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TWinControl",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ActiveControl = ((TWinControl*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: ActiveOleControl of class  TForm */
static int tolua_get_TForm_ActiveOleControl_ptr(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ActiveOleControl'",NULL);
#endif

/* getting type */
  char* lua_type = "TWinControl";
   tolua_pushusertype(tolua_S,(void*)(self->ActiveOleControl),lua_type);
 return 1;
}

/* set function: ActiveOleControl of class  TForm */
static int tolua_set_TForm_ActiveOleControl_ptr(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ActiveOleControl'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TWinControl",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ActiveOleControl = ((TWinControl*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: Position of class  TForm */
static int tolua_get_TForm_Position(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Position'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Position);
 return 1;
}

/* set function: Position of class  TForm */
static int tolua_set_TForm_Position(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Position'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Position = ((TPosition) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: PrintScale of class  TForm */
static int tolua_get_TForm_PrintScale(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PrintScale'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->PrintScale);
 return 1;
}

/* set function: PrintScale of class  TForm */
static int tolua_set_TForm_PrintScale(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PrintScale'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->PrintScale = ((TPrintScale) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: VertScrollBar of class  TForm */
static int tolua_get_TForm_VertScrollBar_ptr(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'VertScrollBar'",NULL);
#endif

/* getting type */
  char* lua_type = "TControlScrollBar";
   tolua_pushusertype(tolua_S,(void*)(self->VertScrollBar),lua_type);
 return 1;
}

/* set function: VertScrollBar of class  TForm */
static int tolua_set_TForm_VertScrollBar_ptr(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'VertScrollBar'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TControlScrollBar",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->VertScrollBar = ((TControlScrollBar*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: ActiveMDIChild of class  TForm */
static int tolua_get_TForm_ActiveMDIChild_ptr(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ActiveMDIChild'",NULL);
#endif

/* getting type */
  char* lua_type = "TForm";
   tolua_pushusertype(tolua_S,(void*)(self->ActiveMDIChild),lua_type);
 return 1;
}

/* get function: MDIChildCount of class  TForm */
static int tolua_get_TForm_MDIChildCount(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MDIChildCount'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->MDIChildCount);
 return 1;
}

/* get function: MDIChildren of class  TForm */
static int tolua_get_z_VCL_TForm_MDIChildren(lua_State* tolua_S)
{
 int tolua_index;
  TForm* self;
 lua_pushstring(tolua_S,".self");
 lua_rawget(tolua_S,1);
 self = (TForm*)  lua_touserdata(tolua_S,-1);
 tolua_index = (int)tolua_tonumber(tolua_S,2,0);

/* getting type */
  char* lua_type = "TForm";
   tolua_pushusertype(tolua_S,(void*)(self->MDIChildren[tolua_index]),lua_type);
 return 1;
}

/* get function: FormState of class  TForm */
static int tolua_get_TForm_FormState(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FormState'",NULL);
#endif

/* getting type */
  char* lua_type = "Set<Forms__6, fsCreating, fsActivated>";
   tolua_pushusertype(tolua_S,(void*)(&(self->FormState)),lua_type);
 return 1;
}

/* get function: Monitor of class  TForm */
static int tolua_get_TForm_Monitor_ptr(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Monitor'",NULL);
#endif

/* getting type */
  char* lua_type = "TMonitor";
   tolua_pushusertype(tolua_S,(void*)(self->Monitor),lua_type);
 return 1;
}

/* get function: Active of class  TForm */
static int tolua_get_TForm_Active(lua_State* tolua_S)
{
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Active'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Active);
 return 1;
}

/* method: new of class  TForm */
static int tolua_z_VCL_TForm_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TForm* tolua_ret = (TForm*)  new TForm(AOwner);

/* getting type */
  char* lua_type = "TForm";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TForm */
static int tolua_z_VCL_TForm_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TForm* tolua_ret = (TForm*)  new TForm(AOwner);

/* getting type */
  char* lua_type = "TForm";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TForm */
static int tolua_z_VCL_TForm_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  int Dummy = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   TForm* tolua_ret = (TForm*)  new TForm(AOwner,Dummy);

/* getting type */
  char* lua_type = "TForm";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_TForm_new00(tolua_S);
}

/* method: new_local of class  TForm */
static int tolua_z_VCL_TForm_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  int Dummy = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   TForm* tolua_ret = (TForm*)  new TForm(AOwner,Dummy);

/* getting type */
  char* lua_type = "TForm";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
tolua_lerror:
 return tolua_z_VCL_TForm_new00_local(tolua_S);
}

/* method: delete of class  TForm */
static int tolua_z_VCL_TForm_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: ArrangeIcons of class  TForm */
static int tolua_z_VCL_TForm_ArrangeIcons00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ArrangeIcons'",NULL);
#endif
  {
   self->ArrangeIcons();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ArrangeIcons'.",&tolua_err);
 return 0;
#endif
}

/* method: Cascade of class  TForm */
static int tolua_z_VCL_TForm_Cascade00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Cascade'",NULL);
#endif
  {
   self->Cascade();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Cascade'.",&tolua_err);
 return 0;
#endif
}

/* method: Next of class  TForm */
static int tolua_z_VCL_TForm_Next00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Next'",NULL);
#endif
  {
   self->Next();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Next'.",&tolua_err);
 return 0;
#endif
}

/* method: Previous of class  TForm */
static int tolua_z_VCL_TForm_Previous00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Previous'",NULL);
#endif
  {
   self->Previous();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Previous'.",&tolua_err);
 return 0;
#endif
}

/* method: Tile of class  TForm */
static int tolua_z_VCL_TForm_Tile00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Tile'",NULL);
#endif
  {
   self->Tile();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Tile'.",&tolua_err);
 return 0;
#endif
}

/* method: AfterConstruction of class  TForm */
static int tolua_z_VCL_TForm_AfterConstruction00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AfterConstruction'",NULL);
#endif
  {
   self->AfterConstruction();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AfterConstruction'.",&tolua_err);
 return 0;
#endif
}

/* method: BeforeDestruction of class  TForm */
static int tolua_z_VCL_TForm_BeforeDestruction00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'BeforeDestruction'",NULL);
#endif
  {
   self->BeforeDestruction();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'BeforeDestruction'.",&tolua_err);
 return 0;
#endif
}

/* method: Close of class  TForm */
static int tolua_z_VCL_TForm_Close00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Close'",NULL);
#endif
  {
   self->Close();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Close'.",&tolua_err);
 return 0;
#endif
}

/* method: CloseQuery of class  TForm */
static int tolua_z_VCL_TForm_CloseQuery00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'CloseQuery'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->CloseQuery();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CloseQuery'.",&tolua_err);
 return 0;
#endif
}

/* method: DefaultHandler of class  TForm */
static int tolua_z_VCL_TForm_DefaultHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isuserdata(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  void* Message = ((void*)  tolua_touserdata(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DefaultHandler'",NULL);
#endif
  {
   self->DefaultHandler(Message);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DefaultHandler'.",&tolua_err);
 return 0;
#endif
}

/* method: DefocusControl of class  TForm */
static int tolua_z_VCL_TForm_DefocusControl00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TWinControl",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TWinControl* Control = ((TWinControl*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  bool Removing = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DefocusControl'",NULL);
#endif
  {
   self->DefocusControl(Control,Removing);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DefocusControl'.",&tolua_err);
 return 0;
#endif
}

/* method: Dock of class  TForm */
static int tolua_z_VCL_TForm_Dock00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TWinControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"const TRect",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TWinControl* NewDockSite = ((TWinControl*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  const TRect* ARect = ((const TRect*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Dock'",NULL);
#endif
  {
   self->Dock(NewDockSite,*ARect);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Dock'.",&tolua_err);
 return 0;
#endif
}

/* method: FocusControl of class  TForm */
static int tolua_z_VCL_TForm_FocusControl00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TWinControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TWinControl* Control = ((TWinControl*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'FocusControl'",NULL);
#endif
  {
   self->FocusControl(Control);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'FocusControl'.",&tolua_err);
 return 0;
#endif
}

/* method: GetFormImage of class  TForm */
static int tolua_z_VCL_TForm_GetFormImage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetFormImage'",NULL);
#endif
  {
   Graphics::TBitmap* tolua_ret = (Graphics::TBitmap*)  self->GetFormImage();

/* getting type */
  char* lua_type = "Graphics::TBitmap";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFormImage'.",&tolua_err);
 return 0;
#endif
}

/* method: Hide of class  TForm */
static int tolua_z_VCL_TForm_Hide00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Hide'",NULL);
#endif
  {
   self->Hide();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Hide'.",&tolua_err);
 return 0;
#endif
}

/* method: IsShortCut of class  TForm */
static int tolua_z_VCL_TForm_IsShortCut00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TWMKey",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TWMKey* Message = ((TWMKey*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsShortCut'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->IsShortCut(*Message);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsShortCut'.",&tolua_err);
 return 0;
#endif
}

/* method: MakeFullyVisible of class  TForm */
static int tolua_z_VCL_TForm_MakeFullyVisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TMonitor",1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TMonitor* AMonitor = ((TMonitor*)  tolua_tousertype(tolua_S,2,(TMonitor*)(0x0)));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'MakeFullyVisible'",NULL);
#endif
  {
   self->MakeFullyVisible(AMonitor);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'MakeFullyVisible'.",&tolua_err);
 return 0;
#endif
}

/* method: MouseWheelHandler of class  TForm */
static int tolua_z_VCL_TForm_MouseWheelHandler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TMessage",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TMessage* Message = ((TMessage*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'MouseWheelHandler'",NULL);
#endif
  {
   self->MouseWheelHandler(*Message);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'MouseWheelHandler'.",&tolua_err);
 return 0;
#endif
}

/* method: Print of class  TForm */
static int tolua_z_VCL_TForm_Print00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Print'",NULL);
#endif
  {
   self->Print();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Print'.",&tolua_err);
 return 0;
#endif
}

/* method: Release of class  TForm */
static int tolua_z_VCL_TForm_Release00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Release'",NULL);
#endif
  {
   self->Release();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Release'.",&tolua_err);
 return 0;
#endif
}

/* method: SendCancelMode of class  TForm */
static int tolua_z_VCL_TForm_SendCancelMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TControl* Sender = ((TControl*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SendCancelMode'",NULL);
#endif
  {
   self->SendCancelMode(Sender);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SendCancelMode'.",&tolua_err);
 return 0;
#endif
}

/* method: SetFocus of class  TForm */
static int tolua_z_VCL_TForm_SetFocus00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetFocus'",NULL);
#endif
  {
   self->SetFocus();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetFocus'.",&tolua_err);
 return 0;
#endif
}

/* method: SetFocusedControl of class  TForm */
static int tolua_z_VCL_TForm_SetFocusedControl00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TWinControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TWinControl* Control = ((TWinControl*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetFocusedControl'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->SetFocusedControl(Control);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetFocusedControl'.",&tolua_err);
 return 0;
#endif
}

/* method: Show of class  TForm */
static int tolua_z_VCL_TForm_Show00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Show'",NULL);
#endif
  {
   self->Show();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Show'.",&tolua_err);
 return 0;
#endif
}

/* method: ShowModal of class  TForm */
static int tolua_z_VCL_TForm_ShowModal00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ShowModal'",NULL);
#endif
  {
   int tolua_ret = (int)  self->ShowModal();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ShowModal'.",&tolua_err);
 return 0;
#endif
}

/* method: WantChildKey of class  TForm */
static int tolua_z_VCL_TForm_WantChildKey00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TForm",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"TMessage",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TForm* self = (TForm*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  TControl* Child = ((TControl*)  tolua_tousertype(tolua_S,2,0));
/*declare*/
  TMessage* Message = ((TMessage*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WantChildKey'",NULL);
#endif
  {
   bool tolua_ret = (bool)  self->WantChildKey(Child,*Message);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WantChildKey'.",&tolua_err);
 return 0;
#endif
}

/* method: new of class  TCustomTabControl */
static int tolua_z_VCL_TCustomTabControl_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TCustomTabControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TCustomTabControl* tolua_ret = (TCustomTabControl*)  new TCustomTabControl(AOwner);

/* getting type */
  char* lua_type = "TCustomTabControl";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TCustomTabControl */
static int tolua_z_VCL_TCustomTabControl_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TCustomTabControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TCustomTabControl* tolua_ret = (TCustomTabControl*)  new TCustomTabControl(AOwner);

/* getting type */
  char* lua_type = "TCustomTabControl";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TCustomTabControl */
static int tolua_z_VCL_TCustomTabControl_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomTabControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomTabControl* self = (TCustomTabControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* method: IndexOfTabAt of class  TCustomTabControl */
static int tolua_z_VCL_TCustomTabControl_IndexOfTabAt00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomTabControl",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomTabControl* self = (TCustomTabControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int X = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int Y = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IndexOfTabAt'",NULL);
#endif
  {
   int tolua_ret = (int)  self->IndexOfTabAt(X,Y);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IndexOfTabAt'.",&tolua_err);
 return 0;
#endif
}

/* method: GetHitTestInfoAt of class  TCustomTabControl */
static int tolua_z_VCL_TCustomTabControl_GetHitTestInfoAt00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomTabControl",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomTabControl* self = (TCustomTabControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int X = ((int)  tolua_tonumber(tolua_S,2,0));
/*declare*/
  int Y = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetHitTestInfoAt'",NULL);
#endif
  {
    Set <THitTest, htAbove, htToRight> tolua_ret = (  Set <THitTest, htAbove, htToRight>)  self->GetHitTestInfoAt(X,Y);
   {
#ifdef __cplusplus
    void* tolua_obj = new Set <THitTest, htAbove, htToRight>(tolua_ret);

/* getting type */
  char* lua_type = "Set <THitTest, htAbove, htToRight>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Set <THitTest, htAbove, htToRight>));

/* getting type */
  char* lua_type = "Set <THitTest, htAbove, htToRight>";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetHitTestInfoAt'.",&tolua_err);
 return 0;
#endif
}

/* method: TabRect of class  TCustomTabControl */
static int tolua_z_VCL_TCustomTabControl_TabRect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomTabControl",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomTabControl* self = (TCustomTabControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'TabRect'",NULL);
#endif
  {
   TRect tolua_ret = (TRect)  self->TabRect(Index);
   {
#ifdef __cplusplus
    void* tolua_obj = new TRect(tolua_ret);

/* getting type */
  char* lua_type = "TRect";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(TRect));

/* getting type */
  char* lua_type = "TRect";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_obj),lua_type);
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'TabRect'.",&tolua_err);
 return 0;
#endif
}

/* method: RowCount of class  TCustomTabControl */
static int tolua_z_VCL_TCustomTabControl_RowCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomTabControl",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomTabControl* self = (TCustomTabControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RowCount'",NULL);
#endif
  {
   int tolua_ret = (int)  self->RowCount();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RowCount'.",&tolua_err);
 return 0;
#endif
}

/* method: ScrollTabs of class  TCustomTabControl */
static int tolua_z_VCL_TCustomTabControl_ScrollTabs00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TCustomTabControl",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TCustomTabControl* self = (TCustomTabControl*)  tolua_tousertype(tolua_S,1,0);
/*declare*/
  int Delta = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ScrollTabs'",NULL);
#endif
  {
   self->ScrollTabs(Delta);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ScrollTabs'.",&tolua_err);
 return 0;
#endif
}

/* get function: Canvas of class  TCustomTabControl */
static int tolua_get_TCustomTabControl_Canvas_ptr(lua_State* tolua_S)
{
  TCustomTabControl* self = (TCustomTabControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Canvas'",NULL);
#endif

/* getting type */
  char* lua_type = "TCanvas";
   tolua_pushusertype(tolua_S,(void*)(self->Canvas),lua_type);
 return 1;
}

////////////////////////////////////////////////////////////

/* get function: Caption of class  TTabSheet */
static int tolua_get_TTabSheet_Caption(lua_State* tolua_S)
{
	TTabSheet* self = (TTabSheet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Caption'",NULL);
#endif
  tolua_pushansi(tolua_S,(const AnsiString&)self->Caption);
 return 1;
}

/* set function: Caption of class  TTabSheet */
static int tolua_set_TTabSheet_Caption(lua_State* tolua_S)
{
	TTabSheet* self = (TTabSheet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Caption'",NULL);
  if (!tolua_isansi(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Caption = ((AnsiString)  tolua_toansi(tolua_S,2,0));
 return 0;
}

////////////////////////////////////////////////////////////


/* get function: Highlighted of class  TTabSheet */
static int tolua_get_TTabSheet_Highlighted(lua_State* tolua_S)
{
  TTabSheet* self = (TTabSheet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Highlighted'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Highlighted);
 return 1;
}

/* set function: Highlighted of class  TTabSheet */
static int tolua_set_TTabSheet_Highlighted(lua_State* tolua_S)
{
  TTabSheet* self = (TTabSheet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Highlighted'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Highlighted = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: ImageIndex of class  TTabSheet */
static int tolua_get_TTabSheet_ImageIndex(lua_State* tolua_S)
{
  TTabSheet* self = (TTabSheet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ImageIndex'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->ImageIndex);
 return 1;
}

/* set function: ImageIndex of class  TTabSheet */
static int tolua_set_TTabSheet_ImageIndex(lua_State* tolua_S)
{
  TTabSheet* self = (TTabSheet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ImageIndex'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->ImageIndex = ((  int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: PageIndex of class  TTabSheet */
static int tolua_get_TTabSheet_PageIndex(lua_State* tolua_S)
{
  TTabSheet* self = (TTabSheet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PageIndex'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->PageIndex);
 return 1;
}

/* set function: PageIndex of class  TTabSheet */
static int tolua_set_TTabSheet_PageIndex(lua_State* tolua_S)
{
  TTabSheet* self = (TTabSheet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PageIndex'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->PageIndex = ((int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: TabVisible of class  TTabSheet */
static int tolua_get_TTabSheet_TabVisible(lua_State* tolua_S)
{
  TTabSheet* self = (TTabSheet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TabVisible'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->TabVisible);
 return 1;
}

/* set function: TabVisible of class  TTabSheet */
static int tolua_set_TTabSheet_TabVisible(lua_State* tolua_S)
{
  TTabSheet* self = (TTabSheet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TabVisible'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->TabVisible = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* method: new of class  TTabSheet */
static int tolua_z_VCL_TTabSheet_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TTabSheet",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TTabSheet* tolua_ret = (TTabSheet*)  new TTabSheet(AOwner);

/* getting type */
  char* lua_type = "TTabSheet";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TTabSheet */
static int tolua_z_VCL_TTabSheet_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TTabSheet",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TTabSheet* tolua_ret = (TTabSheet*)  new TTabSheet(AOwner);

/* getting type */
  char* lua_type = "TTabSheet";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TTabSheet */
static int tolua_z_VCL_TTabSheet_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TTabSheet",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TTabSheet* self = (TTabSheet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
  delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}

/* get function: PageControl of class  TTabSheet */
static int tolua_get_TTabSheet_PageControl_ptr(lua_State* tolua_S)
{
  TTabSheet* self = (TTabSheet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PageControl'",NULL);
#endif

/* getting type */
  char* lua_type = "TPageControl";
   tolua_pushusertype(tolua_S,(void*)(self->PageControl),lua_type);
 return 1;
}

/* set function: PageControl of class  TTabSheet */
static int tolua_set_TTabSheet_PageControl_ptr(lua_State* tolua_S)
{
  TTabSheet* self = (TTabSheet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'PageControl'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TPageControl",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->PageControl = ((TPageControl*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: TabIndex of class  TTabSheet */
static int tolua_get_TTabSheet_TabIndex(lua_State* tolua_S)
{
  TTabSheet* self = (TTabSheet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'TabIndex'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->TabIndex);
 return 1;
}

/* method: new of class  TPageControl */
static int tolua_z_VCL_TPageControl_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TPageControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TPageControl* tolua_ret = (TPageControl*)  new TPageControl(AOwner);

/* getting type */
  char* lua_type = "TPageControl";
   tolua_pushusertype(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TPageControl */
static int tolua_z_VCL_TPageControl_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TPageControl",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
/*declare*/
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TPageControl* tolua_ret = (TPageControl*)  new TPageControl(AOwner);

/* getting type */
  char* lua_type = "TPageControl";
   tolua_pushusertype_and_takeownership(tolua_S,(void*)(tolua_ret),lua_type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* get function: Pages of class  TPageControl */
static int tolua_get_z_VCL_TPageControl_Pages(lua_State* tolua_S)
{
 int tolua_index;
  TPageControl* self;
 lua_pushstring(tolua_S,".self");
 lua_rawget(tolua_S,1);
 self = (TPageControl*)  lua_touserdata(tolua_S,-1);
 tolua_index = (int)tolua_tonumber(tolua_S,2,0);

/* getting type */
  char* lua_type = "TTabSheet";
   tolua_pushusertype(tolua_S,(void*)(self->Pages[tolua_index]),lua_type);
 return 1;
}






////////////////////////////////////////////////////////
/* get function: Alignment of class  TLabel */
static int tolua_get_TLabel_Alignment(lua_State* tolua_S)
{
	TLabel* self = (TLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
	if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Alignment'",NULL);
#endif
	tolua_pushnumber(tolua_S,(lua_Number)self->Alignment);
 return 1;
}

/* set function: Alignment of class  TLabel */
static int tolua_set_TLabel_Alignment(lua_State* tolua_S)
{
	TLabel* self = (TLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
	tolua_Error tolua_err;
	if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Alignment'",NULL);
	if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
	 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
	self->Alignment = ((TAlignment) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: AutoSize of class  TLabel */
static int tolua_get_TLabel_AutoSize(lua_State* tolua_S)
{
	TLabel* self = (TLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
	if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoSize'",NULL);
#endif
	tolua_pushboolean(tolua_S,(bool)self->AutoSize);
 return 1;
}

/* set function: AutoSize of class  TLabel */
static int tolua_set_TLabel_AutoSize(lua_State* tolua_S)
{
  TLabel* self = (TLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
	tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AutoSize'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
	self->AutoSize = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: FocusControl of class  TLabel */
static int tolua_get_TLabel_FocusControl_ptr(lua_State* tolua_S)
{
  TLabel* self = (TLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FocusControl'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->FocusControl,"TWinControl");
 return 1;
}

/* set function: FocusControl of class  TLabel */
static int tolua_set_TLabel_FocusControl_ptr(lua_State* tolua_S)
{
  TLabel* self = (TLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
	tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'FocusControl'",NULL);
  if (!tolua_isusertype(tolua_S,2,"TWinControl",0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
	self->FocusControl = ((TWinControl*)  tolua_tousertype(tolua_S,2,0));
 return 0;
}

/* get function: ShowAccelChar of class  TLabel */
static int tolua_get_TLabel_ShowAccelChar(lua_State* tolua_S)
{
  TLabel* self = (TLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ShowAccelChar'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->ShowAccelChar);
 return 1;
}

/* set function: ShowAccelChar of class  TLabel */
static int tolua_set_TLabel_ShowAccelChar(lua_State* tolua_S)
{
  TLabel* self = (TLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
	tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ShowAccelChar'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
	self->ShowAccelChar = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Transparent of class  TLabel */
static int tolua_get_TLabel_Transparent(lua_State* tolua_S)
{
  TLabel* self = (TLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Transparent'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->Transparent);
 return 1;
}

/* set function: Transparent of class  TLabel */
static int tolua_set_TLabel_Transparent(lua_State* tolua_S)
{
  TLabel* self = (TLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
	tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Transparent'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
	self->Transparent = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Layout of class  TLabel */
static int tolua_get_TLabel_Layout(lua_State* tolua_S)
{
  TLabel* self = (TLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Layout'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Layout);
 return 1;
}

/* set function: Layout of class  TLabel */
static int tolua_set_TLabel_Layout(lua_State* tolua_S)
{
  TLabel* self = (TLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
	tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Layout'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
	self->Layout = ((TTextLayout) (int)  tolua_tonumber(tolua_S,2,0));
 return 0;
}

/* get function: WordWrap of class  TLabel */
static int tolua_get_TLabel_WordWrap(lua_State* tolua_S)
{
  TLabel* self = (TLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'WordWrap'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->WordWrap);
 return 1;
}

/* set function: WordWrap of class  TLabel */
static int tolua_set_TLabel_WordWrap(lua_State* tolua_S)
{
  TLabel* self = (TLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
	tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'WordWrap'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
	self->WordWrap = ((bool)  tolua_toboolean(tolua_S,2,0));
 return 0;
}

/* get function: Caption of class  TLabel */
static int tolua_get_TLabel_Caption(lua_State* tolua_S)
{
  TLabel* self = (TLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Caption'",NULL);
#endif
  tolua_pushstring(tolua_S,(char*)self->Caption.c_str());
 return 1;
}

/* set function: Caption of class  TLabel */
static int tolua_set_TLabel_Caption(lua_State* tolua_S)
{
  TLabel* self = (TLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
	tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Caption'",NULL);
  if (!tolua_isstring(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
	self->Caption = AnsiString( tolua_tostring(tolua_S,2,0) );
 return 0;
}

/* method: new of class  TLabel */
static int tolua_z_Label_TLabel_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
		 !tolua_isusertable(tolua_S,1,"TLabel",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
	 TLabel* tolua_ret = (TLabel*)  new TLabel(AOwner);
   tolua_pushusertype(tolua_S,(void*)tolua_ret,"TLabel");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: new_local of class  TLabel */
static int tolua_z_Label_TLabel_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"TLabel",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"TComponent",0,&tolua_err) ||
		 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  TComponent* AOwner = ((TComponent*)  tolua_tousertype(tolua_S,2,0));
  {
   TLabel* tolua_ret = (TLabel*)  new TLabel(AOwner);
   tolua_pushusertype_and_takeownership(tolua_S,(void *)tolua_ret,"TLabel");
	}
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}

/* method: delete of class  TLabel */
static int tolua_z_Label_TLabel_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"TLabel",0,&tolua_err) ||
		 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
	goto tolua_lerror;
 else
#endif
 {
	TLabel* self = (TLabel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
	if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'",NULL);
#endif
	delete self;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
//////////////////////////////////////////////////////////////
















/* Open function */
TOLUA_API int tolua_z_VCL_open (lua_State* tolua_S)
{
 tolua_open(tolua_S);
 tolua_reg_types(tolua_S);
 tolua_module(tolua_S,NULL,0);
 tolua_beginmodule(tolua_S,NULL);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TMyDialog","TMyDialog","TMyObject",tolua_collect_TMyDialog);
#else
 tolua_cclass(tolua_S,"TMyDialog","TMyDialog","TMyObject",NULL);
#endif
 tolua_beginmodule(tolua_S,"TMyDialog");
 tolua_function(tolua_S,"new",tolua_z_VCL_TMyDialog_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TMyDialog_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TMyDialog_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TMyDialog_delete00);
 tolua_function(tolua_S,"CreateForm",tolua_z_VCL_TMyDialog_CreateForm00);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"VCLConst",1);
 tolua_beginmodule(tolua_S,"VCLConst");

	////////////////
 tolua_constant(tolua_S,"tlTop",tlTop);
 tolua_constant(tolua_S,"tlCenter",tlCenter);
 tolua_constant(tolua_S,"tlBottom",tlBottom);

 tolua_constant(tolua_S,"mrNone",mrNone);
 tolua_constant(tolua_S,"mrOk",mrOk);
 tolua_constant(tolua_S,"mrCancel",mrCancel);
 tolua_constant(tolua_S,"mrAbort",mrAbort);
 tolua_constant(tolua_S,"mrRetry",mrRetry);
 tolua_constant(tolua_S,"mrIgnore",mrIgnore);
 tolua_constant(tolua_S,"mrYes",mrYes);
 tolua_constant(tolua_S,"mrNo",mrNo);
 tolua_constant(tolua_S,"mrAll",mrAll);
 tolua_constant(tolua_S,"mrNoToAll",mrNoToAll);
 tolua_constant(tolua_S,"mrYesToAll",mrYesToAll);
	////////////////
	
 tolua_constant(tolua_S,"ssShift",ssShift);
 tolua_constant(tolua_S,"ssAlt",ssAlt);
 tolua_constant(tolua_S,"ssCtrl",ssCtrl);
 tolua_constant(tolua_S,"ssLeft",ssLeft);
 tolua_constant(tolua_S,"ssRight",ssRight);
 tolua_constant(tolua_S,"ssMiddle",ssMiddle);
 tolua_constant(tolua_S,"ssDouble",ssDouble);
 tolua_constant(tolua_S,"maLeftToRight",maLeftToRight);
 tolua_constant(tolua_S,"maRightToLeft",maRightToLeft);
 tolua_constant(tolua_S,"maTopToBottom",maTopToBottom);
 tolua_constant(tolua_S,"maBottomToTop",maBottomToTop);
 tolua_constant(tolua_S,"maNone",maNone);
 tolua_constant(tolua_S,"biSystemMenu",biSystemMenu);
 tolua_constant(tolua_S,"biMinimize",biMinimize);
 tolua_constant(tolua_S,"biMaximize",biMaximize);
 tolua_constant(tolua_S,"biHelp",biHelp);
 tolua_constant(tolua_S,"csLoading",csLoading);
 tolua_constant(tolua_S,"csReading",csReading);
 tolua_constant(tolua_S,"csWriting",csWriting);
 tolua_constant(tolua_S,"csDestroying",csDestroying);
 tolua_constant(tolua_S,"csDesigning",csDesigning);
 tolua_constant(tolua_S,"csAncestor",csAncestor);
 tolua_constant(tolua_S,"csUpdating",csUpdating);
 tolua_constant(tolua_S,"csFixups",csFixups);
 tolua_constant(tolua_S,"csFreeNotification",csFreeNotification);
 tolua_constant(tolua_S,"csInline",csInline);
 tolua_constant(tolua_S,"csDesignInstance",csDesignInstance);
 tolua_constant(tolua_S,"csInheritable",csInheritable);
 tolua_constant(tolua_S,"csCheckPropAvail",csCheckPropAvail);
 tolua_constant(tolua_S,"csSubComponent",csSubComponent);
 tolua_constant(tolua_S,"csTransient",csTransient);
 tolua_constant(tolua_S,"fsCreating",fsCreating);
 tolua_constant(tolua_S,"fsVisible",fsVisible);
 tolua_constant(tolua_S,"fsShowing",fsShowing);
 tolua_constant(tolua_S,"fsModal",fsModal);
 tolua_constant(tolua_S,"fsCreatedMDIChild",fsCreatedMDIChild);
 tolua_constant(tolua_S,"fsActivated",fsActivated);
 tolua_constant(tolua_S,"csLButtonDown",csLButtonDown);
 tolua_constant(tolua_S,"csClicked",csClicked);
 tolua_constant(tolua_S,"csPalette",csPalette);
 tolua_constant(tolua_S,"csReadingState",csReadingState);
 tolua_constant(tolua_S,"csAlignmentNeeded",csAlignmentNeeded);
 tolua_constant(tolua_S,"csFocusing",csFocusing);
 tolua_constant(tolua_S,"csCreating",csCreating);
 tolua_constant(tolua_S,"csPaintCopy",csPaintCopy);
 tolua_constant(tolua_S,"csCustomPaint",csCustomPaint);
 tolua_constant(tolua_S,"csDestroyingHandle",csDestroyingHandle);
 tolua_constant(tolua_S,"csDocking",csDocking);
 tolua_constant(tolua_S,"akLeft",akLeft);
 tolua_constant(tolua_S,"akTop",akTop);
 tolua_constant(tolua_S,"akRight",akRight);
 tolua_constant(tolua_S,"akBottom",akBottom);
 tolua_constant(tolua_S,"csAcceptsControls",csAcceptsControls);
 tolua_constant(tolua_S,"csCaptureMouse",csCaptureMouse);
 tolua_constant(tolua_S,"csDesignInteractive",csDesignInteractive);
 tolua_constant(tolua_S,"csClickEvents",csClickEvents);
 tolua_constant(tolua_S,"csFramed",csFramed);
 tolua_constant(tolua_S,"csSetCaption",csSetCaption);
 tolua_constant(tolua_S,"csOpaque",csOpaque);
 tolua_constant(tolua_S,"csDoubleClicks",csDoubleClicks);
 tolua_constant(tolua_S,"csFixedWidth",csFixedWidth);
 tolua_constant(tolua_S,"csFixedHeight",csFixedHeight);
 tolua_constant(tolua_S,"csNoDesignVisible",csNoDesignVisible);
 tolua_constant(tolua_S,"csReplicatable",csReplicatable);
 tolua_constant(tolua_S,"csNoStdEvents",csNoStdEvents);
 tolua_constant(tolua_S,"csDisplayDragImage",csDisplayDragImage);
 tolua_constant(tolua_S,"csReflector",csReflector);
 tolua_constant(tolua_S,"csActionClient",csActionClient);
 tolua_constant(tolua_S,"csMenuEvents",csMenuEvents);
 tolua_constant(tolua_S,"fsBold",fsBold);
 tolua_constant(tolua_S,"fsItalic",fsItalic);
 tolua_constant(tolua_S,"fsUnderline",fsUnderline);
 tolua_constant(tolua_S,"fsStrikeOut",fsStrikeOut);
 tolua_constant(tolua_S,"tbRightButton",tbRightButton);
 tolua_constant(tolua_S,"tbLeftButton",tbLeftButton);
 tolua_constant(tolua_S,"paLeft",paLeft);
 tolua_constant(tolua_S,"paRight",paRight);
 tolua_constant(tolua_S,"paCenter",paCenter);
 tolua_constant(tolua_S,"tbHorizontal",tbHorizontal);
 tolua_constant(tolua_S,"tbVertical",tbVertical);
 tolua_constant(tolua_S,"bsNone",bsNone);
 tolua_constant(tolua_S,"bsSingle",bsSingle);
 tolua_constant(tolua_S,"bsSizeable",bsSizeable);
 tolua_constant(tolua_S,"bsDialog",bsDialog);
 tolua_constant(tolua_S,"bsToolWindow",bsToolWindow);
 tolua_constant(tolua_S,"bsSizeToolWin",bsSizeToolWin);
 tolua_constant(tolua_S,"fsNormal",fsNormal);
 tolua_constant(tolua_S,"fsMDIChild",fsMDIChild);
 tolua_constant(tolua_S,"fsMDIForm",fsMDIForm);
 tolua_constant(tolua_S,"fsStayOnTop",fsStayOnTop);
 tolua_constant(tolua_S,"csDropDown",csDropDown);
 tolua_constant(tolua_S,"csSimple",csSimple);
 tolua_constant(tolua_S,"csDropDownList",csDropDownList);
 tolua_constant(tolua_S,"csOwnerDrawFixed",csOwnerDrawFixed);
 tolua_constant(tolua_S,"csOwnerDrawVariable",csOwnerDrawVariable);
 tolua_constant(tolua_S,"wsNormal",wsNormal);
 tolua_constant(tolua_S,"wsMinimized",wsMinimized);
 tolua_constant(tolua_S,"wsMaximized",wsMaximized);
 tolua_constant(tolua_S,"poNone",poNone);
 tolua_constant(tolua_S,"poProportional",poProportional);
 tolua_constant(tolua_S,"poPrintToFit",poPrintToFit);
 tolua_constant(tolua_S,"poDesigned",poDesigned);
 tolua_constant(tolua_S,"poDefault",poDefault);
 tolua_constant(tolua_S,"poDefaultPosOnly",poDefaultPosOnly);
 tolua_constant(tolua_S,"poDefaultSizeOnly",poDefaultSizeOnly);
 tolua_constant(tolua_S,"poScreenCenter",poScreenCenter);
 tolua_constant(tolua_S,"poDesktopCenter",poDesktopCenter);
 tolua_constant(tolua_S,"poMainFormCenter",poMainFormCenter);
 tolua_constant(tolua_S,"poOwnerFormCenter",poOwnerFormCenter);
 tolua_constant(tolua_S,"dmDesktop",dmDesktop);
 tolua_constant(tolua_S,"dmPrimary",dmPrimary);
 tolua_constant(tolua_S,"dmMainForm",dmMainForm);
 tolua_constant(tolua_S,"dmActiveForm",dmActiveForm);
 tolua_constant(tolua_S,"alNone",alNone);
 tolua_constant(tolua_S,"alTop",alTop);
 tolua_constant(tolua_S,"alBottom",alBottom);
 tolua_constant(tolua_S,"alLeft",alLeft);
 tolua_constant(tolua_S,"alRight",alRight);
 tolua_constant(tolua_S,"alClient",alClient);
 tolua_constant(tolua_S,"alCustom",alCustom);
 tolua_constant(tolua_S,"taLeftJustify",taLeftJustify);
 tolua_constant(tolua_S,"taRightJustify",taRightJustify);
 tolua_constant(tolua_S,"taCenter",taCenter);
 tolua_constant(tolua_S,"sbHorizontal",sbHorizontal);
 tolua_constant(tolua_S,"sbVertical",sbVertical);
 tolua_constant(tolua_S,"ssNone",ssNone);
 tolua_constant(tolua_S,"ssHorizontal",ssHorizontal);
 tolua_constant(tolua_S,"ssVertical",ssVertical);
 tolua_constant(tolua_S,"ssBoth",ssBoth);
 tolua_constant(tolua_S,"lbStandard",lbStandard);
 tolua_constant(tolua_S,"lbOwnerDrawFixed",lbOwnerDrawFixed);
 tolua_constant(tolua_S,"lbOwnerDrawVariable",lbOwnerDrawVariable);
 tolua_constant(tolua_S,"lbVirtual",lbVirtual);
 tolua_constant(tolua_S,"lbVirtualOwnerDraw",lbVirtualOwnerDraw);
 tolua_constant(tolua_S,"cbUnchecked",cbUnchecked);
 tolua_constant(tolua_S,"cbChecked",cbChecked);
 tolua_constant(tolua_S,"cbGrayed",cbGrayed);
 tolua_constant(tolua_S,"psSolid",psSolid);
 tolua_constant(tolua_S,"psDash",psDash);
 tolua_constant(tolua_S,"psDot",psDot);
 tolua_constant(tolua_S,"psDashDot",psDashDot);
 tolua_constant(tolua_S,"psDashDotDot",psDashDotDot);
 tolua_constant(tolua_S,"psClear",psClear);
 tolua_constant(tolua_S,"psInsideFrame",psInsideFrame);
 tolua_constant(tolua_S,"pmBlack",pmBlack);
 tolua_constant(tolua_S,"pmWhite",pmWhite);
 tolua_constant(tolua_S,"pmNop",pmNop);
 tolua_constant(tolua_S,"pmNot",pmNot);
 tolua_constant(tolua_S,"pmCopy",pmCopy);
 tolua_constant(tolua_S,"pmNotCopy",pmNotCopy);
 tolua_constant(tolua_S,"pmMergePenNot",pmMergePenNot);
 tolua_constant(tolua_S,"pmMaskPenNot",pmMaskPenNot);
 tolua_constant(tolua_S,"pmMergeNotPen",pmMergeNotPen);
 tolua_constant(tolua_S,"pmMaskNotPen",pmMaskNotPen);
 tolua_constant(tolua_S,"pmMerge",pmMerge);
 tolua_constant(tolua_S,"pmNotMerge",pmNotMerge);
 tolua_constant(tolua_S,"pmMask",pmMask);
 tolua_constant(tolua_S,"pmNotMask",pmNotMask);
 tolua_constant(tolua_S,"pmXor",pmXor);
 tolua_constant(tolua_S,"pmNotXor",pmNotXor);
 tolua_constant(tolua_S,"tmAuto",tmAuto);
 tolua_constant(tolua_S,"tmFixed",tmFixed);
 tolua_constant(tolua_S,"pfDevice",pfDevice);
 tolua_constant(tolua_S,"pf1bit",pf1bit);
 tolua_constant(tolua_S,"pf4bit",pf4bit);
 tolua_constant(tolua_S,"pf8bit",pf8bit);
 tolua_constant(tolua_S,"pf15bit",pf15bit);
 tolua_constant(tolua_S,"pf16bit",pf16bit);
 tolua_constant(tolua_S,"pf24bit",pf24bit);
 tolua_constant(tolua_S,"pf32bit",pf32bit);
 tolua_constant(tolua_S,"pfCustom",pfCustom);
 tolua_constant(tolua_S,"bmDIB",bmDIB);
 tolua_constant(tolua_S,"bmDDB",bmDDB);
 tolua_constant(tolua_S,"crMin",crMin);
 tolua_constant(tolua_S,"crMax",crMax);
 tolua_constant(tolua_S,"htKeyword",htKeyword);
 tolua_constant(tolua_S,"htContext",htContext);
 tolua_constant(tolua_S,"laCopy",laCopy);
 tolua_constant(tolua_S,"laAnd",laAnd);
 tolua_constant(tolua_S,"laOr",laOr);
 tolua_constant(tolua_S,"laXor",laXor);
 tolua_constant(tolua_S,"laSrcUnique",laSrcUnique);
 tolua_constant(tolua_S,"laDestUnique",laDestUnique);
 tolua_constant(tolua_S,"fkCommand",fkCommand);
 tolua_constant(tolua_S,"fkHandle",fkHandle);
 tolua_constant(tolua_S,"fkShortCut",fkShortCut);
 tolua_constant(tolua_S,"soBeginning",soBeginning);
 tolua_constant(tolua_S,"soCurrent",soCurrent);
 tolua_constant(tolua_S,"soEnd",soEnd);
 tolua_constant(tolua_S,"clMin",clMin);
 tolua_constant(tolua_S,"clMax",clMax);
 tolua_constant(tolua_S,"beLeft",beLeft);
 tolua_constant(tolua_S,"beTop",beTop);
 tolua_constant(tolua_S,"beRight",beRight);
 tolua_constant(tolua_S,"beBottom",beBottom);
 tolua_constant(tolua_S,"bvNone",bvNone);
 tolua_constant(tolua_S,"bvLowered",bvLowered);
 tolua_constant(tolua_S,"bvRaised",bvRaised);
 tolua_constant(tolua_S,"bvSpace",bvSpace);
 tolua_constant(tolua_S,"bkNone",bkNone);
 tolua_constant(tolua_S,"bkTile",bkTile);
 tolua_constant(tolua_S,"bkSoft",bkSoft);
 tolua_constant(tolua_S,"bkFlat",bkFlat);
 tolua_constant(tolua_S,"imDisable",imDisable);
 tolua_constant(tolua_S,"imClose",imClose);
 tolua_constant(tolua_S,"imOpen",imOpen);
 tolua_constant(tolua_S,"imDontCare",imDontCare);
 tolua_constant(tolua_S,"imSAlpha",imSAlpha);
 tolua_constant(tolua_S,"imAlpha",imAlpha);
 tolua_constant(tolua_S,"imHira",imHira);
 tolua_constant(tolua_S,"imSKata",imSKata);
 tolua_constant(tolua_S,"imKata",imKata);
 tolua_constant(tolua_S,"imChinese",imChinese);
 tolua_constant(tolua_S,"imSHanguel",imSHanguel);
 tolua_constant(tolua_S,"imHanguel",imHanguel);
 tolua_constant(tolua_S,"doNoOrient",doNoOrient);
 tolua_constant(tolua_S,"doHorizontal",doHorizontal);
 tolua_constant(tolua_S,"doVertical",doVertical);
 tolua_constant(tolua_S,"bdLeftToRight",bdLeftToRight);
 tolua_constant(tolua_S,"bdRightToLeft",bdRightToLeft);
 tolua_constant(tolua_S,"bdRightToLeftNoAlign",bdRightToLeftNoAlign);
 tolua_constant(tolua_S,"bdRightToLeftReadingOnly",bdRightToLeftReadingOnly);
 tolua_constant(tolua_S,"ecNormal",ecNormal);
 tolua_constant(tolua_S,"ecUpperCase",ecUpperCase);
 tolua_constant(tolua_S,"ecLowerCase",ecLowerCase);
 tolua_constant(tolua_S,"lrDefaultColor",lrDefaultColor);
 tolua_constant(tolua_S,"lrDefaultSize",lrDefaultSize);
 tolua_constant(tolua_S,"lrFromFile",lrFromFile);
 tolua_constant(tolua_S,"lrMap3DColors",lrMap3DColors);
 tolua_constant(tolua_S,"lrTransparent",lrTransparent);
 tolua_constant(tolua_S,"lrMonoChrome",lrMonoChrome);
 tolua_constant(tolua_S,"rtBitmap",rtBitmap);
 tolua_constant(tolua_S,"rtCursor",rtCursor);
 tolua_constant(tolua_S,"rtIcon",rtIcon);
 tolua_constant(tolua_S,"itImage",itImage);
 tolua_constant(tolua_S,"itMask",itMask);
 tolua_constant(tolua_S,"dsFocus",dsFocus);
 tolua_constant(tolua_S,"dsSelected",dsSelected);
 tolua_constant(tolua_S,"dsNormal",dsNormal);
 tolua_constant(tolua_S,"dsTransparent",dsTransparent);
 tolua_constant(tolua_S,"maAutomatic",maAutomatic);
 tolua_constant(tolua_S,"maManual",maManual);
 tolua_constant(tolua_S,"maParent",maParent);
 tolua_constant(tolua_S,"mbNone",mbNone);
 tolua_constant(tolua_S,"mbBreak",mbBreak);
 tolua_constant(tolua_S,"mbBarBreak",mbBarBreak);
 tolua_constant(tolua_S,"ssRegular",ssRegular);
 tolua_constant(tolua_S,"ssFlat",ssFlat);
 tolua_constant(tolua_S,"ssHotTrack",ssHotTrack);
 tolua_constant(tolua_S,"bsSolid",bsSolid);
 tolua_constant(tolua_S,"bsClear",bsClear);
 tolua_constant(tolua_S,"bsHorizontal",bsHorizontal);
 tolua_constant(tolua_S,"bsVertical",bsVertical);
 tolua_constant(tolua_S,"bsFDiagonal",bsFDiagonal);
 tolua_constant(tolua_S,"bsBDiagonal",bsBDiagonal);
 tolua_constant(tolua_S,"bsCross",bsCross);
 tolua_constant(tolua_S,"bsDiagCross",bsDiagCross);
 tolua_constant(tolua_S,"fsSurface",fsSurface);
 tolua_constant(tolua_S,"fsBorder",fsBorder);
 tolua_constant(tolua_S,"coLeftToRight",coLeftToRight);
 tolua_constant(tolua_S,"coRightToLeft",coRightToLeft);
 tolua_constant(tolua_S,"fpDefault",fpDefault);
 tolua_constant(tolua_S,"fpVariable",fpVariable);
 tolua_constant(tolua_S,"fpFixed",fpFixed);
 tolua_constant(tolua_S,"ecNormal",ecNormal);
 tolua_constant(tolua_S,"ecUpperCase",ecUpperCase);
 tolua_constant(tolua_S,"ecLowerCase",ecLowerCase);
 tolua_constant(tolua_S,"dkDrag",dkDrag);
 tolua_constant(tolua_S,"dkDock",dkDock);
 tolua_constant(tolua_S,"dmManual",dmManual);
 tolua_constant(tolua_S,"dmAutomatic",dmAutomatic);
 tolua_variable(tolua_S,"CurDialog",tolua_get_VCLConst_CurDialog_ptr,tolua_set_VCLConst_CurDialog_ptr);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"Set_TMenuAnimations_maLeftToRight_maNone_","Set<TMenuAnimations,maLeftToRight,maNone>","",tolua_collect_Set_TMenuAnimations_maLeftToRight_maNone_);
#else
 tolua_cclass(tolua_S,"Set_TMenuAnimations_maLeftToRight_maNone_","Set<TMenuAnimations,maLeftToRight,maNone>","",NULL);
#endif
 tolua_beginmodule(tolua_S,"Set_TMenuAnimations_maLeftToRight_maNone_");
 tolua_function(tolua_S,"new",tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone__new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone__new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone__new00_local);
 tolua_function(tolua_S,"new",tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone__new01);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone__new01_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone__new01_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone__delete00);
 tolua_function(tolua_S,".add",tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone___add00);
 tolua_function(tolua_S,".sub",tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone___sub00);
 tolua_function(tolua_S,".mul",tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone___mul00);
 tolua_function(tolua_S,"Contains",tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone__Contains00);
 tolua_function(tolua_S,"Clear",tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone__Clear00);
 tolua_function(tolua_S,"Empty",tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone__Empty00);
 tolua_function(tolua_S,".eq",tolua_z_VCL_Set_TMenuAnimations_maLeftToRight_maNone___eq00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"Set_TBorderIcon_biSystemMenu_biHelp_","Set<TBorderIcon,biSystemMenu,biHelp>","",tolua_collect_Set_TBorderIcon_biSystemMenu_biHelp_);
#else
 tolua_cclass(tolua_S,"Set_TBorderIcon_biSystemMenu_biHelp_","Set<TBorderIcon,biSystemMenu,biHelp>","",NULL);
#endif
 tolua_beginmodule(tolua_S,"Set_TBorderIcon_biSystemMenu_biHelp_");
 tolua_function(tolua_S,"new",tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp__new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp__new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp__new00_local);
 tolua_function(tolua_S,"new",tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp__new01);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp__new01_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp__new01_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp__delete00);
 tolua_function(tolua_S,".add",tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp___add00);
 tolua_function(tolua_S,".sub",tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp___sub00);
 tolua_function(tolua_S,".mul",tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp___mul00);
 tolua_function(tolua_S,"Contains",tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp__Contains00);
 tolua_function(tolua_S,"Clear",tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp__Clear00);
 tolua_function(tolua_S,"Empty",tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp__Empty00);
 tolua_function(tolua_S,".eq",tolua_z_VCL_Set_TBorderIcon_biSystemMenu_biHelp___eq00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"Set_Classes__74_csLoading_csDesignInstance_","Set<Classes__74,csLoading,csDesignInstance>","",tolua_collect_Set_Classes__74_csLoading_csDesignInstance_);
#else
 tolua_cclass(tolua_S,"Set_Classes__74_csLoading_csDesignInstance_","Set<Classes__74,csLoading,csDesignInstance>","",NULL);
#endif
 tolua_beginmodule(tolua_S,"Set_Classes__74_csLoading_csDesignInstance_");
 tolua_function(tolua_S,"new",tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance__new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance__new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance__new00_local);
 tolua_function(tolua_S,"new",tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance__new01);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance__new01_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance__new01_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance__delete00);
 tolua_function(tolua_S,".add",tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance___add00);
 tolua_function(tolua_S,".sub",tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance___sub00);
 tolua_function(tolua_S,".mul",tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance___mul00);
 tolua_function(tolua_S,"Contains",tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance__Contains00);
 tolua_function(tolua_S,"Clear",tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance__Clear00);
 tolua_function(tolua_S,"Empty",tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance__Empty00);
 tolua_function(tolua_S,".eq",tolua_z_VCL_Set_Classes__74_csLoading_csDesignInstance___eq00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"Set_Classes__84_csInheritable_csTransient_","Set<Classes__84,csInheritable,csTransient>","",tolua_collect_Set_Classes__84_csInheritable_csTransient_);
#else
 tolua_cclass(tolua_S,"Set_Classes__84_csInheritable_csTransient_","Set<Classes__84,csInheritable,csTransient>","",NULL);
#endif
 tolua_beginmodule(tolua_S,"Set_Classes__84_csInheritable_csTransient_");
 tolua_function(tolua_S,"new",tolua_z_VCL_Set_Classes__84_csInheritable_csTransient__new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_Set_Classes__84_csInheritable_csTransient__new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_Set_Classes__84_csInheritable_csTransient__new00_local);
 tolua_function(tolua_S,"new",tolua_z_VCL_Set_Classes__84_csInheritable_csTransient__new01);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_Set_Classes__84_csInheritable_csTransient__new01_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_Set_Classes__84_csInheritable_csTransient__new01_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_Set_Classes__84_csInheritable_csTransient__delete00);
 tolua_function(tolua_S,".add",tolua_z_VCL_Set_Classes__84_csInheritable_csTransient___add00);
 tolua_function(tolua_S,".sub",tolua_z_VCL_Set_Classes__84_csInheritable_csTransient___sub00);
 tolua_function(tolua_S,".mul",tolua_z_VCL_Set_Classes__84_csInheritable_csTransient___mul00);
 tolua_function(tolua_S,"Contains",tolua_z_VCL_Set_Classes__84_csInheritable_csTransient__Contains00);
 tolua_function(tolua_S,"Clear",tolua_z_VCL_Set_Classes__84_csInheritable_csTransient__Clear00);
 tolua_function(tolua_S,"Empty",tolua_z_VCL_Set_Classes__84_csInheritable_csTransient__Empty00);
 tolua_function(tolua_S,".eq",tolua_z_VCL_Set_Classes__84_csInheritable_csTransient___eq00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"Set_Forms__6_fsCreating_fsActivated_","Set<Forms__6,fsCreating,fsActivated>","",tolua_collect_Set_Forms__6_fsCreating_fsActivated_);
#else
 tolua_cclass(tolua_S,"Set_Forms__6_fsCreating_fsActivated_","Set<Forms__6,fsCreating,fsActivated>","",NULL);
#endif
 tolua_beginmodule(tolua_S,"Set_Forms__6_fsCreating_fsActivated_");
 tolua_function(tolua_S,"new",tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated__new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated__new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated__new00_local);
 tolua_function(tolua_S,"new",tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated__new01);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated__new01_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated__new01_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated__delete00);
 tolua_function(tolua_S,".add",tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated___add00);
 tolua_function(tolua_S,".sub",tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated___sub00);
 tolua_function(tolua_S,".mul",tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated___mul00);
 tolua_function(tolua_S,"Contains",tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated__Contains00);
 tolua_function(tolua_S,"Clear",tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated__Clear00);
 tolua_function(tolua_S,"Empty",tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated__Empty00);
 tolua_function(tolua_S,".eq",tolua_z_VCL_Set_Forms__6_fsCreating_fsActivated___eq00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"Set_TBevelEdge_beLeft_beBottom_","Set<TBevelEdge,beLeft,beBottom>","",tolua_collect_Set_TBevelEdge_beLeft_beBottom_);
#else
 tolua_cclass(tolua_S,"Set_TBevelEdge_beLeft_beBottom_","Set<TBevelEdge,beLeft,beBottom>","",NULL);
#endif
 tolua_beginmodule(tolua_S,"Set_TBevelEdge_beLeft_beBottom_");
 tolua_function(tolua_S,"new",tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom__new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom__new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom__new00_local);
 tolua_function(tolua_S,"new",tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom__new01);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom__new01_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom__new01_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom__delete00);
 tolua_function(tolua_S,".add",tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom___add00);
 tolua_function(tolua_S,".sub",tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom___sub00);
 tolua_function(tolua_S,".mul",tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom___mul00);
 tolua_function(tolua_S,"Contains",tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom__Contains00);
 tolua_function(tolua_S,"Clear",tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom__Clear00);
 tolua_function(tolua_S,"Empty",tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom__Empty00);
 tolua_function(tolua_S,".eq",tolua_z_VCL_Set_TBevelEdge_beLeft_beBottom___eq00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"Set_Controls__01_csLButtonDown_csDocking_","Set<Controls__01,csLButtonDown,csDocking>","",tolua_collect_Set_Controls__01_csLButtonDown_csDocking_);
#else
 tolua_cclass(tolua_S,"Set_Controls__01_csLButtonDown_csDocking_","Set<Controls__01,csLButtonDown,csDocking>","",NULL);
#endif
 tolua_beginmodule(tolua_S,"Set_Controls__01_csLButtonDown_csDocking_");
 tolua_function(tolua_S,"new",tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking__new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking__new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking__new00_local);
 tolua_function(tolua_S,"new",tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking__new01);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking__new01_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking__new01_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking__delete00);
 tolua_function(tolua_S,".add",tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking___add00);
 tolua_function(tolua_S,".sub",tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking___sub00);
 tolua_function(tolua_S,".mul",tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking___mul00);
 tolua_function(tolua_S,"Contains",tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking__Contains00);
 tolua_function(tolua_S,"Clear",tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking__Clear00);
 tolua_function(tolua_S,"Empty",tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking__Empty00);
 tolua_function(tolua_S,".eq",tolua_z_VCL_Set_Controls__01_csLButtonDown_csDocking___eq00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"Set_Controls__11_csAcceptsControls_csMenuEvents_","Set<Controls__11,csAcceptsControls,csMenuEvents>","",tolua_collect_Set_Controls__11_csAcceptsControls_csMenuEvents_);
#else
 tolua_cclass(tolua_S,"Set_Controls__11_csAcceptsControls_csMenuEvents_","Set<Controls__11,csAcceptsControls,csMenuEvents>","",NULL);
#endif
 tolua_beginmodule(tolua_S,"Set_Controls__11_csAcceptsControls_csMenuEvents_");
 tolua_function(tolua_S,"new",tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents__new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents__new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents__new00_local);
 tolua_function(tolua_S,"new",tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents__new01);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents__new01_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents__new01_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents__delete00);
 tolua_function(tolua_S,".add",tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents___add00);
 tolua_function(tolua_S,".sub",tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents___sub00);
 tolua_function(tolua_S,".mul",tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents___mul00);
 tolua_function(tolua_S,"Contains",tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents__Contains00);
 tolua_function(tolua_S,"Clear",tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents__Clear00);
 tolua_function(tolua_S,"Empty",tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents__Empty00);
 tolua_function(tolua_S,".eq",tolua_z_VCL_Set_Controls__11_csAcceptsControls_csMenuEvents___eq00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"Set_TAnchorKind_akLeft_akBottom_","Set<TAnchorKind,akLeft,akBottom>","",tolua_collect_Set_TAnchorKind_akLeft_akBottom_);
#else
 tolua_cclass(tolua_S,"Set_TAnchorKind_akLeft_akBottom_","Set<TAnchorKind,akLeft,akBottom>","",NULL);
#endif
 tolua_beginmodule(tolua_S,"Set_TAnchorKind_akLeft_akBottom_");
 tolua_function(tolua_S,"new",tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom__new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom__new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom__new00_local);
 tolua_function(tolua_S,"new",tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom__new01);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom__new01_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom__new01_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom__delete00);
 tolua_function(tolua_S,".add",tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom___add00);
 tolua_function(tolua_S,".sub",tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom___sub00);
 tolua_function(tolua_S,".mul",tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom___mul00);
 tolua_function(tolua_S,"Contains",tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom__Contains00);
 tolua_function(tolua_S,"Clear",tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom__Clear00);
 tolua_function(tolua_S,"Empty",tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom__Empty00);
 tolua_function(tolua_S,".eq",tolua_z_VCL_Set_TAnchorKind_akLeft_akBottom___eq00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"Set_TFontStyle_fsBold_fsStrikeOut_","Set<TFontStyle,fsBold,fsStrikeOut>","",tolua_collect_Set_TFontStyle_fsBold_fsStrikeOut_);
#else
 tolua_cclass(tolua_S,"Set_TFontStyle_fsBold_fsStrikeOut_","Set<TFontStyle,fsBold,fsStrikeOut>","",NULL);
#endif
 tolua_beginmodule(tolua_S,"Set_TFontStyle_fsBold_fsStrikeOut_");
 tolua_function(tolua_S,"new",tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut__new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut__new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut__new00_local);
 tolua_function(tolua_S,"new",tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut__new01);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut__new01_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut__new01_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut__delete00);
 tolua_function(tolua_S,".add",tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut___add00);
 tolua_function(tolua_S,".sub",tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut___sub00);
 tolua_function(tolua_S,".mul",tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut___mul00);
 tolua_function(tolua_S,"Contains",tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut__Contains00);
 tolua_function(tolua_S,"Clear",tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut__Clear00);
 tolua_function(tolua_S,"Empty",tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut__Empty00);
 tolua_function(tolua_S,".eq",tolua_z_VCL_Set_TFontStyle_fsBold_fsStrikeOut___eq00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TWMMenuChar","TWMMenuChar","",tolua_collect_TWMMenuChar);
#else
 tolua_cclass(tolua_S,"TWMMenuChar","TWMMenuChar","",NULL);
#endif
 tolua_beginmodule(tolua_S,"TWMMenuChar");
 tolua_function(tolua_S,"new",tolua_z_VCL_TWMMenuChar_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TWMMenuChar_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TWMMenuChar_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TWMMenuChar_delete00);
 tolua_variable(tolua_S,"Msg",tolua_get_TWMMenuChar_Msg,tolua_set_TWMMenuChar_Msg);
 tolua_variable(tolua_S,"User",tolua_get_TWMMenuChar_User,tolua_set_TWMMenuChar_User);
 tolua_variable(tolua_S,"Unused",tolua_get_TWMMenuChar_Unused,tolua_set_TWMMenuChar_Unused);
 tolua_variable(tolua_S,"MenuFlag",tolua_get_TWMMenuChar_MenuFlag,tolua_set_TWMMenuChar_MenuFlag);
 tolua_variable(tolua_S,"Result",tolua_get_TWMMenuChar_Result,tolua_set_TWMMenuChar_Result);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"SIZE","SIZE","",tolua_collect_SIZE);
#else
 tolua_cclass(tolua_S,"SIZE","SIZE","",NULL);
#endif
 tolua_beginmodule(tolua_S,"SIZE");
 tolua_function(tolua_S,"new",tolua_z_VCL_SIZE_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_SIZE_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_SIZE_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_SIZE_delete00);
 tolua_variable(tolua_S,"cx",tolua_get_SIZE_cx,tolua_set_SIZE_cx);
 tolua_variable(tolua_S,"cy",tolua_get_SIZE_cy,tolua_set_SIZE_cy);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TWMKey","TWMKey","",tolua_collect_TWMKey);
#else
 tolua_cclass(tolua_S,"TWMKey","TWMKey","",NULL);
#endif
 tolua_beginmodule(tolua_S,"TWMKey");
 tolua_function(tolua_S,"new",tolua_z_VCL_TWMKey_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TWMKey_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TWMKey_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TWMKey_delete00);
 tolua_variable(tolua_S,"Msg",tolua_get_TWMKey_Msg,tolua_set_TWMKey_Msg);
 tolua_variable(tolua_S,"CharCode",tolua_get_TWMKey_CharCode,tolua_set_TWMKey_CharCode);
 tolua_variable(tolua_S,"Unused",tolua_get_TWMKey_Unused,tolua_set_TWMKey_Unused);
 tolua_variable(tolua_S,"KeyData",tolua_get_TWMKey_KeyData,tolua_set_TWMKey_KeyData);
 tolua_variable(tolua_S,"Result",tolua_get_TWMKey_Result,tolua_set_TWMKey_Result);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TMessage","TMessage","",tolua_collect_TMessage);
#else
 tolua_cclass(tolua_S,"TMessage","TMessage","",NULL);
#endif
 tolua_beginmodule(tolua_S,"TMessage");
 tolua_function(tolua_S,"new",tolua_z_VCL_TMessage_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TMessage_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TMessage_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TMessage_delete00);
 tolua_variable(tolua_S,"WParamLo",tolua_get_TMessage_WParamLo,tolua_set_TMessage_WParamLo);
 tolua_variable(tolua_S,"WParamHi",tolua_get_TMessage_WParamHi,tolua_set_TMessage_WParamHi);
 tolua_variable(tolua_S,"LParamLo",tolua_get_TMessage_LParamLo,tolua_set_TMessage_LParamLo);
 tolua_variable(tolua_S,"LParamHi",tolua_get_TMessage_LParamHi,tolua_set_TMessage_LParamHi);
 tolua_variable(tolua_S,"ResultLo",tolua_get_TMessage_ResultLo,tolua_set_TMessage_ResultLo);
 tolua_variable(tolua_S,"ResultHi",tolua_get_TMessage_ResultHi,tolua_set_TMessage_ResultHi);
 tolua_variable(tolua_S,"WParam",tolua_get_TMessage_WParam,tolua_set_TMessage_WParam);
 tolua_variable(tolua_S,"LParam",tolua_get_TMessage_LParam,tolua_set_TMessage_LParam);
 tolua_variable(tolua_S,"Result",tolua_get_TMessage_Result,tolua_set_TMessage_Result);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"RECT","RECT","",tolua_collect_RECT);
#else
 tolua_cclass(tolua_S,"RECT","RECT","",NULL);
#endif
 tolua_beginmodule(tolua_S,"RECT");
 tolua_function(tolua_S,"new",tolua_z_VCL_RECT_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_RECT_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_RECT_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_RECT_delete00);
 tolua_variable(tolua_S,"left",tolua_get_RECT_left,tolua_set_RECT_left);
 tolua_variable(tolua_S,"top",tolua_get_RECT_top,tolua_set_RECT_top);
 tolua_variable(tolua_S,"right",tolua_get_RECT_right,tolua_set_RECT_right);
 tolua_variable(tolua_S,"bottom",tolua_get_RECT_bottom,tolua_set_RECT_bottom);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"POINT","POINT","",tolua_collect_POINT);
#else
 tolua_cclass(tolua_S,"POINT","POINT","",NULL);
#endif
 tolua_beginmodule(tolua_S,"POINT");
 tolua_function(tolua_S,"new",tolua_z_VCL_POINT_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_POINT_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_POINT_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_POINT_delete00);
 tolua_variable(tolua_S,"x",tolua_get_POINT_x,tolua_set_POINT_x);
 tolua_variable(tolua_S,"y",tolua_get_POINT_y,tolua_set_POINT_y);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TPoint","TPoint","POINT",tolua_collect_TPoint);
#else
 tolua_cclass(tolua_S,"TPoint","TPoint","POINT",NULL);
#endif
 tolua_beginmodule(tolua_S,"TPoint");
 tolua_function(tolua_S,"new",tolua_z_VCL_TPoint_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TPoint_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TPoint_new00_local);
 tolua_function(tolua_S,"new",tolua_z_VCL_TPoint_new01);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TPoint_new01_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TPoint_new01_local);
 tolua_function(tolua_S,"new",tolua_z_VCL_TPoint_new02);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TPoint_new02_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TPoint_new02_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TPoint_delete00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TRect","TRect","RECT",tolua_collect_TRect);
#else
 tolua_cclass(tolua_S,"TRect","TRect","RECT",NULL);
#endif
 tolua_beginmodule(tolua_S,"TRect");
 tolua_function(tolua_S,"new",tolua_z_VCL_TRect_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TRect_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TRect_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TRect_delete00);
 tolua_function(tolua_S,"new",tolua_z_VCL_TRect_new01);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TRect_new01_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TRect_new01_local);
 tolua_function(tolua_S,"new",tolua_z_VCL_TRect_new02);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TRect_new02_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TRect_new02_local);
 tolua_function(tolua_S,"new",tolua_z_VCL_TRect_new03);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TRect_new03_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TRect_new03_local);
 tolua_function(tolua_S,"Width",tolua_z_VCL_TRect_Width00);
 tolua_function(tolua_S,"Height",tolua_z_VCL_TRect_Height00);
 tolua_function(tolua_S,".eq",tolua_z_VCL_TRect__eq00);
 tolua_variable(tolua_S,"Left",tolua_get_TRect_Left,tolua_set_TRect_Left);
 tolua_variable(tolua_S,"Top",tolua_get_TRect_Top,tolua_set_TRect_Top);
 tolua_variable(tolua_S,"Right",tolua_get_TRect_Right,tolua_set_TRect_Right);
 tolua_variable(tolua_S,"Bottom",tolua_get_TRect_Bottom,tolua_set_TRect_Bottom);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TMetaClass","TMetaClass","",tolua_collect_TMetaClass);
#else
 tolua_cclass(tolua_S,"TMetaClass","TMetaClass","",NULL);
#endif
 tolua_beginmodule(tolua_S,"TMetaClass");
 tolua_function(tolua_S,"new",tolua_z_VCL_TMetaClass_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TMetaClass_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TMetaClass_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TMetaClass_delete00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TObject","TObject","",tolua_collect_TObject);
#else
 tolua_cclass(tolua_S,"TObject","TObject","",NULL);
#endif
 tolua_beginmodule(tolua_S,"TObject");
 tolua_function(tolua_S,"new",tolua_z_VCL_TObject_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TObject_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TObject_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TObject_delete00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TChangeLink","TChangeLink","TObject",tolua_collect_TChangeLink);
#else
 tolua_cclass(tolua_S,"TChangeLink","TChangeLink","TObject",NULL);
#endif
 tolua_beginmodule(tolua_S,"TChangeLink");
 tolua_function(tolua_S,"delete",tolua_z_VCL_TChangeLink_delete00);
 tolua_function(tolua_S,"Change",tolua_z_VCL_TChangeLink_Change00);
 tolua_variable(tolua_S,"Sender",tolua_get_TChangeLink_Sender_ptr,tolua_set_TChangeLink_Sender_ptr);
 tolua_function(tolua_S,"new",tolua_z_VCL_TChangeLink_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TChangeLink_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TChangeLink_new00_local);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TList","TList","TObject",tolua_collect_TList);
#else
 tolua_cclass(tolua_S,"TList","TList","TObject",NULL);
#endif
 tolua_beginmodule(tolua_S,"TList");
 tolua_function(tolua_S,".geti",tolua_z_VCL_TList__geti00);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TList_delete00);
 tolua_function(tolua_S,"Add",tolua_z_VCL_TList_Add00);
 tolua_function(tolua_S,"Clear",tolua_z_VCL_TList_Clear00);
 tolua_function(tolua_S,"Delete",tolua_z_VCL_TList_Delete00);
 tolua_function(tolua_S,"Error",tolua_z_VCL_TList_Error00);
 tolua_function(tolua_S,"Error",tolua_z_VCL_TList_Error01);
 tolua_function(tolua_S,"Exchange",tolua_z_VCL_TList_Exchange00);
 tolua_function(tolua_S,"Extract",tolua_z_VCL_TList_Extract00);
 tolua_function(tolua_S,"First",tolua_z_VCL_TList_First00);
 tolua_function(tolua_S,"IndexOf",tolua_z_VCL_TList_IndexOf00);
 tolua_function(tolua_S,"Insert",tolua_z_VCL_TList_Insert00);
 tolua_function(tolua_S,"Last",tolua_z_VCL_TList_Last00);
 tolua_function(tolua_S,"Move",tolua_z_VCL_TList_Move00);
 tolua_function(tolua_S,"Remove",tolua_z_VCL_TList_Remove00);
 tolua_function(tolua_S,"Pack",tolua_z_VCL_TList_Pack00);
 tolua_function(tolua_S,"Sort",tolua_z_VCL_TList_Sort00);
 tolua_variable(tolua_S,"Capacity",tolua_get_TList_Capacity,tolua_set_TList_Capacity);
 tolua_variable(tolua_S,"Count",tolua_get_TList_Count,tolua_set_TList_Count);
 tolua_array(tolua_S,"Items",tolua_get_z_VCL_TList_Items,tolua_set_z_VCL_TList_Items);
 tolua_function(tolua_S,"new",tolua_z_VCL_TList_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TList_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TList_new00_local);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TStream","TStream","TObject",tolua_collect_TStream);
#else
 tolua_cclass(tolua_S,"TStream","TStream","TObject",NULL);
#endif
 tolua_beginmodule(tolua_S,"TStream");
 tolua_function(tolua_S,"new",tolua_z_VCL_TStream_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TStream_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TStream_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TStream_delete00);
 tolua_function(tolua_S,"Read",tolua_z_VCL_TStream_Read00);
 tolua_function(tolua_S,"Write",tolua_z_VCL_TStream_Write00);
 tolua_function(tolua_S,"Seek",tolua_z_VCL_TStream_Seek00);
 tolua_function(tolua_S,"Seek",tolua_z_VCL_TStream_Seek01);
 tolua_function(tolua_S,"ReadBuffer",tolua_z_VCL_TStream_ReadBuffer00);
 tolua_function(tolua_S,"WriteBuffer",tolua_z_VCL_TStream_WriteBuffer00);
 tolua_function(tolua_S,"CopyFrom",tolua_z_VCL_TStream_CopyFrom00);
 tolua_function(tolua_S,"ReadComponent",tolua_z_VCL_TStream_ReadComponent00);
 tolua_function(tolua_S,"ReadComponentRes",tolua_z_VCL_TStream_ReadComponentRes00);
 tolua_function(tolua_S,"WriteComponent",tolua_z_VCL_TStream_WriteComponent00);
 tolua_function(tolua_S,"WriteComponentRes",tolua_z_VCL_TStream_WriteComponentRes00);
 tolua_function(tolua_S,"WriteDescendent",tolua_z_VCL_TStream_WriteDescendent00);
 tolua_function(tolua_S,"WriteDescendentRes",tolua_z_VCL_TStream_WriteDescendentRes00);
 tolua_function(tolua_S,"WriteResourceHeader",tolua_z_VCL_TStream_WriteResourceHeader00);
 tolua_function(tolua_S,"FixupResourceHeader",tolua_z_VCL_TStream_FixupResourceHeader00);
 tolua_function(tolua_S,"ReadResHeader",tolua_z_VCL_TStream_ReadResHeader00);
 tolua_variable(tolua_S,"Position",tolua_get_TStream_Position,tolua_set_TStream_Position);
 tolua_variable(tolua_S,"Size",tolua_get_TStream_Size,tolua_set_TStream_Size);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TDragObject","TDragObject","TObject",tolua_collect_TDragObject);
#else
 tolua_cclass(tolua_S,"TDragObject","TDragObject","TObject",NULL);
#endif
 tolua_beginmodule(tolua_S,"TDragObject");
 tolua_function(tolua_S,"Assign",tolua_z_VCL_TDragObject_Assign00);
 tolua_function(tolua_S,"GetName",tolua_z_VCL_TDragObject_GetName00);
 tolua_function(tolua_S,"HideDragImage",tolua_z_VCL_TDragObject_HideDragImage00);
 tolua_function(tolua_S,"Instance",tolua_z_VCL_TDragObject_Instance00);
 tolua_function(tolua_S,"ShowDragImage",tolua_z_VCL_TDragObject_ShowDragImage00);
 tolua_variable(tolua_S,"Cancelling",tolua_get_TDragObject_Cancelling,tolua_set_TDragObject_Cancelling);
 tolua_variable(tolua_S,"DragPos",tolua_get_TDragObject_DragPos,tolua_set_TDragObject_DragPos);
 tolua_variable(tolua_S,"DragTargetPos",tolua_get_TDragObject_DragTargetPos,tolua_set_TDragObject_DragTargetPos);
 tolua_variable(tolua_S,"DragTarget",tolua_get_TDragObject_DragTarget,tolua_set_TDragObject_DragTarget);
 tolua_variable(tolua_S,"Dropped",tolua_get_TDragObject_Dropped,NULL);
 tolua_variable(tolua_S,"MouseDeltaX",tolua_get_TDragObject_MouseDeltaX,NULL);
 tolua_variable(tolua_S,"MouseDeltaY",tolua_get_TDragObject_MouseDeltaY,NULL);
 tolua_function(tolua_S,"new",tolua_z_VCL_TDragObject_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TDragObject_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TDragObject_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TDragObject_delete00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TBaseDragControlObject","TBaseDragControlObject","TDragObject",tolua_collect_TBaseDragControlObject);
#else
 tolua_cclass(tolua_S,"TBaseDragControlObject","TBaseDragControlObject","TDragObject",NULL);
#endif
 tolua_beginmodule(tolua_S,"TBaseDragControlObject");
 tolua_variable(tolua_S,"Control",tolua_get_TBaseDragControlObject_Control_ptr,tolua_set_TBaseDragControlObject_Control_ptr);
 tolua_function(tolua_S,"new",tolua_z_VCL_TBaseDragControlObject_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TBaseDragControlObject_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TBaseDragControlObject_new00_local);
 tolua_function(tolua_S,"Assign",tolua_z_VCL_TBaseDragControlObject_Assign00);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TBaseDragControlObject_delete00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TDragDockObject","TDragDockObject","TBaseDragControlObject",tolua_collect_TDragDockObject);
#else
 tolua_cclass(tolua_S,"TDragDockObject","TDragDockObject","TBaseDragControlObject",NULL);
#endif
 tolua_beginmodule(tolua_S,"TDragDockObject");
 tolua_function(tolua_S,"new",tolua_z_VCL_TDragDockObject_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TDragDockObject_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TDragDockObject_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TDragDockObject_delete00);
 tolua_function(tolua_S,"Assign",tolua_z_VCL_TDragDockObject_Assign00);
 tolua_variable(tolua_S,"Brush",tolua_get_TDragDockObject_Brush_ptr,tolua_set_TDragDockObject_Brush_ptr);
 tolua_variable(tolua_S,"DockRect",tolua_get_TDragDockObject_DockRect,tolua_set_TDragDockObject_DockRect);
 tolua_variable(tolua_S,"DropAlign",tolua_get_TDragDockObject_DropAlign,NULL);
 tolua_variable(tolua_S,"DropOnControl",tolua_get_TDragDockObject_DropOnControl_ptr,NULL);
 tolua_variable(tolua_S,"Floating",tolua_get_TDragDockObject_Floating,tolua_set_TDragDockObject_Floating);
 tolua_variable(tolua_S,"FrameWidth",tolua_get_TDragDockObject_FrameWidth,NULL);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TMonitor","TMonitor","TObject",tolua_collect_TMonitor);
#else
 tolua_cclass(tolua_S,"TMonitor","TMonitor","TObject",NULL);
#endif
 tolua_beginmodule(tolua_S,"TMonitor");
 tolua_variable(tolua_S,"MonitorNum",tolua_get_TMonitor_MonitorNum,NULL);
 tolua_variable(tolua_S,"Left",tolua_get_TMonitor_Left,NULL);
 tolua_variable(tolua_S,"Height",tolua_get_TMonitor_Height,NULL);
 tolua_variable(tolua_S,"Top",tolua_get_TMonitor_Top,NULL);
 tolua_variable(tolua_S,"Width",tolua_get_TMonitor_Width,NULL);
 tolua_variable(tolua_S,"BoundsRect",tolua_get_TMonitor_BoundsRect,NULL);
 tolua_variable(tolua_S,"WorkareaRect",tolua_get_TMonitor_WorkareaRect,NULL);
 tolua_variable(tolua_S,"Primary",tolua_get_TMonitor_Primary,NULL);
 tolua_function(tolua_S,"new",tolua_z_VCL_TMonitor_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TMonitor_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TMonitor_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TMonitor_delete00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TBasicActionLink","TBasicActionLink","TObject",tolua_collect_TBasicActionLink);
#else
 tolua_cclass(tolua_S,"TBasicActionLink","TBasicActionLink","TObject",NULL);
#endif
 tolua_beginmodule(tolua_S,"TBasicActionLink");
 tolua_function(tolua_S,"new",tolua_z_VCL_TBasicActionLink_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TBasicActionLink_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TBasicActionLink_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TBasicActionLink_delete00);
 tolua_function(tolua_S,"Execute",tolua_z_VCL_TBasicActionLink_Execute00);
 tolua_function(tolua_S,"Update",tolua_z_VCL_TBasicActionLink_Update00);
 tolua_variable(tolua_S,"Action",tolua_get_TBasicActionLink_Action_ptr,tolua_set_TBasicActionLink_Action_ptr);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TPersistent","TPersistent","TObject",tolua_collect_TPersistent);
#else
 tolua_cclass(tolua_S,"TPersistent","TPersistent","TObject",NULL);
#endif
 tolua_beginmodule(tolua_S,"TPersistent");
 tolua_function(tolua_S,"new",tolua_z_VCL_TPersistent_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TPersistent_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TPersistent_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TPersistent_delete00);
 tolua_function(tolua_S,"Assign",tolua_z_VCL_TPersistent_Assign00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TCanvas","TCanvas","TPersistent",tolua_collect_TCanvas);
#else
 tolua_cclass(tolua_S,"TCanvas","TCanvas","TPersistent",NULL);
#endif
 tolua_beginmodule(tolua_S,"TCanvas");
 tolua_function(tolua_S,"new",tolua_z_VCL_TCanvas_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TCanvas_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TCanvas_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TCanvas_delete00);
 tolua_function(tolua_S,"Arc",tolua_z_VCL_TCanvas_Arc00);
 tolua_function(tolua_S,"BrushCopy",tolua_z_VCL_TCanvas_BrushCopy00);
 tolua_function(tolua_S,"Chord",tolua_z_VCL_TCanvas_Chord00);
 tolua_function(tolua_S,"CopyRect",tolua_z_VCL_TCanvas_CopyRect00);
 tolua_function(tolua_S,"Draw",tolua_z_VCL_TCanvas_Draw00);
 tolua_function(tolua_S,"DrawFocusRect",tolua_z_VCL_TCanvas_DrawFocusRect00);
 tolua_function(tolua_S,"Ellipse",tolua_z_VCL_TCanvas_Ellipse00);
 tolua_function(tolua_S,"Ellipse",tolua_z_VCL_TCanvas_Ellipse01);
 tolua_function(tolua_S,"FillRect",tolua_z_VCL_TCanvas_FillRect00);
 tolua_function(tolua_S,"FloodFill",tolua_z_VCL_TCanvas_FloodFill00);
 tolua_function(tolua_S,"FrameRect",tolua_z_VCL_TCanvas_FrameRect00);
 tolua_function(tolua_S,"HandleAllocated",tolua_z_VCL_TCanvas_HandleAllocated00);
 tolua_function(tolua_S,"LineTo",tolua_z_VCL_TCanvas_LineTo00);
 tolua_function(tolua_S,"Lock",tolua_z_VCL_TCanvas_Lock00);
 tolua_function(tolua_S,"MoveTo",tolua_z_VCL_TCanvas_MoveTo00);
 tolua_function(tolua_S,"Pie",tolua_z_VCL_TCanvas_Pie00);
 tolua_function(tolua_S,"Polygon",tolua_z_VCL_TCanvas_Polygon00);
 tolua_function(tolua_S,"Polyline",tolua_z_VCL_TCanvas_Polyline00);
 tolua_function(tolua_S,"PolyBezier",tolua_z_VCL_TCanvas_PolyBezier00);
 tolua_function(tolua_S,"PolyBezierTo",tolua_z_VCL_TCanvas_PolyBezierTo00);
 tolua_function(tolua_S,"Rectangle",tolua_z_VCL_TCanvas_Rectangle00);
 tolua_function(tolua_S,"Rectangle",tolua_z_VCL_TCanvas_Rectangle01);
 tolua_function(tolua_S,"Refresh",tolua_z_VCL_TCanvas_Refresh00);
 tolua_function(tolua_S,"RoundRect",tolua_z_VCL_TCanvas_RoundRect00);
 tolua_function(tolua_S,"StretchDraw",tolua_z_VCL_TCanvas_StretchDraw00);
 tolua_function(tolua_S,"TextExtent",tolua_z_VCL_TCanvas_TextExtent00);
 tolua_function(tolua_S,"TextHeight",tolua_z_VCL_TCanvas_TextHeight00);
 tolua_function(tolua_S,"TextOut",tolua_z_VCL_TCanvas_TextOut00);
 tolua_function(tolua_S,"TextRect",tolua_z_VCL_TCanvas_TextRect00);
 tolua_function(tolua_S,"TextWidth",tolua_z_VCL_TCanvas_TextWidth00);
 tolua_function(tolua_S,"TryLock",tolua_z_VCL_TCanvas_TryLock00);
 tolua_function(tolua_S,"Unlock",tolua_z_VCL_TCanvas_Unlock00);
 tolua_variable(tolua_S,"ClipRect",tolua_get_TCanvas_ClipRect,NULL);
 tolua_variable(tolua_S,"LockCount",tolua_get_TCanvas_LockCount,NULL);
 tolua_variable(tolua_S,"CanvasOrientation",tolua_get_TCanvas_CanvasOrientation,NULL);
 tolua_variable(tolua_S,"PenPos",tolua_get_TCanvas_PenPos,tolua_set_TCanvas_PenPos);
 tolua_variable(tolua_S,"TextFlags",tolua_get_TCanvas_TextFlags,tolua_set_TCanvas_TextFlags);
 tolua_variable(tolua_S,"Brush",tolua_get_TCanvas_Brush_ptr,tolua_set_TCanvas_Brush_ptr);
 tolua_variable(tolua_S,"CopyMode",tolua_get_TCanvas_CopyMode,tolua_set_TCanvas_CopyMode);
 tolua_variable(tolua_S,"Font",tolua_get_TCanvas_Font_ptr,tolua_set_TCanvas_Font_ptr);
 tolua_variable(tolua_S,"Pen",tolua_get_TCanvas_Pen_ptr,tolua_set_TCanvas_Pen_ptr);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TInterfacedPersistent","TInterfacedPersistent","TPersistent",tolua_collect_TInterfacedPersistent);
#else
 tolua_cclass(tolua_S,"TInterfacedPersistent","TInterfacedPersistent","TPersistent",NULL);
#endif
 tolua_beginmodule(tolua_S,"TInterfacedPersistent");
 tolua_function(tolua_S,"AfterConstruction",tolua_z_VCL_TInterfacedPersistent_AfterConstruction00);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TInterfacedPersistent_delete00);
 tolua_function(tolua_S,"new",tolua_z_VCL_TInterfacedPersistent_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TInterfacedPersistent_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TInterfacedPersistent_new00_local);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TPicture","TPicture","TInterfacedPersistent",tolua_collect_TPicture);
#else
 tolua_cclass(tolua_S,"TPicture","TPicture","TInterfacedPersistent",NULL);
#endif
 tolua_beginmodule(tolua_S,"TPicture");
 tolua_function(tolua_S,"new",tolua_z_VCL_TPicture_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TPicture_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TPicture_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TPicture_delete00);
 tolua_function(tolua_S,"LoadFromFile",tolua_z_VCL_TPicture_LoadFromFile00);
 tolua_function(tolua_S,"SaveToFile",tolua_z_VCL_TPicture_SaveToFile00);
 tolua_function(tolua_S,"SupportsClipboardFormat",tolua_z_VCL_TPicture_SupportsClipboardFormat00);
 tolua_function(tolua_S,"Assign",tolua_z_VCL_TPicture_Assign00);
 tolua_function(tolua_S,"RegisterFileFormat",tolua_z_VCL_TPicture_RegisterFileFormat00);
 tolua_function(tolua_S,"RegisterFileFormatRes",tolua_z_VCL_TPicture_RegisterFileFormatRes00);
 tolua_function(tolua_S,"RegisterClipboardFormat",tolua_z_VCL_TPicture_RegisterClipboardFormat00);
 tolua_function(tolua_S,"UnregisterGraphicClass",tolua_z_VCL_TPicture_UnregisterGraphicClass00);
 tolua_variable(tolua_S,"Bitmap",tolua_get_TPicture_Bitmap_ptr,tolua_set_TPicture_Bitmap_ptr);
 tolua_variable(tolua_S,"Graphic",tolua_get_TPicture_Graphic_ptr,tolua_set_TPicture_Graphic_ptr);
 tolua_variable(tolua_S,"Height",tolua_get_TPicture_Height,NULL);
 tolua_variable(tolua_S,"Icon",tolua_get_TPicture_Icon_ptr,tolua_set_TPicture_Icon_ptr);
 tolua_variable(tolua_S,"Metafile",tolua_get_TPicture_Metafile_ptr,tolua_set_TPicture_Metafile_ptr);
 tolua_variable(tolua_S,"Width",tolua_get_TPicture_Width,NULL);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TGraphic","TGraphic","TInterfacedPersistent",tolua_collect_TGraphic);
#else
 tolua_cclass(tolua_S,"TGraphic","TGraphic","TInterfacedPersistent",NULL);
#endif
 tolua_beginmodule(tolua_S,"TGraphic");
 tolua_function(tolua_S,"new",tolua_z_VCL_TGraphic_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TGraphic_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TGraphic_new00_local);
 tolua_function(tolua_S,"LoadFromFile",tolua_z_VCL_TGraphic_LoadFromFile00);
 tolua_function(tolua_S,"SaveToFile",tolua_z_VCL_TGraphic_SaveToFile00);
 tolua_function(tolua_S,"LoadFromStream",tolua_z_VCL_TGraphic_LoadFromStream00);
 tolua_function(tolua_S,"SaveToStream",tolua_z_VCL_TGraphic_SaveToStream00);
 tolua_variable(tolua_S,"Empty",tolua_get_TGraphic_Empty,NULL);
 tolua_variable(tolua_S,"Height",tolua_get_TGraphic_Height,tolua_set_TGraphic_Height);
 tolua_variable(tolua_S,"Modified",tolua_get_TGraphic_Modified,tolua_set_TGraphic_Modified);
 tolua_variable(tolua_S,"PaletteModified",tolua_get_TGraphic_PaletteModified,tolua_set_TGraphic_PaletteModified);
 tolua_variable(tolua_S,"Transparent",tolua_get_TGraphic_Transparent,tolua_set_TGraphic_Transparent);
 tolua_variable(tolua_S,"Width",tolua_get_TGraphic_Width,tolua_set_TGraphic_Width);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TGraphic_delete00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TMetafile","TMetafile","TGraphic",tolua_collect_TMetafile);
#else
 tolua_cclass(tolua_S,"TMetafile","TMetafile","TGraphic",NULL);
#endif
 tolua_beginmodule(tolua_S,"TMetafile");
 tolua_function(tolua_S,"new",tolua_z_VCL_TMetafile_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TMetafile_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TMetafile_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TMetafile_delete00);
 tolua_function(tolua_S,"Clear",tolua_z_VCL_TMetafile_Clear00);
 tolua_function(tolua_S,"HandleAllocated",tolua_z_VCL_TMetafile_HandleAllocated00);
 tolua_function(tolua_S,"LoadFromStream",tolua_z_VCL_TMetafile_LoadFromStream00);
 tolua_function(tolua_S,"SaveToFile",tolua_z_VCL_TMetafile_SaveToFile00);
 tolua_function(tolua_S,"SaveToStream",tolua_z_VCL_TMetafile_SaveToStream00);
 tolua_function(tolua_S,"Assign",tolua_z_VCL_TMetafile_Assign00);
 tolua_function(tolua_S,"ReleaseHandle",tolua_z_VCL_TMetafile_ReleaseHandle00);
 tolua_variable(tolua_S,"CreatedBy",tolua_get_TMetafile_CreatedBy,NULL);
 tolua_variable(tolua_S,"Description",tolua_get_TMetafile_Description,NULL);
 tolua_variable(tolua_S,"Enhanced",tolua_get_TMetafile_Enhanced,tolua_set_TMetafile_Enhanced);
 tolua_variable(tolua_S,"Handle",tolua_get_TMetafile_Handle,tolua_set_TMetafile_Handle);
 tolua_variable(tolua_S,"MMWidth",tolua_get_TMetafile_MMWidth,tolua_set_TMetafile_MMWidth);
 tolua_variable(tolua_S,"MMHeight",tolua_get_TMetafile_MMHeight,tolua_set_TMetafile_MMHeight);
 tolua_variable(tolua_S,"Inch",tolua_get_TMetafile_Inch,tolua_set_TMetafile_Inch);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TIcon","TIcon","TGraphic",tolua_collect_TIcon);
#else
 tolua_cclass(tolua_S,"TIcon","TIcon","TGraphic",NULL);
#endif
 tolua_beginmodule(tolua_S,"TIcon");
 tolua_function(tolua_S,"new",tolua_z_VCL_TIcon_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TIcon_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TIcon_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TIcon_delete00);
 tolua_function(tolua_S,"Assign",tolua_z_VCL_TIcon_Assign00);
 tolua_function(tolua_S,"HandleAllocated",tolua_z_VCL_TIcon_HandleAllocated00);
 tolua_function(tolua_S,"LoadFromStream",tolua_z_VCL_TIcon_LoadFromStream00);
 tolua_function(tolua_S,"SaveToStream",tolua_z_VCL_TIcon_SaveToStream00);
 tolua_endmodule(tolua_S);
 tolua_module(tolua_S,"Graphics",0);
 tolua_beginmodule(tolua_S,"Graphics");
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TBitmap","Graphics::TBitmap","TGraphic",tolua_collect_Graphics__TBitmap);
#else
 tolua_cclass(tolua_S,"TBitmap","Graphics::TBitmap","TGraphic",NULL);
#endif
 tolua_beginmodule(tolua_S,"TBitmap");
 tolua_function(tolua_S,"new",tolua_z_VCL_Graphics_TBitmap_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_Graphics_TBitmap_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_Graphics_TBitmap_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_Graphics_TBitmap_delete00);
 tolua_function(tolua_S,"Assign",tolua_z_VCL_Graphics_TBitmap_Assign00);
 tolua_function(tolua_S,"Dormant",tolua_z_VCL_Graphics_TBitmap_Dormant00);
 tolua_function(tolua_S,"FreeImage",tolua_z_VCL_Graphics_TBitmap_FreeImage00);
 tolua_function(tolua_S,"HandleAllocated",tolua_z_VCL_Graphics_TBitmap_HandleAllocated00);
 tolua_function(tolua_S,"LoadFromStream",tolua_z_VCL_Graphics_TBitmap_LoadFromStream00);
 tolua_function(tolua_S,"LoadFromResourceName",tolua_z_VCL_Graphics_TBitmap_LoadFromResourceName00);
 tolua_function(tolua_S,"LoadFromResourceID",tolua_z_VCL_Graphics_TBitmap_LoadFromResourceID00);
 tolua_function(tolua_S,"Mask",tolua_z_VCL_Graphics_TBitmap_Mask00);
 tolua_function(tolua_S,"SaveToStream",tolua_z_VCL_Graphics_TBitmap_SaveToStream00);
 tolua_variable(tolua_S,"Canvas",tolua_get_Graphics__TBitmap_Canvas_ptr,NULL);
 tolua_variable(tolua_S,"HandleType",tolua_get_Graphics__TBitmap_HandleType,tolua_set_Graphics__TBitmap_HandleType);
 tolua_variable(tolua_S,"IgnorePalette",tolua_get_Graphics__TBitmap_IgnorePalette,tolua_set_Graphics__TBitmap_IgnorePalette);
 tolua_variable(tolua_S,"Monochrome",tolua_get_Graphics__TBitmap_Monochrome,tolua_set_Graphics__TBitmap_Monochrome);
 tolua_variable(tolua_S,"PixelFormat",tolua_get_Graphics__TBitmap_PixelFormat,tolua_set_Graphics__TBitmap_PixelFormat);
 tolua_array(tolua_S,"ScanLine",tolua_get_z_VCL_Graphics_TBitmap_ScanLine,NULL);
 tolua_variable(tolua_S,"TransparentColor",tolua_get_Graphics__TBitmap_TransparentColor,tolua_set_Graphics__TBitmap_TransparentColor);
 tolua_variable(tolua_S,"TransparentMode",tolua_get_Graphics__TBitmap_TransparentMode,tolua_set_Graphics__TBitmap_TransparentMode);
 tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TGraphicsObject","TGraphicsObject","TPersistent",tolua_collect_TGraphicsObject);
#else
 tolua_cclass(tolua_S,"TGraphicsObject","TGraphicsObject","TPersistent",NULL);
#endif
 tolua_beginmodule(tolua_S,"TGraphicsObject");
 tolua_function(tolua_S,"HandleAllocated",tolua_z_VCL_TGraphicsObject_HandleAllocated00);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TGraphicsObject_delete00);
 tolua_function(tolua_S,"new",tolua_z_VCL_TGraphicsObject_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TGraphicsObject_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TGraphicsObject_new00_local);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TFont","TFont","TGraphicsObject",tolua_collect_TFont);
#else
 tolua_cclass(tolua_S,"TFont","TFont","TGraphicsObject",NULL);
#endif
 tolua_beginmodule(tolua_S,"TFont");
 tolua_function(tolua_S,"new",tolua_z_VCL_TFont_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TFont_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TFont_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TFont_delete00);
 tolua_function(tolua_S,"Assign",tolua_z_VCL_TFont_Assign00);
 tolua_variable(tolua_S,"PixelsPerInch",tolua_get_TFont_PixelsPerInch,tolua_set_TFont_PixelsPerInch);
 tolua_variable(tolua_S,"Charset",tolua_get_TFont_Charset,tolua_set_TFont_Charset);
 tolua_variable(tolua_S,"Color",tolua_get_TFont_Color,tolua_set_TFont_Color);
 tolua_variable(tolua_S,"Height",tolua_get_TFont_Height,tolua_set_TFont_Height);
 tolua_variable(tolua_S,"Name",tolua_get_TFont_Name,tolua_set_TFont_Name);
 tolua_variable(tolua_S,"Pitch",tolua_get_TFont_Pitch,tolua_set_TFont_Pitch);
 tolua_variable(tolua_S,"Size",tolua_get_TFont_Size,tolua_set_TFont_Size);
 tolua_variable(tolua_S,"Style",tolua_get_TFont_Style,tolua_set_TFont_Style);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TPen","TPen","TGraphicsObject",tolua_collect_TPen);
#else
 tolua_cclass(tolua_S,"TPen","TPen","TGraphicsObject",NULL);
#endif
 tolua_beginmodule(tolua_S,"TPen");
 tolua_function(tolua_S,"new",tolua_z_VCL_TPen_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TPen_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TPen_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TPen_delete00);
 tolua_function(tolua_S,"Assign",tolua_z_VCL_TPen_Assign00);
 tolua_variable(tolua_S,"Color",tolua_get_TPen_Color,tolua_set_TPen_Color);
 tolua_variable(tolua_S,"Mode",tolua_get_TPen_Mode,tolua_set_TPen_Mode);
 tolua_variable(tolua_S,"Style",tolua_get_TPen_Style,tolua_set_TPen_Style);
 tolua_variable(tolua_S,"Width",tolua_get_TPen_Width,tolua_set_TPen_Width);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TBrush","TBrush","TGraphicsObject",tolua_collect_TBrush);
#else
 tolua_cclass(tolua_S,"TBrush","TBrush","TGraphicsObject",NULL);
#endif
 tolua_beginmodule(tolua_S,"TBrush");
 tolua_function(tolua_S,"new",tolua_z_VCL_TBrush_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TBrush_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TBrush_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TBrush_delete00);
 tolua_function(tolua_S,"Assign",tolua_z_VCL_TBrush_Assign00);
 tolua_variable(tolua_S,"Bitmap",tolua_get_TBrush_Bitmap_ptr,tolua_set_TBrush_Bitmap_ptr);
 tolua_variable(tolua_S,"Color",tolua_get_TBrush_Color,tolua_set_TBrush_Color);
 tolua_variable(tolua_S,"Style",tolua_get_TBrush_Style,tolua_set_TBrush_Style);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TStrings","TStrings","TPersistent",tolua_collect_TStrings);
#else
 tolua_cclass(tolua_S,"TStrings","TStrings","TPersistent",NULL);
#endif
 tolua_beginmodule(tolua_S,"TStrings");
 tolua_function(tolua_S,".geti",tolua_z_VCL_TStrings__geti00);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TStrings_delete00);
 tolua_function(tolua_S,"Add",tolua_z_VCL_TStrings_Add00);
 tolua_function(tolua_S,"AddObject",tolua_z_VCL_TStrings_AddObject00);
 tolua_function(tolua_S,"Append",tolua_z_VCL_TStrings_Append00);
 tolua_function(tolua_S,"AddStrings",tolua_z_VCL_TStrings_AddStrings00);
 tolua_function(tolua_S,"Assign",tolua_z_VCL_TStrings_Assign00);
 tolua_function(tolua_S,"BeginUpdate",tolua_z_VCL_TStrings_BeginUpdate00);
 tolua_function(tolua_S,"Clear",tolua_z_VCL_TStrings_Clear00);
 tolua_function(tolua_S,"Delete",tolua_z_VCL_TStrings_Delete00);
 tolua_function(tolua_S,"EndUpdate",tolua_z_VCL_TStrings_EndUpdate00);
 tolua_function(tolua_S,"Equals",tolua_z_VCL_TStrings_Equals00);
 tolua_function(tolua_S,"Exchange",tolua_z_VCL_TStrings_Exchange00);
 tolua_function(tolua_S,"GetText",tolua_z_VCL_TStrings_GetText00);
 tolua_function(tolua_S,"IndexOf",tolua_z_VCL_TStrings_IndexOf00);
 tolua_function(tolua_S,"IndexOfName",tolua_z_VCL_TStrings_IndexOfName00);
 tolua_function(tolua_S,"IndexOfObject",tolua_z_VCL_TStrings_IndexOfObject00);
 tolua_function(tolua_S,"Insert",tolua_z_VCL_TStrings_Insert00);
 tolua_function(tolua_S,"InsertObject",tolua_z_VCL_TStrings_InsertObject00);
 tolua_function(tolua_S,"LoadFromFile",tolua_z_VCL_TStrings_LoadFromFile00);
 tolua_function(tolua_S,"LoadFromStream",tolua_z_VCL_TStrings_LoadFromStream00);
 tolua_function(tolua_S,"Move",tolua_z_VCL_TStrings_Move00);
 tolua_function(tolua_S,"SaveToFile",tolua_z_VCL_TStrings_SaveToFile00);
 tolua_function(tolua_S,"SaveToStream",tolua_z_VCL_TStrings_SaveToStream00);
 tolua_function(tolua_S,"SetText",tolua_z_VCL_TStrings_SetText00);
 tolua_variable(tolua_S,"Capacity",tolua_get_TStrings_Capacity,tolua_set_TStrings_Capacity);
 tolua_variable(tolua_S,"CommaText",tolua_get_TStrings_CommaText,tolua_set_TStrings_CommaText);
 tolua_variable(tolua_S,"Count",tolua_get_TStrings_Count,NULL);
 tolua_variable(tolua_S,"Delimiter",tolua_get_TStrings_Delimiter,tolua_set_TStrings_Delimiter);
 tolua_variable(tolua_S,"DelimitedText",tolua_get_TStrings_DelimitedText,tolua_set_TStrings_DelimitedText);
 tolua_array(tolua_S,"Names",tolua_get_z_VCL_TStrings_Names,NULL);
 tolua_array(tolua_S,"Objects",tolua_get_z_VCL_TStrings_Objects,tolua_set_z_VCL_TStrings_Objects);
 tolua_variable(tolua_S,"QuoteChar",tolua_get_TStrings_QuoteChar,tolua_set_TStrings_QuoteChar);
 tolua_array(tolua_S,"Values",tolua_get_z_VCL_TStrings_Values,tolua_set_z_VCL_TStrings_Values);
 tolua_array(tolua_S,"Strings",tolua_get_z_VCL_TStrings_Strings,tolua_set_z_VCL_TStrings_Strings);
 tolua_variable(tolua_S,"Text",tolua_get_TStrings_Text,tolua_set_TStrings_Text);
 tolua_function(tolua_S,"new",tolua_z_VCL_TStrings_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TStrings_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TStrings_new00_local);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TControlScrollBar","TControlScrollBar","TPersistent",tolua_collect_TControlScrollBar);
#else
 tolua_cclass(tolua_S,"TControlScrollBar","TControlScrollBar","TPersistent",NULL);
#endif
 tolua_beginmodule(tolua_S,"TControlScrollBar");
 tolua_function(tolua_S,"Assign",tolua_z_VCL_TControlScrollBar_Assign00);
 tolua_function(tolua_S,"ChangeBiDiPosition",tolua_z_VCL_TControlScrollBar_ChangeBiDiPosition00);
 tolua_variable(tolua_S,"Kind",tolua_get_TControlScrollBar_Kind,NULL);
 tolua_function(tolua_S,"IsScrollBarVisible",tolua_z_VCL_TControlScrollBar_IsScrollBarVisible00);
 tolua_variable(tolua_S,"ScrollPos",tolua_get_TControlScrollBar_ScrollPos,NULL);
 tolua_variable(tolua_S,"ButtonSize",tolua_get_TControlScrollBar_ButtonSize,tolua_set_TControlScrollBar_ButtonSize);
 tolua_variable(tolua_S,"Color",tolua_get_TControlScrollBar_Color,tolua_set_TControlScrollBar_Color);
 tolua_variable(tolua_S,"Increment",tolua_get_TControlScrollBar_Increment,tolua_set_TControlScrollBar_Increment);
 tolua_variable(tolua_S,"Margin",tolua_get_TControlScrollBar_Margin,tolua_set_TControlScrollBar_Margin);
 tolua_variable(tolua_S,"ParentColor",tolua_get_TControlScrollBar_ParentColor,tolua_set_TControlScrollBar_ParentColor);
 tolua_variable(tolua_S,"Position",tolua_get_TControlScrollBar_Position,tolua_set_TControlScrollBar_Position);
 tolua_variable(tolua_S,"Range",tolua_get_TControlScrollBar_Range,tolua_set_TControlScrollBar_Range);
 tolua_variable(tolua_S,"Smooth",tolua_get_TControlScrollBar_Smooth,tolua_set_TControlScrollBar_Smooth);
 tolua_variable(tolua_S,"Size",tolua_get_TControlScrollBar_Size,tolua_set_TControlScrollBar_Size);
 tolua_variable(tolua_S,"Style",tolua_get_TControlScrollBar_Style,tolua_set_TControlScrollBar_Style);
 tolua_variable(tolua_S,"ThumbSize",tolua_get_TControlScrollBar_ThumbSize,tolua_set_TControlScrollBar_ThumbSize);
 tolua_variable(tolua_S,"Tracking",tolua_get_TControlScrollBar_Tracking,tolua_set_TControlScrollBar_Tracking);
 tolua_variable(tolua_S,"Visible",tolua_get_TControlScrollBar_Visible,tolua_set_TControlScrollBar_Visible);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TControlScrollBar_delete00);
 tolua_function(tolua_S,"new",tolua_z_VCL_TControlScrollBar_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TControlScrollBar_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TControlScrollBar_new00_local);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TSizeConstraints","TSizeConstraints","TPersistent",tolua_collect_TSizeConstraints);
#else
 tolua_cclass(tolua_S,"TSizeConstraints","TSizeConstraints","TPersistent",NULL);
#endif
 tolua_beginmodule(tolua_S,"TSizeConstraints");
 tolua_function(tolua_S,"new",tolua_z_VCL_TSizeConstraints_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TSizeConstraints_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TSizeConstraints_new00_local);
 tolua_variable(tolua_S,"MaxHeight",tolua_get_TSizeConstraints_MaxHeight,tolua_set_TSizeConstraints_MaxHeight);
 tolua_variable(tolua_S,"MaxWidth",tolua_get_TSizeConstraints_MaxWidth,tolua_set_TSizeConstraints_MaxWidth);
 tolua_variable(tolua_S,"MinHeight",tolua_get_TSizeConstraints_MinHeight,tolua_set_TSizeConstraints_MinHeight);
 tolua_variable(tolua_S,"MinWidth",tolua_get_TSizeConstraints_MinWidth,tolua_set_TSizeConstraints_MinWidth);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TSizeConstraints_delete00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TComponent","TComponent","TPersistent",tolua_collect_TComponent);
#else
 tolua_cclass(tolua_S,"TComponent","TComponent","TPersistent",NULL);
#endif
 tolua_beginmodule(tolua_S,"TComponent");
 tolua_variable(tolua_S,"Name",tolua_get_TComponent_Name,tolua_set_TComponent_Name);
 tolua_variable(tolua_S,"Tag",tolua_get_TComponent_Tag,tolua_set_TComponent_Tag);
 tolua_function(tolua_S,"new",tolua_z_VCL_TComponent_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TComponent_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TComponent_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TComponent_delete00);
 tolua_function(tolua_S,"ExecuteAction",tolua_z_VCL_TComponent_ExecuteAction00);
 tolua_function(tolua_S,"HasParent",tolua_z_VCL_TComponent_HasParent00);
 tolua_function(tolua_S,"UpdateAction",tolua_z_VCL_TComponent_UpdateAction00);
 tolua_array(tolua_S,"Components",tolua_get_z_VCL_TComponent_Components,NULL);
 tolua_variable(tolua_S,"ComponentCount",tolua_get_TComponent_ComponentCount,NULL);
 tolua_variable(tolua_S,"ComponentIndex",tolua_get_TComponent_ComponentIndex,tolua_set_TComponent_ComponentIndex);
 tolua_variable(tolua_S,"ComponentState",tolua_get_TComponent_ComponentState,NULL);
 tolua_variable(tolua_S,"ComponentStyle",tolua_get_TComponent_ComponentStyle,NULL);
 tolua_variable(tolua_S,"DesignInfo",tolua_get_TComponent_DesignInfo,tolua_set_TComponent_DesignInfo);
 tolua_variable(tolua_S,"Owner",tolua_get_TComponent_Owner_ptr,NULL);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TMenuItem","TMenuItem","TComponent",tolua_collect_TMenuItem);
#else
 tolua_cclass(tolua_S,"TMenuItem","TMenuItem","TComponent",NULL);
#endif
 tolua_beginmodule(tolua_S,"TMenuItem");
 tolua_function(tolua_S,".geti",tolua_z_VCL_TMenuItem__geti00);
 tolua_function(tolua_S,"new",tolua_z_VCL_TMenuItem_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TMenuItem_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TMenuItem_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TMenuItem_delete00);
 tolua_function(tolua_S,"InitiateAction",tolua_z_VCL_TMenuItem_InitiateAction00);
 tolua_function(tolua_S,"Insert",tolua_z_VCL_TMenuItem_Insert00);
 tolua_function(tolua_S,"Delete",tolua_z_VCL_TMenuItem_Delete00);
 tolua_function(tolua_S,"Clear",tolua_z_VCL_TMenuItem_Clear00);
 tolua_function(tolua_S,"Click",tolua_z_VCL_TMenuItem_Click00);
 tolua_function(tolua_S,"Find",tolua_z_VCL_TMenuItem_Find00);
 tolua_function(tolua_S,"IndexOf",tolua_z_VCL_TMenuItem_IndexOf00);
 tolua_function(tolua_S,"IsLine",tolua_z_VCL_TMenuItem_IsLine00);
 tolua_function(tolua_S,"GetImageList",tolua_z_VCL_TMenuItem_GetImageList00);
 tolua_function(tolua_S,"GetParentComponent",tolua_z_VCL_TMenuItem_GetParentComponent00);
 tolua_function(tolua_S,"GetParentMenu",tolua_z_VCL_TMenuItem_GetParentMenu00);
 tolua_function(tolua_S,"HasParent",tolua_z_VCL_TMenuItem_HasParent00);
 tolua_function(tolua_S,"NewTopLine",tolua_z_VCL_TMenuItem_NewTopLine00);
 tolua_function(tolua_S,"NewBottomLine",tolua_z_VCL_TMenuItem_NewBottomLine00);
 tolua_function(tolua_S,"InsertNewLineBefore",tolua_z_VCL_TMenuItem_InsertNewLineBefore00);
 tolua_function(tolua_S,"InsertNewLineAfter",tolua_z_VCL_TMenuItem_InsertNewLineAfter00);
 tolua_function(tolua_S,"Add",tolua_z_VCL_TMenuItem_Add00);
 tolua_function(tolua_S,"Add",tolua_z_VCL_TMenuItem_Add01);
 tolua_function(tolua_S,"Remove",tolua_z_VCL_TMenuItem_Remove00);
 tolua_function(tolua_S,"RethinkHotkeys",tolua_z_VCL_TMenuItem_RethinkHotkeys00);
 tolua_function(tolua_S,"RethinkLines",tolua_z_VCL_TMenuItem_RethinkLines00);
 tolua_variable(tolua_S,"Command",tolua_get_TMenuItem_Command,NULL);
 tolua_variable(tolua_S,"Count",tolua_get_TMenuItem_Count,NULL);
 tolua_array(tolua_S,"Items",tolua_get_z_VCL_TMenuItem_Items,NULL);
 tolua_variable(tolua_S,"MenuIndex",tolua_get_TMenuItem_MenuIndex,tolua_set_TMenuItem_MenuIndex);
 tolua_variable(tolua_S,"Parent",tolua_get_TMenuItem_Parent_ptr,NULL);
 tolua_variable(tolua_S,"Action",tolua_get_TMenuItem_Action_ptr,tolua_set_TMenuItem_Action_ptr);
 tolua_variable(tolua_S,"AutoCheck",tolua_get_TMenuItem_AutoCheck,tolua_set_TMenuItem_AutoCheck);
 tolua_variable(tolua_S,"AutoHotkeys",tolua_get_TMenuItem_AutoHotkeys,tolua_set_TMenuItem_AutoHotkeys);
 tolua_variable(tolua_S,"AutoLineReduction",tolua_get_TMenuItem_AutoLineReduction,tolua_set_TMenuItem_AutoLineReduction);
 tolua_variable(tolua_S,"Bitmap",tolua_get_TMenuItem_Bitmap_ptr,tolua_set_TMenuItem_Bitmap_ptr);
 tolua_variable(tolua_S,"Break",tolua_get_TMenuItem_Break,tolua_set_TMenuItem_Break);
 tolua_variable(tolua_S,"Caption",tolua_get_TMenuItem_Caption,tolua_set_TMenuItem_Caption);
 tolua_variable(tolua_S,"Checked",tolua_get_TMenuItem_Checked,tolua_set_TMenuItem_Checked);
 tolua_variable(tolua_S,"SubMenuImages",tolua_get_TMenuItem_SubMenuImages_ptr,tolua_set_TMenuItem_SubMenuImages_ptr);
 tolua_variable(tolua_S,"Default",tolua_get_TMenuItem_Default,tolua_set_TMenuItem_Default);
 tolua_variable(tolua_S,"Enabled",tolua_get_TMenuItem_Enabled,tolua_set_TMenuItem_Enabled);
 tolua_variable(tolua_S,"GroupIndex",tolua_get_TMenuItem_GroupIndex,tolua_set_TMenuItem_GroupIndex);
 tolua_variable(tolua_S,"HelpContext",tolua_get_TMenuItem_HelpContext,tolua_set_TMenuItem_HelpContext);
 tolua_variable(tolua_S,"Hint",tolua_get_TMenuItem_Hint,tolua_set_TMenuItem_Hint);
 tolua_variable(tolua_S,"ImageIndex",tolua_get_TMenuItem_ImageIndex,tolua_set_TMenuItem_ImageIndex);
 tolua_variable(tolua_S,"RadioItem",tolua_get_TMenuItem_RadioItem,tolua_set_TMenuItem_RadioItem);
 tolua_variable(tolua_S,"ShortCut",tolua_get_TMenuItem_ShortCut,tolua_set_TMenuItem_ShortCut);
 tolua_variable(tolua_S,"Visible",tolua_get_TMenuItem_Visible,tolua_set_TMenuItem_Visible);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TMenu","TMenu","TComponent",tolua_collect_TMenu);
#else
 tolua_cclass(tolua_S,"TMenu","TMenu","TComponent",NULL);
#endif
 tolua_beginmodule(tolua_S,"TMenu");
 tolua_function(tolua_S,"new",tolua_z_VCL_TMenu_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TMenu_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TMenu_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TMenu_delete00);
 tolua_function(tolua_S,"DispatchCommand",tolua_z_VCL_TMenu_DispatchCommand00);
 tolua_function(tolua_S,"FindItem",tolua_z_VCL_TMenu_FindItem00);
 tolua_function(tolua_S,"GetHelpContext",tolua_z_VCL_TMenu_GetHelpContext00);
 tolua_variable(tolua_S,"Images",tolua_get_TMenu_Images_ptr,tolua_set_TMenu_Images_ptr);
 tolua_function(tolua_S,"IsRightToLeft",tolua_z_VCL_TMenu_IsRightToLeft00);
 tolua_function(tolua_S,"IsShortCut",tolua_z_VCL_TMenu_IsShortCut00);
 tolua_function(tolua_S,"ParentBiDiModeChanged",tolua_z_VCL_TMenu_ParentBiDiModeChanged00);
 tolua_function(tolua_S,"ParentBiDiModeChanged",tolua_z_VCL_TMenu_ParentBiDiModeChanged01);
 tolua_function(tolua_S,"ProcessMenuChar",tolua_z_VCL_TMenu_ProcessMenuChar00);
 tolua_variable(tolua_S,"AutoHotkeys",tolua_get_TMenu_AutoHotkeys,tolua_set_TMenu_AutoHotkeys);
 tolua_variable(tolua_S,"AutoLineReduction",tolua_get_TMenu_AutoLineReduction,tolua_set_TMenu_AutoLineReduction);
 tolua_variable(tolua_S,"BiDiMode",tolua_get_TMenu_BiDiMode,tolua_set_TMenu_BiDiMode);
 tolua_variable(tolua_S,"OwnerDraw",tolua_get_TMenu_OwnerDraw,tolua_set_TMenu_OwnerDraw);
 tolua_variable(tolua_S,"ParentBiDiMode",tolua_get_TMenu_ParentBiDiMode,tolua_set_TMenu_ParentBiDiMode);
 tolua_variable(tolua_S,"Items",tolua_get_TMenu_Items_ptr,NULL);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TPopupMenu","TPopupMenu","TMenu",tolua_collect_TPopupMenu);
#else
 tolua_cclass(tolua_S,"TPopupMenu","TPopupMenu","TMenu",NULL);
#endif
 tolua_beginmodule(tolua_S,"TPopupMenu");
 tolua_function(tolua_S,"new",tolua_z_VCL_TPopupMenu_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TPopupMenu_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TPopupMenu_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TPopupMenu_delete00);
 tolua_function(tolua_S,"Popup",tolua_z_VCL_TPopupMenu_Popup00);
 tolua_variable(tolua_S,"PopupComponent",tolua_get_TPopupMenu_PopupComponent_ptr,tolua_set_TPopupMenu_PopupComponent_ptr);
 tolua_variable(tolua_S,"PopupPoint",tolua_get_TPopupMenu_PopupPoint,NULL);
 tolua_variable(tolua_S,"Alignment",tolua_get_TPopupMenu_Alignment,tolua_set_TPopupMenu_Alignment);
 tolua_variable(tolua_S,"AutoPopup",tolua_get_TPopupMenu_AutoPopup,tolua_set_TPopupMenu_AutoPopup);
 tolua_variable(tolua_S,"HelpContext",tolua_get_TPopupMenu_HelpContext,tolua_set_TPopupMenu_HelpContext);
 tolua_variable(tolua_S,"MenuAnimation",tolua_get_TPopupMenu_MenuAnimation,tolua_set_TPopupMenu_MenuAnimation);
 tolua_variable(tolua_S,"TrackButton",tolua_get_TPopupMenu_TrackButton,tolua_set_TPopupMenu_TrackButton);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TMainMenu","TMainMenu","TMenu",tolua_collect_TMainMenu);
#else
 tolua_cclass(tolua_S,"TMainMenu","TMainMenu","TMenu",NULL);
#endif
 tolua_beginmodule(tolua_S,"TMainMenu");
 tolua_function(tolua_S,"Merge",tolua_z_VCL_TMainMenu_Merge00);
 tolua_function(tolua_S,"Unmerge",tolua_z_VCL_TMainMenu_Unmerge00);
 tolua_variable(tolua_S,"AutoMerge",tolua_get_TMainMenu_AutoMerge,tolua_set_TMainMenu_AutoMerge);
 tolua_function(tolua_S,"new",tolua_z_VCL_TMainMenu_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TMainMenu_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TMainMenu_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TMainMenu_delete00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TCustomImageList","TCustomImageList","TComponent",tolua_collect_TCustomImageList);
#else
 tolua_cclass(tolua_S,"TCustomImageList","TCustomImageList","TComponent",NULL);
#endif
 tolua_beginmodule(tolua_S,"TCustomImageList");
 tolua_function(tolua_S,"new",tolua_z_VCL_TCustomImageList_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TCustomImageList_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TCustomImageList_new00_local);
 tolua_function(tolua_S,"new",tolua_z_VCL_TCustomImageList_new01);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TCustomImageList_new01_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TCustomImageList_new01_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TCustomImageList_delete00);
 tolua_function(tolua_S,"Assign",tolua_z_VCL_TCustomImageList_Assign00);
 tolua_function(tolua_S,"Add",tolua_z_VCL_TCustomImageList_Add00);
 tolua_function(tolua_S,"AddIcon",tolua_z_VCL_TCustomImageList_AddIcon00);
 tolua_function(tolua_S,"AddImages",tolua_z_VCL_TCustomImageList_AddImages00);
 tolua_function(tolua_S,"AddMasked",tolua_z_VCL_TCustomImageList_AddMasked00);
 tolua_function(tolua_S,"Clear",tolua_z_VCL_TCustomImageList_Clear00);
 tolua_function(tolua_S,"Delete",tolua_z_VCL_TCustomImageList_Delete00);
 tolua_function(tolua_S,"Draw",tolua_z_VCL_TCustomImageList_Draw00);
 tolua_function(tolua_S,"Draw",tolua_z_VCL_TCustomImageList_Draw01);
 tolua_function(tolua_S,"DrawOverlay",tolua_z_VCL_TCustomImageList_DrawOverlay00);
 tolua_function(tolua_S,"DrawOverlay",tolua_z_VCL_TCustomImageList_DrawOverlay01);
 tolua_function(tolua_S,"FileLoad",tolua_z_VCL_TCustomImageList_FileLoad00);
 tolua_function(tolua_S,"GetBitmap",tolua_z_VCL_TCustomImageList_GetBitmap00);
 tolua_function(tolua_S,"GetHotSpot",tolua_z_VCL_TCustomImageList_GetHotSpot00);
 tolua_function(tolua_S,"GetIcon",tolua_z_VCL_TCustomImageList_GetIcon00);
 tolua_function(tolua_S,"GetIcon",tolua_z_VCL_TCustomImageList_GetIcon01);
 tolua_function(tolua_S,"GetResource",tolua_z_VCL_TCustomImageList_GetResource00);
 tolua_function(tolua_S,"GetInstRes",tolua_z_VCL_TCustomImageList_GetInstRes00);
 tolua_function(tolua_S,"GetInstRes",tolua_z_VCL_TCustomImageList_GetInstRes01);
 tolua_function(tolua_S,"HandleAllocated",tolua_z_VCL_TCustomImageList_HandleAllocated00);
 tolua_function(tolua_S,"Insert",tolua_z_VCL_TCustomImageList_Insert00);
 tolua_function(tolua_S,"InsertIcon",tolua_z_VCL_TCustomImageList_InsertIcon00);
 tolua_function(tolua_S,"InsertMasked",tolua_z_VCL_TCustomImageList_InsertMasked00);
 tolua_function(tolua_S,"Move",tolua_z_VCL_TCustomImageList_Move00);
 tolua_function(tolua_S,"Overlay",tolua_z_VCL_TCustomImageList_Overlay00);
 tolua_function(tolua_S,"RegisterChanges",tolua_z_VCL_TCustomImageList_RegisterChanges00);
 tolua_function(tolua_S,"ResourceLoad",tolua_z_VCL_TCustomImageList_ResourceLoad00);
 tolua_function(tolua_S,"ResInstLoad",tolua_z_VCL_TCustomImageList_ResInstLoad00);
 tolua_function(tolua_S,"Replace",tolua_z_VCL_TCustomImageList_Replace00);
 tolua_function(tolua_S,"ReplaceIcon",tolua_z_VCL_TCustomImageList_ReplaceIcon00);
 tolua_function(tolua_S,"ReplaceMasked",tolua_z_VCL_TCustomImageList_ReplaceMasked00);
 tolua_function(tolua_S,"UnRegisterChanges",tolua_z_VCL_TCustomImageList_UnRegisterChanges00);
 tolua_variable(tolua_S,"Count",tolua_get_TCustomImageList_Count,NULL);
 tolua_variable(tolua_S,"Handle",tolua_get_TCustomImageList_Handle,tolua_set_TCustomImageList_Handle);
 tolua_variable(tolua_S,"AllocBy",tolua_get_TCustomImageList_AllocBy,tolua_set_TCustomImageList_AllocBy);
 tolua_variable(tolua_S,"BlendColor",tolua_get_TCustomImageList_BlendColor,tolua_set_TCustomImageList_BlendColor);
 tolua_variable(tolua_S,"BkColor",tolua_get_TCustomImageList_BkColor,tolua_set_TCustomImageList_BkColor);
 tolua_variable(tolua_S,"DrawingStyle",tolua_get_TCustomImageList_DrawingStyle,tolua_set_TCustomImageList_DrawingStyle);
 tolua_variable(tolua_S,"Height",tolua_get_TCustomImageList_Height,tolua_set_TCustomImageList_Height);
 tolua_variable(tolua_S,"ImageType",tolua_get_TCustomImageList_ImageType,tolua_set_TCustomImageList_ImageType);
 tolua_variable(tolua_S,"Masked",tolua_get_TCustomImageList_Masked,tolua_set_TCustomImageList_Masked);
 tolua_variable(tolua_S,"ShareImages",tolua_get_TCustomImageList_ShareImages,tolua_set_TCustomImageList_ShareImages);
 tolua_variable(tolua_S,"Width",tolua_get_TCustomImageList_Width,tolua_set_TCustomImageList_Width);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TBasicAction","TBasicAction","TComponent",tolua_collect_TBasicAction);
#else
 tolua_cclass(tolua_S,"TBasicAction","TBasicAction","TComponent",NULL);
#endif
 tolua_beginmodule(tolua_S,"TBasicAction");
 tolua_function(tolua_S,"new",tolua_z_VCL_TBasicAction_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TBasicAction_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TBasicAction_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TBasicAction_delete00);
 tolua_function(tolua_S,"HandlesTarget",tolua_z_VCL_TBasicAction_HandlesTarget00);
 tolua_function(tolua_S,"UpdateTarget",tolua_z_VCL_TBasicAction_UpdateTarget00);
 tolua_function(tolua_S,"ExecuteTarget",tolua_z_VCL_TBasicAction_ExecuteTarget00);
 tolua_function(tolua_S,"Execute",tolua_z_VCL_TBasicAction_Execute00);
 tolua_function(tolua_S,"RegisterChanges",tolua_z_VCL_TBasicAction_RegisterChanges00);
 tolua_function(tolua_S,"UnRegisterChanges",tolua_z_VCL_TBasicAction_UnRegisterChanges00);
 tolua_function(tolua_S,"Update",tolua_z_VCL_TBasicAction_Update00);
 tolua_variable(tolua_S,"ActionComponent",tolua_get_TBasicAction_ActionComponent_ptr,tolua_set_TBasicAction_ActionComponent_ptr);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TControl","TControl","TComponent",tolua_collect_TControl);
#else
 tolua_cclass(tolua_S,"TControl","TControl","TComponent",NULL);
#endif
 tolua_beginmodule(tolua_S,"TControl");
 tolua_variable(tolua_S,"Left",tolua_get_TControl_Left,tolua_set_TControl_Left);
 tolua_variable(tolua_S,"Top",tolua_get_TControl_Top,tolua_set_TControl_Top);
 tolua_variable(tolua_S,"Width",tolua_get_TControl_Width,tolua_set_TControl_Width);
 tolua_variable(tolua_S,"Height",tolua_get_TControl_Height,tolua_set_TControl_Height);
 tolua_variable(tolua_S,"Cursor",tolua_get_TControl_Cursor,tolua_set_TControl_Cursor);
 tolua_variable(tolua_S,"Hint",tolua_get_TControl_Hint,tolua_set_TControl_Hint);
 tolua_variable(tolua_S,"HelpType",tolua_get_TControl_HelpType,tolua_set_TControl_HelpType);
 tolua_variable(tolua_S,"HelpKeyword",tolua_get_TControl_HelpKeyword,tolua_set_TControl_HelpKeyword);
 tolua_variable(tolua_S,"HelpContext",tolua_get_TControl_HelpContext,tolua_set_TControl_HelpContext);
 tolua_function(tolua_S,"new",tolua_z_VCL_TControl_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TControl_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TControl_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TControl_delete00);
 tolua_function(tolua_S,"BeginDrag",tolua_z_VCL_TControl_BeginDrag00);
 tolua_function(tolua_S,"BringToFront",tolua_z_VCL_TControl_BringToFront00);
 tolua_function(tolua_S,"ClientToScreen",tolua_z_VCL_TControl_ClientToScreen00);
 tolua_function(tolua_S,"ClientToParent",tolua_z_VCL_TControl_ClientToParent00);
 tolua_function(tolua_S,"Dock",tolua_z_VCL_TControl_Dock00);
 tolua_function(tolua_S,"DefaultHandler",tolua_z_VCL_TControl_DefaultHandler00);
 tolua_function(tolua_S,"Dragging",tolua_z_VCL_TControl_Dragging00);
 tolua_function(tolua_S,"DragDrop",tolua_z_VCL_TControl_DragDrop00);
 tolua_function(tolua_S,"DrawTextBiDiModeFlags",tolua_z_VCL_TControl_DrawTextBiDiModeFlags00);
 tolua_function(tolua_S,"DrawTextBiDiModeFlagsReadingOnly",tolua_z_VCL_TControl_DrawTextBiDiModeFlagsReadingOnly00);
 tolua_variable(tolua_S,"Enabled",tolua_get_TControl_Enabled,tolua_set_TControl_Enabled);
 tolua_function(tolua_S,"EndDrag",tolua_z_VCL_TControl_EndDrag00);
 tolua_function(tolua_S,"GetControlsAlignment",tolua_z_VCL_TControl_GetControlsAlignment00);
 tolua_function(tolua_S,"GetParentComponent",tolua_z_VCL_TControl_GetParentComponent00);
 tolua_function(tolua_S,"GetTextBuf",tolua_z_VCL_TControl_GetTextBuf00);
 tolua_function(tolua_S,"GetTextLen",tolua_z_VCL_TControl_GetTextLen00);
 tolua_function(tolua_S,"HasParent",tolua_z_VCL_TControl_HasParent00);
 tolua_function(tolua_S,"Hide",tolua_z_VCL_TControl_Hide00);
 tolua_function(tolua_S,"InitiateAction",tolua_z_VCL_TControl_InitiateAction00);
 tolua_function(tolua_S,"Invalidate",tolua_z_VCL_TControl_Invalidate00);
 tolua_function(tolua_S,"MouseWheelHandler",tolua_z_VCL_TControl_MouseWheelHandler00);
 tolua_function(tolua_S,"IsRightToLeft",tolua_z_VCL_TControl_IsRightToLeft00);
 tolua_function(tolua_S,"ManualDock",tolua_z_VCL_TControl_ManualDock00);
 tolua_function(tolua_S,"ManualDock",tolua_z_VCL_TControl_ManualDock01);
 tolua_function(tolua_S,"ManualFloat",tolua_z_VCL_TControl_ManualFloat00);
 tolua_function(tolua_S,"Perform",tolua_z_VCL_TControl_Perform00);
 tolua_function(tolua_S,"Refresh",tolua_z_VCL_TControl_Refresh00);
 tolua_function(tolua_S,"Repaint",tolua_z_VCL_TControl_Repaint00);
 tolua_function(tolua_S,"ReplaceDockedControl",tolua_z_VCL_TControl_ReplaceDockedControl00);
 tolua_function(tolua_S,"ScreenToClient",tolua_z_VCL_TControl_ScreenToClient00);
 tolua_function(tolua_S,"ParentToClient",tolua_z_VCL_TControl_ParentToClient00);
 tolua_function(tolua_S,"SendToBack",tolua_z_VCL_TControl_SendToBack00);
 tolua_function(tolua_S,"SetBounds",tolua_z_VCL_TControl_SetBounds00);
 tolua_function(tolua_S,"SetTextBuf",tolua_z_VCL_TControl_SetTextBuf00);
 tolua_function(tolua_S,"Show",tolua_z_VCL_TControl_Show00);
 tolua_function(tolua_S,"Update",tolua_z_VCL_TControl_Update00);
 tolua_function(tolua_S,"UseRightToLeftAlignment",tolua_z_VCL_TControl_UseRightToLeftAlignment00);
 tolua_function(tolua_S,"UseRightToLeftReading",tolua_z_VCL_TControl_UseRightToLeftReading00);
 tolua_function(tolua_S,"UseRightToLeftScrollBar",tolua_z_VCL_TControl_UseRightToLeftScrollBar00);
 tolua_variable(tolua_S,"Action",tolua_get_TControl_Action_ptr,tolua_set_TControl_Action_ptr);
 tolua_variable(tolua_S,"Align",tolua_get_TControl_Align,tolua_set_TControl_Align);
 tolua_variable(tolua_S,"Anchors",tolua_get_TControl_Anchors,tolua_set_TControl_Anchors);
 tolua_variable(tolua_S,"BiDiMode",tolua_get_TControl_BiDiMode,tolua_set_TControl_BiDiMode);
 tolua_variable(tolua_S,"BoundsRect",tolua_get_TControl_BoundsRect,tolua_set_TControl_BoundsRect);
 tolua_variable(tolua_S,"ClientHeight",tolua_get_TControl_ClientHeight,tolua_set_TControl_ClientHeight);
 tolua_variable(tolua_S,"ClientOrigin",tolua_get_TControl_ClientOrigin,NULL);
 tolua_variable(tolua_S,"ClientRect",tolua_get_TControl_ClientRect,NULL);
 tolua_variable(tolua_S,"ClientWidth",tolua_get_TControl_ClientWidth,tolua_set_TControl_ClientWidth);
 tolua_variable(tolua_S,"Constraints",tolua_get_TControl_Constraints_ptr,tolua_set_TControl_Constraints_ptr);
 tolua_variable(tolua_S,"ControlState",tolua_get_TControl_ControlState,tolua_set_TControl_ControlState);
 tolua_variable(tolua_S,"ControlStyle",tolua_get_TControl_ControlStyle,tolua_set_TControl_ControlStyle);
 tolua_variable(tolua_S,"DockOrientation",tolua_get_TControl_DockOrientation,tolua_set_TControl_DockOrientation);
 tolua_variable(tolua_S,"Floating",tolua_get_TControl_Floating,NULL);
 tolua_variable(tolua_S,"FloatingDockSiteClass",tolua_get_TControl_FloatingDockSiteClass_ptr,tolua_set_TControl_FloatingDockSiteClass_ptr);
 tolua_variable(tolua_S,"HostDockSite",tolua_get_TControl_HostDockSite_ptr,tolua_set_TControl_HostDockSite_ptr);
 tolua_variable(tolua_S,"LRDockWidth",tolua_get_TControl_LRDockWidth,tolua_set_TControl_LRDockWidth);
 tolua_variable(tolua_S,"Parent",tolua_get_TControl_Parent_ptr,tolua_set_TControl_Parent_ptr);
 tolua_variable(tolua_S,"ShowHint",tolua_get_TControl_ShowHint,tolua_set_TControl_ShowHint);
 tolua_variable(tolua_S,"TBDockHeight",tolua_get_TControl_TBDockHeight,tolua_set_TControl_TBDockHeight);
 tolua_variable(tolua_S,"UndockHeight",tolua_get_TControl_UndockHeight,tolua_set_TControl_UndockHeight);
 tolua_variable(tolua_S,"UndockWidth",tolua_get_TControl_UndockWidth,tolua_set_TControl_UndockWidth);
 tolua_variable(tolua_S,"Visible",tolua_get_TControl_Visible,tolua_set_TControl_Visible);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TGraphicControl","TGraphicControl","TControl",tolua_collect_TGraphicControl);
#else
 tolua_cclass(tolua_S,"TGraphicControl","TGraphicControl","TControl",NULL);
#endif
 tolua_beginmodule(tolua_S,"TGraphicControl");
 tolua_function(tolua_S,"new",tolua_z_VCL_TGraphicControl_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TGraphicControl_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TGraphicControl_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TGraphicControl_delete00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TImage","TImage","TGraphicControl",tolua_collect_TImage);
#else
 tolua_cclass(tolua_S,"TImage","TImage","TGraphicControl",NULL);
#endif
 tolua_beginmodule(tolua_S,"TImage");
 tolua_function(tolua_S,"new",tolua_z_VCL_TImage_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TImage_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TImage_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TImage_delete00);
 tolua_variable(tolua_S,"Canvas",tolua_get_TImage_Canvas_ptr,NULL);
 tolua_variable(tolua_S,"Center",tolua_get_TImage_Center,tolua_set_TImage_Center);
 tolua_variable(tolua_S,"IncrementalDisplay",tolua_get_TImage_IncrementalDisplay,tolua_set_TImage_IncrementalDisplay);
 tolua_variable(tolua_S,"Picture",tolua_get_TImage_Picture_ptr,tolua_set_TImage_Picture_ptr);
 tolua_variable(tolua_S,"Proportional",tolua_get_TImage_Proportional,tolua_set_TImage_Proportional);
 tolua_variable(tolua_S,"Stretch",tolua_get_TImage_Stretch,tolua_set_TImage_Stretch);
 tolua_variable(tolua_S,"Transparent",tolua_get_TImage_Transparent,tolua_set_TImage_Transparent);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TWinControl","TWinControl","TControl",tolua_collect_TWinControl);
#else
 tolua_cclass(tolua_S,"TWinControl","TWinControl","TControl",NULL);
#endif
 tolua_beginmodule(tolua_S,"TWinControl");
 tolua_function(tolua_S,"new",tolua_z_VCL_TWinControl_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TWinControl_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TWinControl_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TWinControl_delete00);
 tolua_function(tolua_S,"Broadcast",tolua_z_VCL_TWinControl_Broadcast00);
 tolua_function(tolua_S,"CanFocus",tolua_z_VCL_TWinControl_CanFocus00);
 tolua_function(tolua_S,"ContainsControl",tolua_z_VCL_TWinControl_ContainsControl00);
 tolua_function(tolua_S,"ControlAtPos",tolua_z_VCL_TWinControl_ControlAtPos00);
 tolua_function(tolua_S,"DefaultHandler",tolua_z_VCL_TWinControl_DefaultHandler00);
 tolua_function(tolua_S,"DisableAlign",tolua_z_VCL_TWinControl_DisableAlign00);
 tolua_variable(tolua_S,"DockClientCount",tolua_get_TWinControl_DockClientCount,NULL);
 tolua_array(tolua_S,"DockClients",tolua_get_z_VCL_TWinControl_DockClients,NULL);
 tolua_function(tolua_S,"DockDrop",tolua_z_VCL_TWinControl_DockDrop00);
 tolua_variable(tolua_S,"DoubleBuffered",tolua_get_TWinControl_DoubleBuffered,tolua_set_TWinControl_DoubleBuffered);
 tolua_function(tolua_S,"EnableAlign",tolua_z_VCL_TWinControl_EnableAlign00);
 tolua_function(tolua_S,"FindChildControl",tolua_z_VCL_TWinControl_FindChildControl00);
 tolua_function(tolua_S,"FlipChildren",tolua_z_VCL_TWinControl_FlipChildren00);
 tolua_function(tolua_S,"Focused",tolua_z_VCL_TWinControl_Focused00);
 tolua_function(tolua_S,"InsertControl",tolua_z_VCL_TWinControl_InsertControl00);
 tolua_function(tolua_S,"Invalidate",tolua_z_VCL_TWinControl_Invalidate00);
 tolua_function(tolua_S,"PaintTo",tolua_z_VCL_TWinControl_PaintTo00);
 tolua_function(tolua_S,"RemoveControl",tolua_z_VCL_TWinControl_RemoveControl00);
 tolua_function(tolua_S,"Realign",tolua_z_VCL_TWinControl_Realign00);
 tolua_function(tolua_S,"Repaint",tolua_z_VCL_TWinControl_Repaint00);
 tolua_function(tolua_S,"ScaleBy",tolua_z_VCL_TWinControl_ScaleBy00);
 tolua_function(tolua_S,"ScrollBy",tolua_z_VCL_TWinControl_ScrollBy00);
 tolua_function(tolua_S,"SetBounds",tolua_z_VCL_TWinControl_SetBounds00);
 tolua_function(tolua_S,"SetFocus",tolua_z_VCL_TWinControl_SetFocus00);
 tolua_function(tolua_S,"Update",tolua_z_VCL_TWinControl_Update00);
 tolua_function(tolua_S,"UpdateControlState",tolua_z_VCL_TWinControl_UpdateControlState00);
 tolua_variable(tolua_S,"AlignDisabled",tolua_get_TWinControl_AlignDisabled,NULL);
 tolua_variable(tolua_S,"VisibleDockClientCount",tolua_get_TWinControl_VisibleDockClientCount,NULL);
 tolua_variable(tolua_S,"Brush",tolua_get_TWinControl_Brush_ptr,NULL);
 tolua_array(tolua_S,"Controls",tolua_get_z_VCL_TWinControl_Controls,NULL);
 tolua_variable(tolua_S,"ControlCount",tolua_get_TWinControl_ControlCount,NULL);
 tolua_variable(tolua_S,"Showing",tolua_get_TWinControl_Showing,NULL);
 tolua_variable(tolua_S,"TabOrder",tolua_get_TWinControl_TabOrder,tolua_set_TWinControl_TabOrder);
 tolua_variable(tolua_S,"TabStop",tolua_get_TWinControl_TabStop,tolua_set_TWinControl_TabStop);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TCustomListControl","TCustomListControl","TWinControl",tolua_collect_TCustomListControl);
#else
 tolua_cclass(tolua_S,"TCustomListControl","TCustomListControl","TWinControl",NULL);
#endif
 tolua_beginmodule(tolua_S,"TCustomListControl");
 tolua_function(tolua_S,"AddItem",tolua_z_VCL_TCustomListControl_AddItem00);
 tolua_function(tolua_S,"Clear",tolua_z_VCL_TCustomListControl_Clear00);
 tolua_function(tolua_S,"ClearSelection",tolua_z_VCL_TCustomListControl_ClearSelection00);
 tolua_function(tolua_S,"CopySelection",tolua_z_VCL_TCustomListControl_CopySelection00);
 tolua_function(tolua_S,"DeleteSelected",tolua_z_VCL_TCustomListControl_DeleteSelected00);
 tolua_function(tolua_S,"MoveSelection",tolua_z_VCL_TCustomListControl_MoveSelection00);
 tolua_function(tolua_S,"SelectAll",tolua_z_VCL_TCustomListControl_SelectAll00);
 tolua_variable(tolua_S,"ItemIndex",tolua_get_TCustomListControl_ItemIndex,tolua_set_TCustomListControl_ItemIndex);
 tolua_function(tolua_S,"new",tolua_z_VCL_TCustomListControl_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TCustomListControl_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TCustomListControl_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TCustomListControl_delete00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TCustomCombo","TCustomCombo","TCustomListControl",tolua_collect_TCustomCombo);
#else
 tolua_cclass(tolua_S,"TCustomCombo","TCustomCombo","TCustomListControl",NULL);
#endif
 tolua_beginmodule(tolua_S,"TCustomCombo");
 tolua_function(tolua_S,"new",tolua_z_VCL_TCustomCombo_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TCustomCombo_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TCustomCombo_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TCustomCombo_delete00);
 tolua_function(tolua_S,"AddItem",tolua_z_VCL_TCustomCombo_AddItem00);
 tolua_function(tolua_S,"Clear",tolua_z_VCL_TCustomCombo_Clear00);
 tolua_function(tolua_S,"ClearSelection",tolua_z_VCL_TCustomCombo_ClearSelection00);
 tolua_function(tolua_S,"CopySelection",tolua_z_VCL_TCustomCombo_CopySelection00);
 tolua_function(tolua_S,"DeleteSelected",tolua_z_VCL_TCustomCombo_DeleteSelected00);
 tolua_function(tolua_S,"Focused",tolua_z_VCL_TCustomCombo_Focused00);
 tolua_function(tolua_S,"SelectAll",tolua_z_VCL_TCustomCombo_SelectAll00);
 tolua_variable(tolua_S,"Canvas",tolua_get_TCustomCombo_Canvas_ptr,NULL);
 tolua_variable(tolua_S,"DroppedDown",tolua_get_TCustomCombo_DroppedDown,tolua_set_TCustomCombo_DroppedDown);
 tolua_variable(tolua_S,"Items",tolua_get_TCustomCombo_Items_ptr,NULL);
 tolua_variable(tolua_S,"SelLength",tolua_get_TCustomCombo_SelLength,tolua_set_TCustomCombo_SelLength);
 tolua_variable(tolua_S,"SelStart",tolua_get_TCustomCombo_SelStart,tolua_set_TCustomCombo_SelStart);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TCustomMultiSelectListControl","TCustomMultiSelectListControl","TCustomListControl",tolua_collect_TCustomMultiSelectListControl);
#else
 tolua_cclass(tolua_S,"TCustomMultiSelectListControl","TCustomMultiSelectListControl","TCustomListControl",NULL);
#endif
 tolua_beginmodule(tolua_S,"TCustomMultiSelectListControl");
 tolua_variable(tolua_S,"MultiSelect",tolua_get_TCustomMultiSelectListControl_MultiSelect,tolua_set_TCustomMultiSelectListControl_MultiSelect);
 tolua_variable(tolua_S,"SelCount",tolua_get_TCustomMultiSelectListControl_SelCount,NULL);
 tolua_function(tolua_S,"new",tolua_z_VCL_TCustomMultiSelectListControl_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TCustomMultiSelectListControl_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TCustomMultiSelectListControl_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TCustomMultiSelectListControl_delete00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TScrollingWinControl","TScrollingWinControl","TWinControl",tolua_collect_TScrollingWinControl);
#else
 tolua_cclass(tolua_S,"TScrollingWinControl","TScrollingWinControl","TWinControl",NULL);
#endif
 tolua_beginmodule(tolua_S,"TScrollingWinControl");
 tolua_variable(tolua_S,"HorzScrollBar",tolua_get_TScrollingWinControl_HorzScrollBar_ptr,tolua_set_TScrollingWinControl_HorzScrollBar_ptr);
 tolua_variable(tolua_S,"VertScrollBar",tolua_get_TScrollingWinControl_VertScrollBar_ptr,tolua_set_TScrollingWinControl_VertScrollBar_ptr);
 tolua_function(tolua_S,"new",tolua_z_VCL_TScrollingWinControl_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TScrollingWinControl_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TScrollingWinControl_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TScrollingWinControl_delete00);
 tolua_function(tolua_S,"DisableAutoRange",tolua_z_VCL_TScrollingWinControl_DisableAutoRange00);
 tolua_function(tolua_S,"EnableAutoRange",tolua_z_VCL_TScrollingWinControl_EnableAutoRange00);
 tolua_function(tolua_S,"ScrollInView",tolua_z_VCL_TScrollingWinControl_ScrollInView00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TButtonControl","TButtonControl","TWinControl",tolua_collect_TButtonControl);
#else
 tolua_cclass(tolua_S,"TButtonControl","TButtonControl","TWinControl",NULL);
#endif
 tolua_beginmodule(tolua_S,"TButtonControl");
 tolua_function(tolua_S,"new",tolua_z_VCL_TButtonControl_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TButtonControl_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TButtonControl_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TButtonControl_delete00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TCustomControl","TCustomControl","TWinControl",tolua_collect_TCustomControl);
#else
 tolua_cclass(tolua_S,"TCustomControl","TCustomControl","TWinControl",NULL);
#endif
 tolua_beginmodule(tolua_S,"TCustomControl");
 tolua_function(tolua_S,"new",tolua_z_VCL_TCustomControl_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TCustomControl_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TCustomControl_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TCustomControl_delete00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TEdit","TEdit","TWinControl",tolua_collect_TEdit);
#else
 tolua_cclass(tolua_S,"TEdit","TEdit","TWinControl",NULL);
#endif
 tolua_beginmodule(tolua_S,"TEdit");
 tolua_variable(tolua_S,"ParentCtl3D",tolua_get_TEdit_ParentCtl3D,tolua_set_TEdit_ParentCtl3D);
 tolua_variable(tolua_S,"Ctl3D",tolua_get_TEdit_Ctl3D,tolua_set_TEdit_Ctl3D);
 tolua_variable(tolua_S,"Enabled",tolua_get_TEdit_Enabled,tolua_set_TEdit_Enabled);
 tolua_variable(tolua_S,"ParentBiDiMode",tolua_get_TEdit_ParentBiDiMode,tolua_set_TEdit_ParentBiDiMode);
 tolua_variable(tolua_S,"ParentColor",tolua_get_TEdit_ParentColor,tolua_set_TEdit_ParentColor);
 tolua_variable(tolua_S,"ParentFont",tolua_get_TEdit_ParentFont,tolua_set_TEdit_ParentFont);
 tolua_variable(tolua_S,"ParentShowHint",tolua_get_TEdit_ParentShowHint,tolua_set_TEdit_ParentShowHint);
 tolua_variable(tolua_S,"AutoSelect",tolua_get_TEdit_AutoSelect,tolua_set_TEdit_AutoSelect);
 tolua_variable(tolua_S,"AutoSize",tolua_get_TEdit_AutoSize,tolua_set_TEdit_AutoSize);
 tolua_variable(tolua_S,"HideSelection",tolua_get_TEdit_HideSelection,tolua_set_TEdit_HideSelection);
 tolua_variable(tolua_S,"OEMConvert",tolua_get_TEdit_OEMConvert,tolua_set_TEdit_OEMConvert);
 tolua_variable(tolua_S,"ReadOnly",tolua_get_TEdit_ReadOnly,tolua_set_TEdit_ReadOnly);
 tolua_variable(tolua_S,"Modified",tolua_get_TEdit_Modified,tolua_set_TEdit_Modified);
 tolua_variable(tolua_S,"PasswordChar",tolua_get_TEdit_PasswordChar,tolua_set_TEdit_PasswordChar);
 tolua_variable(tolua_S,"MaxLength",tolua_get_TEdit_MaxLength,tolua_set_TEdit_MaxLength);
 tolua_variable(tolua_S,"CharCase",tolua_get_TEdit_CharCase,tolua_set_TEdit_CharCase);
 tolua_variable(tolua_S,"SelText",tolua_get_TEdit_SelText,tolua_set_TEdit_SelText);
 tolua_variable(tolua_S,"Text",tolua_get_TEdit_Text,tolua_set_TEdit_Text);
 tolua_variable(tolua_S,"Font",tolua_get_TEdit_Font_ptr,tolua_set_TEdit_Font_ptr);
 tolua_variable(tolua_S,"PopupMenu",tolua_get_TEdit_PopupMenu_ptr,tolua_set_TEdit_PopupMenu_ptr);
 tolua_variable(tolua_S,"Color",tolua_get_TEdit_Color,tolua_set_TEdit_Color);
 tolua_variable(tolua_S,"DragKind",tolua_get_TEdit_DragKind,tolua_set_TEdit_DragKind);
 tolua_variable(tolua_S,"DragCursor",tolua_get_TEdit_DragCursor,tolua_set_TEdit_DragCursor);
 tolua_variable(tolua_S,"DragMode",tolua_get_TEdit_DragMode,tolua_set_TEdit_DragMode);
 tolua_variable(tolua_S,"BevelEdges",tolua_get_TEdit_BevelEdges,tolua_set_TEdit_BevelEdges);
 tolua_variable(tolua_S,"BevelInner",tolua_get_TEdit_BevelInner,tolua_set_TEdit_BevelInner);
 tolua_variable(tolua_S,"BevelOuter",tolua_get_TEdit_BevelOuter,tolua_set_TEdit_BevelOuter);
 tolua_variable(tolua_S,"BevelKind",tolua_get_TEdit_BevelKind,tolua_set_TEdit_BevelKind);
 tolua_variable(tolua_S,"ImeMode",tolua_get_TEdit_ImeMode,tolua_set_TEdit_ImeMode);
 tolua_variable(tolua_S,"ImeName",tolua_get_TEdit_ImeName,tolua_set_TEdit_ImeName);
 tolua_variable(tolua_S,"CanUndo",tolua_get_TEdit_CanUndo,NULL);
 tolua_function(tolua_S,"new",tolua_z_VCL_TEdit_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TEdit_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TEdit_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TEdit_delete00);
 tolua_function(tolua_S,"Clear",tolua_z_VCL_TEdit_Clear00);
 tolua_function(tolua_S,"ClearSelection",tolua_z_VCL_TEdit_ClearSelection00);
 tolua_function(tolua_S,"CopyToClipboard",tolua_z_VCL_TEdit_CopyToClipboard00);
 tolua_function(tolua_S,"CutToClipboard",tolua_z_VCL_TEdit_CutToClipboard00);
 tolua_function(tolua_S,"DefaultHandler",tolua_z_VCL_TEdit_DefaultHandler00);
 tolua_function(tolua_S,"PasteFromClipboard",tolua_z_VCL_TEdit_PasteFromClipboard00);
 tolua_function(tolua_S,"Undo",tolua_z_VCL_TEdit_Undo00);
 tolua_function(tolua_S,"ClearUndo",tolua_z_VCL_TEdit_ClearUndo00);
 tolua_function(tolua_S,"GetSelTextBuf",tolua_z_VCL_TEdit_GetSelTextBuf00);
 tolua_function(tolua_S,"SelectAll",tolua_z_VCL_TEdit_SelectAll00);
 tolua_function(tolua_S,"SetSelTextBuf",tolua_z_VCL_TEdit_SetSelTextBuf00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TMemo","TMemo","TEdit",tolua_collect_TMemo);
#else
 tolua_cclass(tolua_S,"TMemo","TMemo","TEdit",NULL);
#endif
 tolua_beginmodule(tolua_S,"TMemo");
 tolua_variable(tolua_S,"MaxLength",tolua_get_TMemo_MaxLength,tolua_set_TMemo_MaxLength);
 tolua_variable(tolua_S,"OEMConvert",tolua_get_TMemo_OEMConvert,tolua_set_TMemo_OEMConvert);
 tolua_variable(tolua_S,"ParentBiDiMode",tolua_get_TMemo_ParentBiDiMode,tolua_set_TMemo_ParentBiDiMode);
 tolua_variable(tolua_S,"ParentColor",tolua_get_TMemo_ParentColor,tolua_set_TMemo_ParentColor);
 tolua_variable(tolua_S,"ParentFont",tolua_get_TMemo_ParentFont,tolua_set_TMemo_ParentFont);
 tolua_variable(tolua_S,"ParentShowHint",tolua_get_TMemo_ParentShowHint,tolua_set_TMemo_ParentShowHint);
 tolua_variable(tolua_S,"ParentCtl3D",tolua_get_TMemo_ParentCtl3D,tolua_set_TMemo_ParentCtl3D);
 tolua_variable(tolua_S,"ReadOnly",tolua_get_TMemo_ReadOnly,tolua_set_TMemo_ReadOnly);
 tolua_variable(tolua_S,"Ctl3D",tolua_get_TMemo_Ctl3D,tolua_set_TMemo_Ctl3D);
 tolua_variable(tolua_S,"Enabled",tolua_get_TMemo_Enabled,tolua_set_TMemo_Enabled);
 tolua_variable(tolua_S,"HideSelection",tolua_get_TMemo_HideSelection,tolua_set_TMemo_HideSelection);
 tolua_variable(tolua_S,"WantReturns",tolua_get_TMemo_WantReturns,tolua_set_TMemo_WantReturns);
 tolua_variable(tolua_S,"WantTabs",tolua_get_TMemo_WantTabs,tolua_set_TMemo_WantTabs);
 tolua_variable(tolua_S,"WordWrap",tolua_get_TMemo_WordWrap,tolua_set_TMemo_WordWrap);
 tolua_variable(tolua_S,"Align",tolua_get_TMemo_Align,tolua_set_TMemo_Align);
 tolua_variable(tolua_S,"Alignment",tolua_get_TMemo_Alignment,tolua_set_TMemo_Alignment);
 tolua_variable(tolua_S,"BevelEdges",tolua_get_TMemo_BevelEdges,tolua_set_TMemo_BevelEdges);
 tolua_variable(tolua_S,"BevelInner",tolua_get_TMemo_BevelInner,tolua_set_TMemo_BevelInner);
 tolua_variable(tolua_S,"BevelOuter",tolua_get_TMemo_BevelOuter,tolua_set_TMemo_BevelOuter);
 tolua_variable(tolua_S,"BevelKind",tolua_get_TMemo_BevelKind,tolua_set_TMemo_BevelKind);
 tolua_variable(tolua_S,"Color",tolua_get_TMemo_Color,tolua_set_TMemo_Color);
 tolua_variable(tolua_S,"DragKind",tolua_get_TMemo_DragKind,tolua_set_TMemo_DragKind);
 tolua_variable(tolua_S,"DragCursor",tolua_get_TMemo_DragCursor,tolua_set_TMemo_DragCursor);
 tolua_variable(tolua_S,"DragMode",tolua_get_TMemo_DragMode,tolua_set_TMemo_DragMode);
 tolua_variable(tolua_S,"Font",tolua_get_TMemo_Font_ptr,tolua_set_TMemo_Font_ptr);
 tolua_variable(tolua_S,"ImeMode",tolua_get_TMemo_ImeMode,tolua_set_TMemo_ImeMode);
 tolua_variable(tolua_S,"ImeName",tolua_get_TMemo_ImeName,tolua_set_TMemo_ImeName);
 tolua_variable(tolua_S,"CaretPos",tolua_get_TMemo_CaretPos,tolua_set_TMemo_CaretPos);
 tolua_variable(tolua_S,"Lines",tolua_get_TMemo_Lines_ptr,tolua_set_TMemo_Lines_ptr);
 tolua_variable(tolua_S,"ScrollBars",tolua_get_TMemo_ScrollBars,tolua_set_TMemo_ScrollBars);
 tolua_function(tolua_S,"new",tolua_z_VCL_TMemo_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TMemo_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TMemo_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TMemo_delete00);
 tolua_function(tolua_S,"GetControlsAlignment",tolua_z_VCL_TMemo_GetControlsAlignment00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TButton","TButton","TButtonControl",tolua_collect_TButton);
#else
 tolua_cclass(tolua_S,"TButton","TButton","TButtonControl",NULL);
#endif
 tolua_beginmodule(tolua_S,"TButton");
 tolua_variable(tolua_S,"Cancel",tolua_get_TButton_Cancel,tolua_set_TButton_Cancel);
 tolua_variable(tolua_S,"Default",tolua_get_TButton_Default,tolua_set_TButton_Default);
 tolua_variable(tolua_S,"Enabled",tolua_get_TButton_Enabled,tolua_set_TButton_Enabled);
 tolua_variable(tolua_S,"ParentBiDiMode",tolua_get_TButton_ParentBiDiMode,tolua_set_TButton_ParentBiDiMode);
 tolua_variable(tolua_S,"ParentFont",tolua_get_TButton_ParentFont,tolua_set_TButton_ParentFont);
 tolua_variable(tolua_S,"ParentShowHint",tolua_get_TButton_ParentShowHint,tolua_set_TButton_ParentShowHint);
 tolua_variable(tolua_S,"Caption",tolua_get_TButton_Caption,tolua_set_TButton_Caption);
 tolua_variable(tolua_S,"Action",tolua_get_TButton_Action_ptr,tolua_set_TButton_Action_ptr);
 tolua_variable(tolua_S,"DragKind",tolua_get_TButton_DragKind,tolua_set_TButton_DragKind);
 tolua_variable(tolua_S,"DragCursor",tolua_get_TButton_DragCursor,tolua_set_TButton_DragCursor);
 tolua_variable(tolua_S,"DragMode",tolua_get_TButton_DragMode,tolua_set_TButton_DragMode);
 tolua_variable(tolua_S,"ModalResult",tolua_get_TButton_ModalResult,tolua_set_TButton_ModalResult);
 tolua_function(tolua_S,"new",tolua_z_VCL_TButton_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TButton_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TButton_new00_local);
 tolua_function(tolua_S,"Click",tolua_z_VCL_TButton_Click00);
 tolua_function(tolua_S,"UseRightToLeftAlignment",tolua_z_VCL_TButton_UseRightToLeftAlignment00);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TButton_delete00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TCheckBox","TCheckBox","TButtonControl",tolua_collect_TCheckBox);
#else
 tolua_cclass(tolua_S,"TCheckBox","TCheckBox","TButtonControl",NULL);
#endif
 tolua_beginmodule(tolua_S,"TCheckBox");
 tolua_variable(tolua_S,"AllowGrayed",tolua_get_TCheckBox_AllowGrayed,tolua_set_TCheckBox_AllowGrayed);
 tolua_variable(tolua_S,"Checked",tolua_get_TCheckBox_Checked,tolua_set_TCheckBox_Checked);
 tolua_variable(tolua_S,"Ctl3D",tolua_get_TCheckBox_Ctl3D,tolua_set_TCheckBox_Ctl3D);
 tolua_variable(tolua_S,"Enabled",tolua_get_TCheckBox_Enabled,tolua_set_TCheckBox_Enabled);
 tolua_variable(tolua_S,"ParentBiDiMode",tolua_get_TCheckBox_ParentBiDiMode,tolua_set_TCheckBox_ParentBiDiMode);
 tolua_variable(tolua_S,"ParentColor",tolua_get_TCheckBox_ParentColor,tolua_set_TCheckBox_ParentColor);
 tolua_variable(tolua_S,"ParentFont",tolua_get_TCheckBox_ParentFont,tolua_set_TCheckBox_ParentFont);
 tolua_variable(tolua_S,"ParentShowHint",tolua_get_TCheckBox_ParentShowHint,tolua_set_TCheckBox_ParentShowHint);
 tolua_variable(tolua_S,"ParentCtl3D",tolua_get_TCheckBox_ParentCtl3D,tolua_set_TCheckBox_ParentCtl3D);
 tolua_variable(tolua_S,"Action",tolua_get_TCheckBox_Action_ptr,tolua_set_TCheckBox_Action_ptr);
 tolua_variable(tolua_S,"Alignment",tolua_get_TCheckBox_Alignment,tolua_set_TCheckBox_Alignment);
 tolua_variable(tolua_S,"Caption",tolua_get_TCheckBox_Caption,tolua_set_TCheckBox_Caption);
 tolua_variable(tolua_S,"Color",tolua_get_TCheckBox_Color,tolua_set_TCheckBox_Color);
 tolua_variable(tolua_S,"DragKind",tolua_get_TCheckBox_DragKind,tolua_set_TCheckBox_DragKind);
 tolua_variable(tolua_S,"DragCursor",tolua_get_TCheckBox_DragCursor,tolua_set_TCheckBox_DragCursor);
 tolua_variable(tolua_S,"DragMode",tolua_get_TCheckBox_DragMode,tolua_set_TCheckBox_DragMode);
 tolua_variable(tolua_S,"Font",tolua_get_TCheckBox_Font_ptr,tolua_set_TCheckBox_Font_ptr);
 tolua_variable(tolua_S,"State",tolua_get_TCheckBox_State,tolua_set_TCheckBox_State);
 tolua_function(tolua_S,"new",tolua_z_VCL_TCheckBox_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TCheckBox_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TCheckBox_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TCheckBox_delete00);
 tolua_function(tolua_S,"GetControlsAlignment",tolua_z_VCL_TCheckBox_GetControlsAlignment00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TRadioButton","TRadioButton","TButtonControl",tolua_collect_TRadioButton);
#else
 tolua_cclass(tolua_S,"TRadioButton","TRadioButton","TButtonControl",NULL);
#endif
 tolua_beginmodule(tolua_S,"TRadioButton");
 tolua_variable(tolua_S,"ParentBiDiMode",tolua_get_TRadioButton_ParentBiDiMode,tolua_set_TRadioButton_ParentBiDiMode);
 tolua_variable(tolua_S,"ParentColor",tolua_get_TRadioButton_ParentColor,tolua_set_TRadioButton_ParentColor);
 tolua_variable(tolua_S,"ParentFont",tolua_get_TRadioButton_ParentFont,tolua_set_TRadioButton_ParentFont);
 tolua_variable(tolua_S,"ParentShowHint",tolua_get_TRadioButton_ParentShowHint,tolua_set_TRadioButton_ParentShowHint);
 tolua_variable(tolua_S,"ParentCtl3D",tolua_get_TRadioButton_ParentCtl3D,tolua_set_TRadioButton_ParentCtl3D);
 tolua_variable(tolua_S,"Checked",tolua_get_TRadioButton_Checked,tolua_set_TRadioButton_Checked);
 tolua_variable(tolua_S,"Ctl3D",tolua_get_TRadioButton_Ctl3D,tolua_set_TRadioButton_Ctl3D);
 tolua_variable(tolua_S,"Enabled",tolua_get_TRadioButton_Enabled,tolua_set_TRadioButton_Enabled);
 tolua_variable(tolua_S,"Action",tolua_get_TRadioButton_Action_ptr,tolua_set_TRadioButton_Action_ptr);
 tolua_variable(tolua_S,"Alignment",tolua_get_TRadioButton_Alignment,tolua_set_TRadioButton_Alignment);
 tolua_variable(tolua_S,"Caption",tolua_get_TRadioButton_Caption,tolua_set_TRadioButton_Caption);
 tolua_variable(tolua_S,"Color",tolua_get_TRadioButton_Color,tolua_set_TRadioButton_Color);
 tolua_variable(tolua_S,"DragKind",tolua_get_TRadioButton_DragKind,tolua_set_TRadioButton_DragKind);
 tolua_variable(tolua_S,"DragCursor",tolua_get_TRadioButton_DragCursor,tolua_set_TRadioButton_DragCursor);
 tolua_variable(tolua_S,"DragMode",tolua_get_TRadioButton_DragMode,tolua_set_TRadioButton_DragMode);
 tolua_variable(tolua_S,"Font",tolua_get_TRadioButton_Font_ptr,tolua_set_TRadioButton_Font_ptr);
 tolua_variable(tolua_S,"PopupMenu",tolua_get_TRadioButton_PopupMenu_ptr,tolua_set_TRadioButton_PopupMenu_ptr);
 tolua_function(tolua_S,"new",tolua_z_VCL_TRadioButton_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TRadioButton_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TRadioButton_new00_local);
 tolua_function(tolua_S,"GetControlsAlignment",tolua_z_VCL_TRadioButton_GetControlsAlignment00);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TRadioButton_delete00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TListBox","TListBox","TCustomMultiSelectListControl",tolua_collect_TListBox);
#else
 tolua_cclass(tolua_S,"TListBox","TListBox","TCustomMultiSelectListControl",NULL);
#endif
 tolua_beginmodule(tolua_S,"TListBox");
 tolua_variable(tolua_S,"TabWidth",tolua_get_TListBox_TabWidth,tolua_set_TListBox_TabWidth);
 tolua_variable(tolua_S,"Columns",tolua_get_TListBox_Columns,tolua_set_TListBox_Columns);
 tolua_variable(tolua_S,"Count",tolua_get_TListBox_Count,tolua_set_TListBox_Count);
 tolua_variable(tolua_S,"ItemHeight",tolua_get_TListBox_ItemHeight,tolua_set_TListBox_ItemHeight);
 tolua_variable(tolua_S,"ScrollWidth",tolua_get_TListBox_ScrollWidth,tolua_set_TListBox_ScrollWidth);
 tolua_variable(tolua_S,"TopIndex",tolua_get_TListBox_TopIndex,tolua_set_TListBox_TopIndex);
 tolua_variable(tolua_S,"Ctl3D",tolua_get_TListBox_Ctl3D,tolua_set_TListBox_Ctl3D);
 tolua_variable(tolua_S,"ParentBiDiMode",tolua_get_TListBox_ParentBiDiMode,tolua_set_TListBox_ParentBiDiMode);
 tolua_variable(tolua_S,"ParentColor",tolua_get_TListBox_ParentColor,tolua_set_TListBox_ParentColor);
 tolua_variable(tolua_S,"ParentFont",tolua_get_TListBox_ParentFont,tolua_set_TListBox_ParentFont);
 tolua_variable(tolua_S,"ParentShowHint",tolua_get_TListBox_ParentShowHint,tolua_set_TListBox_ParentShowHint);
 tolua_variable(tolua_S,"ExtendedSelect",tolua_get_TListBox_ExtendedSelect,tolua_set_TListBox_ExtendedSelect);
 tolua_variable(tolua_S,"IntegralHeight",tolua_get_TListBox_IntegralHeight,tolua_set_TListBox_IntegralHeight);
 tolua_variable(tolua_S,"ParentCtl3D",tolua_get_TListBox_ParentCtl3D,tolua_set_TListBox_ParentCtl3D);
 tolua_variable(tolua_S,"Sorted",tolua_get_TListBox_Sorted,tolua_set_TListBox_Sorted);
 tolua_variable(tolua_S,"AutoComplete",tolua_get_TListBox_AutoComplete,tolua_set_TListBox_AutoComplete);
 tolua_array(tolua_S,"Selected",tolua_get_z_VCL_TListBox_Selected,tolua_set_z_VCL_TListBox_Selected);
 tolua_variable(tolua_S,"Style",tolua_get_TListBox_Style,tolua_set_TListBox_Style);
 tolua_variable(tolua_S,"Align",tolua_get_TListBox_Align,tolua_set_TListBox_Align);
 tolua_variable(tolua_S,"BevelEdges",tolua_get_TListBox_BevelEdges,tolua_set_TListBox_BevelEdges);
 tolua_variable(tolua_S,"BevelInner",tolua_get_TListBox_BevelInner,tolua_set_TListBox_BevelInner);
 tolua_variable(tolua_S,"BevelOuter",tolua_get_TListBox_BevelOuter,tolua_set_TListBox_BevelOuter);
 tolua_variable(tolua_S,"BevelKind",tolua_get_TListBox_BevelKind,tolua_set_TListBox_BevelKind);
 tolua_variable(tolua_S,"BorderStyle",tolua_get_TListBox_BorderStyle,tolua_set_TListBox_BorderStyle);
 tolua_variable(tolua_S,"Color",tolua_get_TListBox_Color,tolua_set_TListBox_Color);
 tolua_variable(tolua_S,"DragKind",tolua_get_TListBox_DragKind,tolua_set_TListBox_DragKind);
 tolua_variable(tolua_S,"DragCursor",tolua_get_TListBox_DragCursor,tolua_set_TListBox_DragCursor);
 tolua_variable(tolua_S,"DragMode",tolua_get_TListBox_DragMode,tolua_set_TListBox_DragMode);
 tolua_variable(tolua_S,"Font",tolua_get_TListBox_Font_ptr,tolua_set_TListBox_Font_ptr);
 tolua_variable(tolua_S,"PopupMenu",tolua_get_TListBox_PopupMenu_ptr,tolua_set_TListBox_PopupMenu_ptr);
 tolua_variable(tolua_S,"ImeMode",tolua_get_TListBox_ImeMode,tolua_set_TListBox_ImeMode);
 tolua_variable(tolua_S,"ImeName",tolua_get_TListBox_ImeName,tolua_set_TListBox_ImeName);
 tolua_function(tolua_S,"new",tolua_z_VCL_TListBox_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TListBox_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TListBox_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TListBox_delete00);
 tolua_function(tolua_S,"AddItem",tolua_z_VCL_TListBox_AddItem00);
 tolua_function(tolua_S,"Clear",tolua_z_VCL_TListBox_Clear00);
 tolua_function(tolua_S,"ClearSelection",tolua_z_VCL_TListBox_ClearSelection00);
 tolua_function(tolua_S,"CopySelection",tolua_z_VCL_TListBox_CopySelection00);
 tolua_function(tolua_S,"DeleteSelected",tolua_z_VCL_TListBox_DeleteSelected00);
 tolua_function(tolua_S,"ItemAtPos",tolua_z_VCL_TListBox_ItemAtPos00);
 tolua_function(tolua_S,"ItemRect",tolua_z_VCL_TListBox_ItemRect00);
 tolua_function(tolua_S,"SelectAll",tolua_z_VCL_TListBox_SelectAll00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TScrollBar","TScrollBar","TWinControl",tolua_collect_TScrollBar);
#else
 tolua_cclass(tolua_S,"TScrollBar","TScrollBar","TWinControl",NULL);
#endif
 tolua_beginmodule(tolua_S,"TScrollBar");
 tolua_variable(tolua_S,"Max",tolua_get_TScrollBar_Max,tolua_set_TScrollBar_Max);
 tolua_variable(tolua_S,"Min",tolua_get_TScrollBar_Min,tolua_set_TScrollBar_Min);
 tolua_variable(tolua_S,"PageSize",tolua_get_TScrollBar_PageSize,tolua_set_TScrollBar_PageSize);
 tolua_variable(tolua_S,"Position",tolua_get_TScrollBar_Position,tolua_set_TScrollBar_Position);
 tolua_variable(tolua_S,"ParentCtl3D",tolua_get_TScrollBar_ParentCtl3D,tolua_set_TScrollBar_ParentCtl3D);
 tolua_variable(tolua_S,"Ctl3D",tolua_get_TScrollBar_Ctl3D,tolua_set_TScrollBar_Ctl3D);
 tolua_variable(tolua_S,"Enabled",tolua_get_TScrollBar_Enabled,tolua_set_TScrollBar_Enabled);
 tolua_variable(tolua_S,"ParentBiDiMode",tolua_get_TScrollBar_ParentBiDiMode,tolua_set_TScrollBar_ParentBiDiMode);
 tolua_variable(tolua_S,"ParentShowHint",tolua_get_TScrollBar_ParentShowHint,tolua_set_TScrollBar_ParentShowHint);
 tolua_variable(tolua_S,"Align",tolua_get_TScrollBar_Align,tolua_set_TScrollBar_Align);
 tolua_variable(tolua_S,"DragKind",tolua_get_TScrollBar_DragKind,tolua_set_TScrollBar_DragKind);
 tolua_variable(tolua_S,"DragCursor",tolua_get_TScrollBar_DragCursor,tolua_set_TScrollBar_DragCursor);
 tolua_variable(tolua_S,"DragMode",tolua_get_TScrollBar_DragMode,tolua_set_TScrollBar_DragMode);
 tolua_variable(tolua_S,"Kind",tolua_get_TScrollBar_Kind,tolua_set_TScrollBar_Kind);
 tolua_variable(tolua_S,"LargeChange",tolua_get_TScrollBar_LargeChange,tolua_set_TScrollBar_LargeChange);
 tolua_variable(tolua_S,"PopupMenu",tolua_get_TScrollBar_PopupMenu_ptr,tolua_set_TScrollBar_PopupMenu_ptr);
 tolua_variable(tolua_S,"SmallChange",tolua_get_TScrollBar_SmallChange,tolua_set_TScrollBar_SmallChange);
 tolua_function(tolua_S,"new",tolua_z_VCL_TScrollBar_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TScrollBar_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TScrollBar_new00_local);
 tolua_function(tolua_S,"SetParams",tolua_z_VCL_TScrollBar_SetParams00);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TScrollBar_delete00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TComboBox","TComboBox","TCustomCombo",tolua_collect_TComboBox);
#else
 tolua_cclass(tolua_S,"TComboBox","TComboBox","TCustomCombo",NULL);
#endif
 tolua_beginmodule(tolua_S,"TComboBox");
 tolua_variable(tolua_S,"ItemHeight",tolua_get_TComboBox_ItemHeight,tolua_set_TComboBox_ItemHeight);
 tolua_variable(tolua_S,"DropDownCount",tolua_get_TComboBox_DropDownCount,tolua_set_TComboBox_DropDownCount);
 tolua_variable(tolua_S,"ItemIndex",tolua_get_TComboBox_ItemIndex,tolua_set_TComboBox_ItemIndex);
 tolua_variable(tolua_S,"MaxLength",tolua_get_TComboBox_MaxLength,tolua_set_TComboBox_MaxLength);
 tolua_variable(tolua_S,"ParentCtl3D",tolua_get_TComboBox_ParentCtl3D,tolua_set_TComboBox_ParentCtl3D);
 tolua_variable(tolua_S,"Sorted",tolua_get_TComboBox_Sorted,tolua_set_TComboBox_Sorted);
 tolua_variable(tolua_S,"AutoComplete",tolua_get_TComboBox_AutoComplete,tolua_set_TComboBox_AutoComplete);
 tolua_variable(tolua_S,"AutoDropDown",tolua_get_TComboBox_AutoDropDown,tolua_set_TComboBox_AutoDropDown);
 tolua_variable(tolua_S,"Ctl3D",tolua_get_TComboBox_Ctl3D,tolua_set_TComboBox_Ctl3D);
 tolua_variable(tolua_S,"Enabled",tolua_get_TComboBox_Enabled,tolua_set_TComboBox_Enabled);
 tolua_variable(tolua_S,"ParentBiDiMode",tolua_get_TComboBox_ParentBiDiMode,tolua_set_TComboBox_ParentBiDiMode);
 tolua_variable(tolua_S,"ParentColor",tolua_get_TComboBox_ParentColor,tolua_set_TComboBox_ParentColor);
 tolua_variable(tolua_S,"ParentFont",tolua_get_TComboBox_ParentFont,tolua_set_TComboBox_ParentFont);
 tolua_variable(tolua_S,"ParentShowHint",tolua_get_TComboBox_ParentShowHint,tolua_set_TComboBox_ParentShowHint);
 tolua_variable(tolua_S,"CharCase",tolua_get_TComboBox_CharCase,tolua_set_TComboBox_CharCase);
 tolua_variable(tolua_S,"SelText",tolua_get_TComboBox_SelText,tolua_set_TComboBox_SelText);
 tolua_variable(tolua_S,"BevelEdges",tolua_get_TComboBox_BevelEdges,tolua_set_TComboBox_BevelEdges);
 tolua_variable(tolua_S,"BevelInner",tolua_get_TComboBox_BevelInner,tolua_set_TComboBox_BevelInner);
 tolua_variable(tolua_S,"BevelOuter",tolua_get_TComboBox_BevelOuter,tolua_set_TComboBox_BevelOuter);
 tolua_variable(tolua_S,"BevelKind",tolua_get_TComboBox_BevelKind,tolua_set_TComboBox_BevelKind);
 tolua_variable(tolua_S,"Style",tolua_get_TComboBox_Style,tolua_set_TComboBox_Style);
 tolua_variable(tolua_S,"Color",tolua_get_TComboBox_Color,tolua_set_TComboBox_Color);
 tolua_variable(tolua_S,"DragKind",tolua_get_TComboBox_DragKind,tolua_set_TComboBox_DragKind);
 tolua_variable(tolua_S,"DragCursor",tolua_get_TComboBox_DragCursor,tolua_set_TComboBox_DragCursor);
 tolua_variable(tolua_S,"DragMode",tolua_get_TComboBox_DragMode,tolua_set_TComboBox_DragMode);
 tolua_variable(tolua_S,"Font",tolua_get_TComboBox_Font_ptr,tolua_set_TComboBox_Font_ptr);
 tolua_variable(tolua_S,"PopupMenu",tolua_get_TComboBox_PopupMenu_ptr,tolua_set_TComboBox_PopupMenu_ptr);
 tolua_variable(tolua_S,"ImeMode",tolua_get_TComboBox_ImeMode,tolua_set_TComboBox_ImeMode);
 tolua_variable(tolua_S,"ImeName",tolua_get_TComboBox_ImeName,tolua_set_TComboBox_ImeName);
 tolua_variable(tolua_S,"Text",tolua_get_TComboBox_Text,tolua_set_TComboBox_Text);
 tolua_function(tolua_S,"new",tolua_z_VCL_TComboBox_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TComboBox_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TComboBox_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TComboBox_delete00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TGroupBox","TGroupBox","TCustomControl",tolua_collect_TGroupBox);
#else
 tolua_cclass(tolua_S,"TGroupBox","TGroupBox","TCustomControl",NULL);
#endif
 tolua_beginmodule(tolua_S,"TGroupBox");
 tolua_variable(tolua_S,"Ctl3D",tolua_get_TGroupBox_Ctl3D,tolua_set_TGroupBox_Ctl3D);
 tolua_variable(tolua_S,"DockSite",tolua_get_TGroupBox_DockSite,tolua_set_TGroupBox_DockSite);
 tolua_variable(tolua_S,"Enabled",tolua_get_TGroupBox_Enabled,tolua_set_TGroupBox_Enabled);
 tolua_variable(tolua_S,"ParentBiDiMode",tolua_get_TGroupBox_ParentBiDiMode,tolua_set_TGroupBox_ParentBiDiMode);
 tolua_variable(tolua_S,"ParentColor",tolua_get_TGroupBox_ParentColor,tolua_set_TGroupBox_ParentColor);
 tolua_variable(tolua_S,"ParentFont",tolua_get_TGroupBox_ParentFont,tolua_set_TGroupBox_ParentFont);
 tolua_variable(tolua_S,"ParentShowHint",tolua_get_TGroupBox_ParentShowHint,tolua_set_TGroupBox_ParentShowHint);
 tolua_variable(tolua_S,"ParentCtl3D",tolua_get_TGroupBox_ParentCtl3D,tolua_set_TGroupBox_ParentCtl3D);
 tolua_variable(tolua_S,"Align",tolua_get_TGroupBox_Align,tolua_set_TGroupBox_Align);
 tolua_variable(tolua_S,"Caption",tolua_get_TGroupBox_Caption,tolua_set_TGroupBox_Caption);
 tolua_variable(tolua_S,"Color",tolua_get_TGroupBox_Color,tolua_set_TGroupBox_Color);
 tolua_variable(tolua_S,"DragKind",tolua_get_TGroupBox_DragKind,tolua_set_TGroupBox_DragKind);
 tolua_variable(tolua_S,"DragCursor",tolua_get_TGroupBox_DragCursor,tolua_set_TGroupBox_DragCursor);
 tolua_variable(tolua_S,"DragMode",tolua_get_TGroupBox_DragMode,tolua_set_TGroupBox_DragMode);
 tolua_variable(tolua_S,"Font",tolua_get_TGroupBox_Font_ptr,tolua_set_TGroupBox_Font_ptr);
 tolua_variable(tolua_S,"PopupMenu",tolua_get_TGroupBox_PopupMenu_ptr,tolua_set_TGroupBox_PopupMenu_ptr);
 tolua_function(tolua_S,"new",tolua_z_VCL_TGroupBox_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TGroupBox_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TGroupBox_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TGroupBox_delete00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TRadioGroup","TRadioGroup","TGroupBox",tolua_collect_TRadioGroup);
#else
 tolua_cclass(tolua_S,"TRadioGroup","TRadioGroup","TGroupBox",NULL);
#endif
 tolua_beginmodule(tolua_S,"TRadioGroup");
 tolua_variable(tolua_S,"Columns",tolua_get_TRadioGroup_Columns,tolua_set_TRadioGroup_Columns);
 tolua_variable(tolua_S,"Ctl3D",tolua_get_TRadioGroup_Ctl3D,tolua_set_TRadioGroup_Ctl3D);
 tolua_variable(tolua_S,"Enabled",tolua_get_TRadioGroup_Enabled,tolua_set_TRadioGroup_Enabled);
 tolua_variable(tolua_S,"ParentBiDiMode",tolua_get_TRadioGroup_ParentBiDiMode,tolua_set_TRadioGroup_ParentBiDiMode);
 tolua_variable(tolua_S,"ParentColor",tolua_get_TRadioGroup_ParentColor,tolua_set_TRadioGroup_ParentColor);
 tolua_variable(tolua_S,"ParentFont",tolua_get_TRadioGroup_ParentFont,tolua_set_TRadioGroup_ParentFont);
 tolua_variable(tolua_S,"ParentShowHint",tolua_get_TRadioGroup_ParentShowHint,tolua_set_TRadioGroup_ParentShowHint);
 tolua_variable(tolua_S,"ParentCtl3D",tolua_get_TRadioGroup_ParentCtl3D,tolua_set_TRadioGroup_ParentCtl3D);
 tolua_variable(tolua_S,"Align",tolua_get_TRadioGroup_Align,tolua_set_TRadioGroup_Align);
 tolua_variable(tolua_S,"Caption",tolua_get_TRadioGroup_Caption,tolua_set_TRadioGroup_Caption);
 tolua_variable(tolua_S,"Color",tolua_get_TRadioGroup_Color,tolua_set_TRadioGroup_Color);
 tolua_variable(tolua_S,"DragKind",tolua_get_TRadioGroup_DragKind,tolua_set_TRadioGroup_DragKind);
 tolua_variable(tolua_S,"DragCursor",tolua_get_TRadioGroup_DragCursor,tolua_set_TRadioGroup_DragCursor);
 tolua_variable(tolua_S,"DragMode",tolua_get_TRadioGroup_DragMode,tolua_set_TRadioGroup_DragMode);
 tolua_variable(tolua_S,"Font",tolua_get_TRadioGroup_Font_ptr,tolua_set_TRadioGroup_Font_ptr);
 tolua_variable(tolua_S,"PopupMenu",tolua_get_TRadioGroup_PopupMenu_ptr,tolua_set_TRadioGroup_PopupMenu_ptr);
 tolua_function(tolua_S,"new",tolua_z_VCL_TRadioGroup_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TRadioGroup_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TRadioGroup_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TRadioGroup_delete00);
 tolua_function(tolua_S,"FlipChildren",tolua_z_VCL_TRadioGroup_FlipChildren00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TPanel","TPanel","TCustomControl",tolua_collect_TPanel);
#else
 tolua_cclass(tolua_S,"TPanel","TPanel","TCustomControl",NULL);
#endif
 tolua_beginmodule(tolua_S,"TPanel");
 tolua_variable(tolua_S,"AutoSize",tolua_get_TPanel_AutoSize,tolua_set_TPanel_AutoSize);
 tolua_variable(tolua_S,"ParentBiDiMode",tolua_get_TPanel_ParentBiDiMode,tolua_set_TPanel_ParentBiDiMode);
 tolua_variable(tolua_S,"ParentColor",tolua_get_TPanel_ParentColor,tolua_set_TPanel_ParentColor);
 tolua_variable(tolua_S,"ParentFont",tolua_get_TPanel_ParentFont,tolua_set_TPanel_ParentFont);
 tolua_variable(tolua_S,"ParentShowHint",tolua_get_TPanel_ParentShowHint,tolua_set_TPanel_ParentShowHint);
 tolua_variable(tolua_S,"FullRepaint",tolua_get_TPanel_FullRepaint,tolua_set_TPanel_FullRepaint);
 tolua_variable(tolua_S,"Locked",tolua_get_TPanel_Locked,tolua_set_TPanel_Locked);
 tolua_variable(tolua_S,"ParentCtl3D",tolua_get_TPanel_ParentCtl3D,tolua_set_TPanel_ParentCtl3D);
 tolua_variable(tolua_S,"Enabled",tolua_get_TPanel_Enabled,tolua_set_TPanel_Enabled);
 tolua_variable(tolua_S,"Ctl3D",tolua_get_TPanel_Ctl3D,tolua_set_TPanel_Ctl3D);
 tolua_variable(tolua_S,"DockSite",tolua_get_TPanel_DockSite,tolua_set_TPanel_DockSite);
 tolua_variable(tolua_S,"UseDockManager",tolua_get_TPanel_UseDockManager,tolua_set_TPanel_UseDockManager);
 tolua_variable(tolua_S,"Align",tolua_get_TPanel_Align,tolua_set_TPanel_Align);
 tolua_variable(tolua_S,"Alignment",tolua_get_TPanel_Alignment,tolua_set_TPanel_Alignment);
 tolua_variable(tolua_S,"BevelInner",tolua_get_TPanel_BevelInner,tolua_set_TPanel_BevelInner);
 tolua_variable(tolua_S,"BevelOuter",tolua_get_TPanel_BevelOuter,tolua_set_TPanel_BevelOuter);
 tolua_variable(tolua_S,"BevelWidth",tolua_get_TPanel_BevelWidth,tolua_set_TPanel_BevelWidth);
 tolua_variable(tolua_S,"BorderWidth",tolua_get_TPanel_BorderWidth,tolua_set_TPanel_BorderWidth);
 tolua_variable(tolua_S,"BorderStyle",tolua_get_TPanel_BorderStyle,tolua_set_TPanel_BorderStyle);
 tolua_variable(tolua_S,"Caption",tolua_get_TPanel_Caption,tolua_set_TPanel_Caption);
 tolua_variable(tolua_S,"Color",tolua_get_TPanel_Color,tolua_set_TPanel_Color);
 tolua_variable(tolua_S,"DragKind",tolua_get_TPanel_DragKind,tolua_set_TPanel_DragKind);
 tolua_variable(tolua_S,"DragCursor",tolua_get_TPanel_DragCursor,tolua_set_TPanel_DragCursor);
 tolua_variable(tolua_S,"DragMode",tolua_get_TPanel_DragMode,tolua_set_TPanel_DragMode);
 tolua_variable(tolua_S,"Font",tolua_get_TPanel_Font_ptr,tolua_set_TPanel_Font_ptr);
 tolua_variable(tolua_S,"PopupMenu",tolua_get_TPanel_PopupMenu_ptr,tolua_set_TPanel_PopupMenu_ptr);
 tolua_function(tolua_S,"new",tolua_z_VCL_TPanel_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TPanel_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TPanel_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TPanel_delete00);
 tolua_function(tolua_S,"GetControlsAlignment",tolua_z_VCL_TPanel_GetControlsAlignment00);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TForm","TForm","TScrollingWinControl",tolua_collect_TForm);
#else
 tolua_cclass(tolua_S,"TForm","TForm","TScrollingWinControl",NULL);
#endif
 tolua_beginmodule(tolua_S,"TForm");
 tolua_variable(tolua_S,"ClientHeight",tolua_get_TForm_ClientHeight,tolua_set_TForm_ClientHeight);
 tolua_variable(tolua_S,"PixelsPerInch",tolua_get_TForm_PixelsPerInch,tolua_set_TForm_PixelsPerInch);
 tolua_variable(tolua_S,"ClientWidth",tolua_get_TForm_ClientWidth,tolua_set_TForm_ClientWidth);
 tolua_variable(tolua_S,"DropTarget",tolua_get_TForm_DropTarget,tolua_set_TForm_DropTarget);
 tolua_variable(tolua_S,"KeyPreview",tolua_get_TForm_KeyPreview,tolua_set_TForm_KeyPreview);
 tolua_variable(tolua_S,"AlphaBlend",tolua_get_TForm_AlphaBlend,tolua_set_TForm_AlphaBlend);
 tolua_variable(tolua_S,"AutoScroll",tolua_get_TForm_AutoScroll,tolua_set_TForm_AutoScroll);
 tolua_variable(tolua_S,"AutoSize",tolua_get_TForm_AutoSize,tolua_set_TForm_AutoSize);
 tolua_variable(tolua_S,"TransparentColor",tolua_get_TForm_TransparentColor,tolua_set_TForm_TransparentColor);
 tolua_variable(tolua_S,"Ctl3D",tolua_get_TForm_Ctl3D,tolua_set_TForm_Ctl3D);
 tolua_variable(tolua_S,"UseDockManager",tolua_get_TForm_UseDockManager,tolua_set_TForm_UseDockManager);
 tolua_variable(tolua_S,"DockSite",tolua_get_TForm_DockSite,tolua_set_TForm_DockSite);
 tolua_variable(tolua_S,"Enabled",tolua_get_TForm_Enabled,tolua_set_TForm_Enabled);
 tolua_variable(tolua_S,"ParentBiDiMode",tolua_get_TForm_ParentBiDiMode,tolua_set_TForm_ParentBiDiMode);
 tolua_variable(tolua_S,"ParentFont",tolua_get_TForm_ParentFont,tolua_set_TForm_ParentFont);
 tolua_variable(tolua_S,"OldCreateOrder",tolua_get_TForm_OldCreateOrder,tolua_set_TForm_OldCreateOrder);
 tolua_variable(tolua_S,"Scaled",tolua_get_TForm_Scaled,tolua_set_TForm_Scaled);
 tolua_variable(tolua_S,"TileMode",tolua_get_TForm_TileMode,tolua_set_TForm_TileMode);
 tolua_variable(tolua_S,"Action",tolua_get_TForm_Action_ptr,tolua_set_TForm_Action_ptr);
 tolua_variable(tolua_S,"Align",tolua_get_TForm_Align,tolua_set_TForm_Align);
 tolua_variable(tolua_S,"AlphaBlendValue",tolua_get_TForm_AlphaBlendValue,tolua_set_TForm_AlphaBlendValue);
 tolua_variable(tolua_S,"BorderIcons",tolua_get_TForm_BorderIcons,tolua_set_TForm_BorderIcons);
 tolua_variable(tolua_S,"BorderStyle",tolua_get_TForm_BorderStyle,tolua_set_TForm_BorderStyle);
 tolua_variable(tolua_S,"BorderWidth",tolua_get_TForm_BorderWidth,tolua_set_TForm_BorderWidth);
 tolua_variable(tolua_S,"Caption",tolua_get_TForm_Caption,tolua_set_TForm_Caption);
 tolua_variable(tolua_S,"Color",tolua_get_TForm_Color,tolua_set_TForm_Color);
 tolua_variable(tolua_S,"TransparentColorValue",tolua_get_TForm_TransparentColorValue,tolua_set_TForm_TransparentColorValue);
 tolua_variable(tolua_S,"DefaultMonitor",tolua_get_TForm_DefaultMonitor,tolua_set_TForm_DefaultMonitor);
 tolua_variable(tolua_S,"DragKind",tolua_get_TForm_DragKind,tolua_set_TForm_DragKind);
 tolua_variable(tolua_S,"DragMode",tolua_get_TForm_DragMode,tolua_set_TForm_DragMode);
 tolua_variable(tolua_S,"Font",tolua_get_TForm_Font_ptr,tolua_set_TForm_Font_ptr);
 tolua_variable(tolua_S,"PopupMenu",tolua_get_TForm_PopupMenu_ptr,tolua_set_TForm_PopupMenu_ptr);
 tolua_variable(tolua_S,"FormStyle",tolua_get_TForm_FormStyle,tolua_set_TForm_FormStyle);
 tolua_variable(tolua_S,"HorzScrollBar",tolua_get_TForm_HorzScrollBar_ptr,tolua_set_TForm_HorzScrollBar_ptr);
 tolua_variable(tolua_S,"Icon",tolua_get_TForm_Icon_ptr,tolua_set_TForm_Icon_ptr);
 tolua_variable(tolua_S,"Menu",tolua_get_TForm_Menu_ptr,tolua_set_TForm_Menu_ptr);
 tolua_variable(tolua_S,"ObjectMenuItem",tolua_get_TForm_ObjectMenuItem_ptr,tolua_set_TForm_ObjectMenuItem_ptr);
 tolua_variable(tolua_S,"HelpFile",tolua_get_TForm_HelpFile,tolua_set_TForm_HelpFile);
 tolua_variable(tolua_S,"ModalResult",tolua_get_TForm_ModalResult,tolua_set_TForm_ModalResult);
 tolua_variable(tolua_S,"WindowState",tolua_get_TForm_WindowState,tolua_set_TForm_WindowState);
 tolua_variable(tolua_S,"ActiveControl",tolua_get_TForm_ActiveControl_ptr,tolua_set_TForm_ActiveControl_ptr);
 tolua_variable(tolua_S,"ActiveOleControl",tolua_get_TForm_ActiveOleControl_ptr,tolua_set_TForm_ActiveOleControl_ptr);
 tolua_variable(tolua_S,"Position",tolua_get_TForm_Position,tolua_set_TForm_Position);
 tolua_variable(tolua_S,"PrintScale",tolua_get_TForm_PrintScale,tolua_set_TForm_PrintScale);
 tolua_variable(tolua_S,"VertScrollBar",tolua_get_TForm_VertScrollBar_ptr,tolua_set_TForm_VertScrollBar_ptr);
 tolua_variable(tolua_S,"ActiveMDIChild",tolua_get_TForm_ActiveMDIChild_ptr,NULL);
 tolua_variable(tolua_S,"MDIChildCount",tolua_get_TForm_MDIChildCount,NULL);
 tolua_array(tolua_S,"MDIChildren",tolua_get_z_VCL_TForm_MDIChildren,NULL);
 tolua_variable(tolua_S,"FormState",tolua_get_TForm_FormState,NULL);
 tolua_variable(tolua_S,"Monitor",tolua_get_TForm_Monitor_ptr,NULL);
 tolua_variable(tolua_S,"Active",tolua_get_TForm_Active,NULL);
 tolua_function(tolua_S,"new",tolua_z_VCL_TForm_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TForm_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TForm_new00_local);
 tolua_function(tolua_S,"new",tolua_z_VCL_TForm_new01);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TForm_new01_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TForm_new01_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TForm_delete00);
 tolua_function(tolua_S,"ArrangeIcons",tolua_z_VCL_TForm_ArrangeIcons00);
 tolua_function(tolua_S,"Cascade",tolua_z_VCL_TForm_Cascade00);
 tolua_function(tolua_S,"Next",tolua_z_VCL_TForm_Next00);
 tolua_function(tolua_S,"Previous",tolua_z_VCL_TForm_Previous00);
 tolua_function(tolua_S,"Tile",tolua_z_VCL_TForm_Tile00);
 tolua_function(tolua_S,"AfterConstruction",tolua_z_VCL_TForm_AfterConstruction00);
 tolua_function(tolua_S,"BeforeDestruction",tolua_z_VCL_TForm_BeforeDestruction00);
 tolua_function(tolua_S,"Close",tolua_z_VCL_TForm_Close00);
 tolua_function(tolua_S,"CloseQuery",tolua_z_VCL_TForm_CloseQuery00);
 tolua_function(tolua_S,"DefaultHandler",tolua_z_VCL_TForm_DefaultHandler00);
 tolua_function(tolua_S,"DefocusControl",tolua_z_VCL_TForm_DefocusControl00);
 tolua_function(tolua_S,"Dock",tolua_z_VCL_TForm_Dock00);
 tolua_function(tolua_S,"FocusControl",tolua_z_VCL_TForm_FocusControl00);
 tolua_function(tolua_S,"GetFormImage",tolua_z_VCL_TForm_GetFormImage00);
 tolua_function(tolua_S,"Hide",tolua_z_VCL_TForm_Hide00);
 tolua_function(tolua_S,"IsShortCut",tolua_z_VCL_TForm_IsShortCut00);
 tolua_function(tolua_S,"MakeFullyVisible",tolua_z_VCL_TForm_MakeFullyVisible00);
 tolua_function(tolua_S,"MouseWheelHandler",tolua_z_VCL_TForm_MouseWheelHandler00);
 tolua_function(tolua_S,"Print",tolua_z_VCL_TForm_Print00);
 tolua_function(tolua_S,"Release",tolua_z_VCL_TForm_Release00);
 tolua_function(tolua_S,"SendCancelMode",tolua_z_VCL_TForm_SendCancelMode00);
 tolua_function(tolua_S,"SetFocus",tolua_z_VCL_TForm_SetFocus00);
 tolua_function(tolua_S,"SetFocusedControl",tolua_z_VCL_TForm_SetFocusedControl00);
 tolua_function(tolua_S,"Show",tolua_z_VCL_TForm_Show00);
 tolua_function(tolua_S,"ShowModal",tolua_z_VCL_TForm_ShowModal00);
 tolua_function(tolua_S,"WantChildKey",tolua_z_VCL_TForm_WantChildKey00);
 tolua_endmodule(tolua_S);
 tolua_constant(tolua_S,"htAbove",htAbove);
 tolua_constant(tolua_S,"htBelow",htBelow);
 tolua_constant(tolua_S,"htNowhere",htNowhere);
 tolua_constant(tolua_S,"htOnItem",htOnItem);
 tolua_constant(tolua_S,"htOnButton",htOnButton);
 tolua_constant(tolua_S,"htOnIcon",htOnIcon);
 tolua_constant(tolua_S,"htOnIndent",htOnIndent);
 tolua_constant(tolua_S,"htOnLabel",htOnLabel);
 tolua_constant(tolua_S,"htOnRight",htOnRight);
 tolua_constant(tolua_S,"htOnStateIcon",htOnStateIcon);
 tolua_constant(tolua_S,"htToLeft",htToLeft);
 tolua_constant(tolua_S,"htToRight",htToRight);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TCustomTabControl","TCustomTabControl","TWinControl",tolua_collect_TCustomTabControl);
#else
 tolua_cclass(tolua_S,"TCustomTabControl","TCustomTabControl","TWinControl",NULL);
#endif
 tolua_beginmodule(tolua_S,"TCustomTabControl");
 tolua_function(tolua_S,"new",tolua_z_VCL_TCustomTabControl_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TCustomTabControl_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TCustomTabControl_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TCustomTabControl_delete00);
 tolua_function(tolua_S,"IndexOfTabAt",tolua_z_VCL_TCustomTabControl_IndexOfTabAt00);
 tolua_function(tolua_S,"GetHitTestInfoAt",tolua_z_VCL_TCustomTabControl_GetHitTestInfoAt00);
 tolua_function(tolua_S,"TabRect",tolua_z_VCL_TCustomTabControl_TabRect00);
 tolua_function(tolua_S,"RowCount",tolua_z_VCL_TCustomTabControl_RowCount00);
 tolua_function(tolua_S,"ScrollTabs",tolua_z_VCL_TCustomTabControl_ScrollTabs00);
 tolua_variable(tolua_S,"Canvas",tolua_get_TCustomTabControl_Canvas_ptr,NULL);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TPageControl","TPageControl","",tolua_collect_TPageControl);
#else
 tolua_cclass(tolua_S,"TPageControl","TPageControl","",NULL);
#endif
 tolua_beginmodule(tolua_S,"TPageControl");
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TTabSheet","TTabSheet","TWinControl",tolua_collect_TTabSheet);
#else
 tolua_cclass(tolua_S,"TTabSheet","TTabSheet","TWinControl",NULL);
#endif
 tolua_beginmodule(tolua_S,"TTabSheet");
 //////////////////////////////////////////////////////////
 tolua_variable(tolua_S,"Caption",tolua_get_TTabSheet_Caption,tolua_set_TTabSheet_Caption);
 //////////////////////////////////////////////////////////
 tolua_variable(tolua_S,"Highlighted",tolua_get_TTabSheet_Highlighted,tolua_set_TTabSheet_Highlighted);
 tolua_variable(tolua_S,"ImageIndex",tolua_get_TTabSheet_ImageIndex,tolua_set_TTabSheet_ImageIndex);
 tolua_variable(tolua_S,"PageIndex",tolua_get_TTabSheet_PageIndex,tolua_set_TTabSheet_PageIndex);
 tolua_variable(tolua_S,"TabVisible",tolua_get_TTabSheet_TabVisible,tolua_set_TTabSheet_TabVisible);
 tolua_function(tolua_S,"new",tolua_z_VCL_TTabSheet_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TTabSheet_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TTabSheet_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_VCL_TTabSheet_delete00);
 tolua_variable(tolua_S,"PageControl",tolua_get_TTabSheet_PageControl_ptr,tolua_set_TTabSheet_PageControl_ptr);
 tolua_variable(tolua_S,"TabIndex",tolua_get_TTabSheet_TabIndex,NULL);
 tolua_endmodule(tolua_S);
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TPageControl","TPageControl","TCustomTabControl",tolua_collect_TPageControl);
#else
 tolua_cclass(tolua_S,"TPageControl","TPageControl","TCustomTabControl",NULL);
#endif
 tolua_beginmodule(tolua_S,"TPageControl");
 tolua_function(tolua_S,"new",tolua_z_VCL_TPageControl_new00);
 tolua_function(tolua_S,"new_local",tolua_z_VCL_TPageControl_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_VCL_TPageControl_new00_local);
 tolua_array(tolua_S,"Pages",tolua_get_z_VCL_TPageControl_Pages,NULL);
 tolua_endmodule(tolua_S);

 ///////////////////////////////////
#ifdef __cplusplus
 tolua_cclass(tolua_S,"TLabel","TLabel","TGraphicControl",tolua_collect_TLabel);
#else
 tolua_cclass(tolua_S,"TLabel","TLabel","TGraphicControl",NULL);
#endif
 tolua_beginmodule(tolua_S,"TLabel");
 tolua_variable(tolua_S,"Alignment",tolua_get_TLabel_Alignment,tolua_set_TLabel_Alignment);
 tolua_variable(tolua_S,"AutoSize",tolua_get_TLabel_AutoSize,tolua_set_TLabel_AutoSize);
 tolua_variable(tolua_S,"FocusControl",tolua_get_TLabel_FocusControl_ptr,tolua_set_TLabel_FocusControl_ptr);
 tolua_variable(tolua_S,"ShowAccelChar",tolua_get_TLabel_ShowAccelChar,tolua_set_TLabel_ShowAccelChar);
 tolua_variable(tolua_S,"Transparent",tolua_get_TLabel_Transparent,tolua_set_TLabel_Transparent);
 tolua_variable(tolua_S,"Layout",tolua_get_TLabel_Layout,tolua_set_TLabel_Layout);
 tolua_variable(tolua_S,"WordWrap",tolua_get_TLabel_WordWrap,tolua_set_TLabel_WordWrap);
 tolua_variable(tolua_S,"Caption",tolua_get_TLabel_Caption,tolua_set_TLabel_Caption);
 tolua_function(tolua_S,"new",tolua_z_Label_TLabel_new00);
 tolua_function(tolua_S,"new_local",tolua_z_Label_TLabel_new00_local);
 tolua_set_call_event(tolua_S,tolua_z_Label_TLabel_new00_local);
 tolua_function(tolua_S,"delete",tolua_z_Label_TLabel_delete00);
 tolua_endmodule(tolua_S);
 ///////////////////////////////////


 tolua_endmodule(tolua_S);
 return 1;
}
